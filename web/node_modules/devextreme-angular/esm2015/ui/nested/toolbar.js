/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoFileManagerToolbar } from './base/file-manager-toolbar';
import { DxiFileSelectionItemComponent } from './file-selection-item-dxi';
import { DxiItemComponent } from './item-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxoToolbarComponent = class DxoToolbarComponent extends DxoFileManagerToolbar {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'toolbar';
    }
    get fileSelectionItemsChildren() {
        return this._getOption('fileSelectionItems');
    }
    set fileSelectionItemsChildren(value) {
        this.setChildren('fileSelectionItems', value);
    }
    get itemsChildren() {
        return this._getOption('items');
    }
    set itemsChildren(value) {
        this.setChildren('items', value);
    }
    ngOnDestroy() {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    }
};
DxoToolbarComponent.ɵfac = function DxoToolbarComponent_Factory(t) { return new (t || DxoToolbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoToolbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoToolbarComponent, selectors: [["dxo-toolbar"]], contentQueries: function DxoToolbarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiFileSelectionItemComponent, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiItemComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileSelectionItemsChildren = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);
    } }, inputs: { commands: "commands", visible: "visible", fileSelectionItems: "fileSelectionItems", items: "items", container: "container" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoToolbarComponent_Template(rf, ctx) { }, styles: [""] });
DxoToolbarComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
tslib_1.__decorate([
    ContentChildren(forwardRef(() => DxiFileSelectionItemComponent)),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxoToolbarComponent.prototype, "fileSelectionItemsChildren", null);
tslib_1.__decorate([
    ContentChildren(forwardRef(() => DxiItemComponent)),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxoToolbarComponent.prototype, "itemsChildren", null);
DxoToolbarComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxoToolbarComponent);
export { DxoToolbarComponent };
let DxoToolbarModule = class DxoToolbarModule {
};
DxoToolbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoToolbarModule });
DxoToolbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoToolbarModule_Factory(t) { return new (t || DxoToolbarModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-toolbar',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'commands',
                    'visible',
                    'fileSelectionItems',
                    'items',
                    'container'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { fileSelectionItemsChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiFileSelectionItemComponent)]
        }], itemsChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiItemComponent)]
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoToolbarModule, { declarations: [DxoToolbarComponent], exports: [DxoToolbarComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoToolbarModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoToolbarComponent
                ],
                exports: [
                    DxoToolbarComponent
                ]
            }]
    }], null, null); })();
export { DxoToolbarModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtMjAxNS91aS9uZXN0ZWQvdG9vbGJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dWQXdCRTs7Ozs7Ozs7Ozs7Ozs7OzBDQWV3QyxBQWN2Qzs7Ozs7Ozs7O0VBT0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBVW1CIiwiZmlsZSI6InRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgTmdNb2R1bGUsIEhvc3QsIFNraXBTZWxmLCBDb250ZW50Q2hpbGRyZW4sIGZvcndhcmRSZWYsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZXN0ZWRPcHRpb25Ib3N0LCB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhvRmlsZU1hbmFnZXJUb29sYmFyIH0gZnJvbSAnLi9iYXNlL2ZpbGUtbWFuYWdlci10b29sYmFyJztcclxuaW1wb3J0IHsgRHhpRmlsZVNlbGVjdGlvbkl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2ZpbGUtc2VsZWN0aW9uLWl0ZW0tZHhpJztcclxuaW1wb3J0IHsgRHhpSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vaXRlbS1keGknO1xyXG5sZXQgRHhvVG9vbGJhckNvbXBvbmVudCA9IGNsYXNzIER4b1Rvb2xiYXJDb21wb25lbnQgZXh0ZW5kcyBEeG9GaWxlTWFuYWdlclRvb2xiYXIge1xyXG4gICAgY29uc3RydWN0b3IocGFyZW50T3B0aW9uSG9zdCwgb3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAndG9vbGJhcic7XHJcbiAgICB9XHJcbiAgICBnZXQgZmlsZVNlbGVjdGlvbkl0ZW1zQ2hpbGRyZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignZmlsZVNlbGVjdGlvbkl0ZW1zJyk7XHJcbiAgICB9XHJcbiAgICBzZXQgZmlsZVNlbGVjdGlvbkl0ZW1zQ2hpbGRyZW4odmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNldENoaWxkcmVuKCdmaWxlU2VsZWN0aW9uSXRlbXMnLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgaXRlbXNDaGlsZHJlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdpdGVtcycpO1xyXG4gICAgfVxyXG4gICAgc2V0IGl0ZW1zQ2hpbGRyZW4odmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNldENoaWxkcmVuKCdpdGVtcycsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2FkZFJlbW92ZWRPcHRpb24odGhpcy5fZnVsbE9wdGlvblBhdGgoKS5zbGljZSgwLCAtMSkpO1xyXG4gICAgfVxyXG59O1xyXG5EeG9Ub29sYmFyQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xyXG4gICAgeyB0eXBlOiBOZXN0ZWRPcHRpb25Ib3N0LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBTa2lwU2VsZiB9LCB7IHR5cGU6IEhvc3QgfV0gfSxcclxuICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCwgZGVjb3JhdG9yczogW3sgdHlwZTogSG9zdCB9XSB9XHJcbl07XHJcbnRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICBDb250ZW50Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBEeGlGaWxlU2VsZWN0aW9uSXRlbUNvbXBvbmVudCkpLFxyXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgUXVlcnlMaXN0KSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtPYmplY3RdKVxyXG5dLCBEeG9Ub29sYmFyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJmaWxlU2VsZWN0aW9uSXRlbXNDaGlsZHJlblwiLCBudWxsKTtcclxudHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IER4aUl0ZW1Db21wb25lbnQpKSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFF1ZXJ5TGlzdCksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuXSwgRHhvVG9vbGJhckNvbXBvbmVudC5wcm90b3R5cGUsIFwiaXRlbXNDaGlsZHJlblwiLCBudWxsKTtcclxuRHhvVG9vbGJhckNvbXBvbmVudCA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICBDb21wb25lbnQoe1xyXG4gICAgICAgIHNlbGVjdG9yOiAnZHhvLXRvb2xiYXInLFxyXG4gICAgICAgIHRlbXBsYXRlOiAnJyxcclxuICAgICAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgICAgICBpbnB1dHM6IFtcclxuICAgICAgICAgICAgJ2NvbW1hbmRzJyxcclxuICAgICAgICAgICAgJ3Zpc2libGUnLFxyXG4gICAgICAgICAgICAnZmlsZVNlbGVjdGlvbkl0ZW1zJyxcclxuICAgICAgICAgICAgJ2l0ZW1zJyxcclxuICAgICAgICAgICAgJ2NvbnRhaW5lcidcclxuICAgICAgICBdLFxyXG4gICAgICAgIHN0eWxlczogWycnXVxyXG4gICAgfSksXHJcbiAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgdHNsaWJfMS5fX3BhcmFtKDEsIEhvc3QoKSksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuXSwgRHhvVG9vbGJhckNvbXBvbmVudCk7XHJcbmV4cG9ydCB7IER4b1Rvb2xiYXJDb21wb25lbnQgfTtcclxubGV0IER4b1Rvb2xiYXJNb2R1bGUgPSBjbGFzcyBEeG9Ub29sYmFyTW9kdWxlIHtcclxufTtcclxuRHhvVG9vbGJhck1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgICAgIER4b1Rvb2xiYXJDb21wb25lbnRcclxuICAgICAgICBdLFxyXG4gICAgICAgIGV4cG9ydHM6IFtcclxuICAgICAgICAgICAgRHhvVG9vbGJhckNvbXBvbmVudFxyXG4gICAgICAgIF0sXHJcbiAgICB9KVxyXG5dLCBEeG9Ub29sYmFyTW9kdWxlKTtcclxuZXhwb3J0IHsgRHhvVG9vbGJhck1vZHVsZSB9O1xyIl19