/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiChartSeries } from './base/chart-series-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxiSeriesComponent = class DxiSeriesComponent extends DxiChartSeries {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'series';
    }
};
DxiSeriesComponent.ɵfac = function DxiSeriesComponent_Factory(t) { return new (t || DxiSeriesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiSeriesComponent, selectors: [["dxi-series"]], inputs: { aggregation: "aggregation", argumentField: "argumentField", axis: "axis", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", name: "name", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", stack: "stack", tag: "tag", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiSeriesComponent_Template(rf, ctx) { }, styles: [""] });
DxiSeriesComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxiSeriesComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxiSeriesComponent);
export { DxiSeriesComponent };
let DxiSeriesModule = class DxiSeriesModule {
};
DxiSeriesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiSeriesModule });
DxiSeriesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiSeriesModule_Factory(t) { return new (t || DxiSeriesModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiSeriesComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-series',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'aggregation',
                    'argumentField',
                    'axis',
                    'barOverlapGroup',
                    'barPadding',
                    'barWidth',
                    'border',
                    'closeValueField',
                    'color',
                    'cornerRadius',
                    'dashStyle',
                    'highValueField',
                    'hoverMode',
                    'hoverStyle',
                    'ignoreEmptyPoints',
                    'innerColor',
                    'label',
                    'lowValueField',
                    'maxLabelCount',
                    'minBarSize',
                    'name',
                    'opacity',
                    'openValueField',
                    'pane',
                    'point',
                    'rangeValue1Field',
                    'rangeValue2Field',
                    'reduction',
                    'selectionMode',
                    'selectionStyle',
                    'showInLegend',
                    'sizeField',
                    'stack',
                    'tag',
                    'tagField',
                    'type',
                    'valueErrorBar',
                    'valueField',
                    'visible',
                    'width',
                    'argumentType',
                    'minSegmentSize',
                    'smallValuesGrouping',
                    'closed'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiSeriesModule, { declarations: [DxiSeriesComponent], exports: [DxiSeriesComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiSeriesModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiSeriesComponent
                ],
                exports: [
                    DxiSeriesComponent
                ]
            }]
    }], null, null); })();
export { DxiSeriesModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtMjAxNS91aS9uZXN0ZWQvc2VyaWVzLWR4aS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7Ozs7OzA2Q0FTRTs7Ozs7eUNBS3VDLEFBcUR0Qzs7Ozs7Ozs7O0VBT0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBVWtCIiwiZmlsZSI6InNlcmllcy1keGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgTmdNb2R1bGUsIEhvc3QsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5lc3RlZE9wdGlvbkhvc3QsIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeGlDaGFydFNlcmllcyB9IGZyb20gJy4vYmFzZS9jaGFydC1zZXJpZXMtZHhpJztcclxubGV0IER4aVNlcmllc0NvbXBvbmVudCA9IGNsYXNzIER4aVNlcmllc0NvbXBvbmVudCBleHRlbmRzIER4aUNoYXJ0U2VyaWVzIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudE9wdGlvbkhvc3QsIG9wdGlvbkhvc3QpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHBhcmVudE9wdGlvbkhvc3Quc2V0TmVzdGVkT3B0aW9uKHRoaXMpO1xyXG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIGdldCBfb3B0aW9uUGF0aCgpIHtcclxuICAgICAgICByZXR1cm4gJ3Nlcmllcyc7XHJcbiAgICB9XHJcbn07XHJcbkR4aVNlcmllc0NvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcclxuICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCwgZGVjb3JhdG9yczogW3sgdHlwZTogU2tpcFNlbGYgfSwgeyB0eXBlOiBIb3N0IH1dIH0sXHJcbiAgICB7IHR5cGU6IE5lc3RlZE9wdGlvbkhvc3QsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEhvc3QgfV0gfVxyXG5dO1xyXG5EeGlTZXJpZXNDb21wb25lbnQgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgQ29tcG9uZW50KHtcclxuICAgICAgICBzZWxlY3RvcjogJ2R4aS1zZXJpZXMnLFxyXG4gICAgICAgIHRlbXBsYXRlOiAnJyxcclxuICAgICAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgICAgICBpbnB1dHM6IFtcclxuICAgICAgICAgICAgJ2FnZ3JlZ2F0aW9uJyxcclxuICAgICAgICAgICAgJ2FyZ3VtZW50RmllbGQnLFxyXG4gICAgICAgICAgICAnYXhpcycsXHJcbiAgICAgICAgICAgICdiYXJPdmVybGFwR3JvdXAnLFxyXG4gICAgICAgICAgICAnYmFyUGFkZGluZycsXHJcbiAgICAgICAgICAgICdiYXJXaWR0aCcsXHJcbiAgICAgICAgICAgICdib3JkZXInLFxyXG4gICAgICAgICAgICAnY2xvc2VWYWx1ZUZpZWxkJyxcclxuICAgICAgICAgICAgJ2NvbG9yJyxcclxuICAgICAgICAgICAgJ2Nvcm5lclJhZGl1cycsXHJcbiAgICAgICAgICAgICdkYXNoU3R5bGUnLFxyXG4gICAgICAgICAgICAnaGlnaFZhbHVlRmllbGQnLFxyXG4gICAgICAgICAgICAnaG92ZXJNb2RlJyxcclxuICAgICAgICAgICAgJ2hvdmVyU3R5bGUnLFxyXG4gICAgICAgICAgICAnaWdub3JlRW1wdHlQb2ludHMnLFxyXG4gICAgICAgICAgICAnaW5uZXJDb2xvcicsXHJcbiAgICAgICAgICAgICdsYWJlbCcsXHJcbiAgICAgICAgICAgICdsb3dWYWx1ZUZpZWxkJyxcclxuICAgICAgICAgICAgJ21heExhYmVsQ291bnQnLFxyXG4gICAgICAgICAgICAnbWluQmFyU2l6ZScsXHJcbiAgICAgICAgICAgICduYW1lJyxcclxuICAgICAgICAgICAgJ29wYWNpdHknLFxyXG4gICAgICAgICAgICAnb3BlblZhbHVlRmllbGQnLFxyXG4gICAgICAgICAgICAncGFuZScsXHJcbiAgICAgICAgICAgICdwb2ludCcsXHJcbiAgICAgICAgICAgICdyYW5nZVZhbHVlMUZpZWxkJyxcclxuICAgICAgICAgICAgJ3JhbmdlVmFsdWUyRmllbGQnLFxyXG4gICAgICAgICAgICAncmVkdWN0aW9uJyxcclxuICAgICAgICAgICAgJ3NlbGVjdGlvbk1vZGUnLFxyXG4gICAgICAgICAgICAnc2VsZWN0aW9uU3R5bGUnLFxyXG4gICAgICAgICAgICAnc2hvd0luTGVnZW5kJyxcclxuICAgICAgICAgICAgJ3NpemVGaWVsZCcsXHJcbiAgICAgICAgICAgICdzdGFjaycsXHJcbiAgICAgICAgICAgICd0YWcnLFxyXG4gICAgICAgICAgICAndGFnRmllbGQnLFxyXG4gICAgICAgICAgICAndHlwZScsXHJcbiAgICAgICAgICAgICd2YWx1ZUVycm9yQmFyJyxcclxuICAgICAgICAgICAgJ3ZhbHVlRmllbGQnLFxyXG4gICAgICAgICAgICAndmlzaWJsZScsXHJcbiAgICAgICAgICAgICd3aWR0aCcsXHJcbiAgICAgICAgICAgICdhcmd1bWVudFR5cGUnLFxyXG4gICAgICAgICAgICAnbWluU2VnbWVudFNpemUnLFxyXG4gICAgICAgICAgICAnc21hbGxWYWx1ZXNHcm91cGluZycsXHJcbiAgICAgICAgICAgICdjbG9zZWQnXHJcbiAgICAgICAgXSxcclxuICAgICAgICBzdHlsZXM6IFsnJ11cclxuICAgIH0pLFxyXG4gICAgdHNsaWJfMS5fX3BhcmFtKDAsIFNraXBTZWxmKCkpLCB0c2xpYl8xLl9fcGFyYW0oMCwgSG9zdCgpKSxcclxuICAgIHRzbGliXzEuX19wYXJhbSgxLCBIb3N0KCkpLFxyXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW05lc3RlZE9wdGlvbkhvc3QsXHJcbiAgICAgICAgTmVzdGVkT3B0aW9uSG9zdF0pXHJcbl0sIER4aVNlcmllc0NvbXBvbmVudCk7XHJcbmV4cG9ydCB7IER4aVNlcmllc0NvbXBvbmVudCB9O1xyXG5sZXQgRHhpU2VyaWVzTW9kdWxlID0gY2xhc3MgRHhpU2VyaWVzTW9kdWxlIHtcclxufTtcclxuRHhpU2VyaWVzTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIE5nTW9kdWxlKHtcclxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICAgICAgRHhpU2VyaWVzQ29tcG9uZW50XHJcbiAgICAgICAgXSxcclxuICAgICAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgICAgIER4aVNlcmllc0NvbXBvbmVudFxyXG4gICAgICAgIF0sXHJcbiAgICB9KVxyXG5dLCBEeGlTZXJpZXNNb2R1bGUpO1xyXG5leHBvcnQgeyBEeGlTZXJpZXNNb2R1bGUgfTtcciJdfQ==