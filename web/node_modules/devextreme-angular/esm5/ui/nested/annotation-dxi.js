/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiChartAnnotationConfig } from './base/chart-annotation-config-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxiAnnotationComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxiAnnotationComponent, _super);
    function DxiAnnotationComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxiAnnotationComponent.prototype, "_optionPath", {
        get: function () {
            return 'annotations';
        },
        enumerable: true,
        configurable: true
    });
    DxiAnnotationComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxiAnnotationComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxiAnnotationComponent);
DxiAnnotationComponent.ɵfac = function DxiAnnotationComponent_Factory(t) { return new (t || DxiAnnotationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiAnnotationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiAnnotationComponent, selectors: [["dxi-annotation"]], inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", name: "name", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiAnnotationComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiAnnotationComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-annotation',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'allowDragging',
                    'argument',
                    'arrowLength',
                    'arrowWidth',
                    'axis',
                    'border',
                    'color',
                    'customizeTooltip',
                    'data',
                    'description',
                    'font',
                    'height',
                    'image',
                    'name',
                    'offsetX',
                    'offsetY',
                    'opacity',
                    'paddingLeftRight',
                    'paddingTopBottom',
                    'series',
                    'shadow',
                    'template',
                    'text',
                    'textOverflow',
                    'tooltipEnabled',
                    'tooltipTemplate',
                    'type',
                    'value',
                    'width',
                    'wordWrap',
                    'x',
                    'y'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxiAnnotationComponent;
}(DxiChartAnnotationConfig));
export { DxiAnnotationComponent };
var DxiAnnotationModule = /** @class */ (function () {
    function DxiAnnotationModule() {
    }
DxiAnnotationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiAnnotationModule });
DxiAnnotationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiAnnotationModule_Factory(t) { return new (t || DxiAnnotationModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiAnnotationModule, { declarations: [DxiAnnotationComponent], exports: [DxiAnnotationComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiAnnotationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiAnnotationComponent
                ],
                exports: [
                    DxiAnnotationComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxiAnnotationModule;
}());
export { DxiAnnotationModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS91aS9uZXN0ZWQvYW5ub3RhdGlvbi1keGkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lEQW1CaUQsQUF5QzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUl3Qjs7Ozs7O0tBTTFCOzs7Ozs7Ozs7Ozs7OztnREFVdUIiLCJmaWxlIjoiYW5ub3RhdGlvbi1keGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgTmdNb2R1bGUsIEhvc3QsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5lc3RlZE9wdGlvbkhvc3QsIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeGlDaGFydEFubm90YXRpb25Db25maWcgfSBmcm9tICcuL2Jhc2UvY2hhcnQtYW5ub3RhdGlvbi1jb25maWctZHhpJztcclxudmFyIER4aUFubm90YXRpb25Db21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEeGlBbm5vdGF0aW9uQ29tcG9uZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRHhpQW5ub3RhdGlvbkNvbXBvbmVudChwYXJlbnRPcHRpb25Ib3N0LCBvcHRpb25Ib3N0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBwYXJlbnRPcHRpb25Ib3N0LnNldE5lc3RlZE9wdGlvbihfdGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KF90aGlzLCBfdGhpcy5fZnVsbE9wdGlvblBhdGguYmluZChfdGhpcykpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeGlBbm5vdGF0aW9uQ29tcG9uZW50LnByb3RvdHlwZSwgXCJfb3B0aW9uUGF0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnYW5ub3RhdGlvbnMnO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRHhpQW5ub3RhdGlvbkNvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcclxuICAgICAgICB7IHR5cGU6IE5lc3RlZE9wdGlvbkhvc3QsIGRlY29yYXRvcnM6IFt7IHR5cGU6IFNraXBTZWxmIH0sIHsgdHlwZTogSG9zdCB9XSB9LFxyXG4gICAgICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCwgZGVjb3JhdG9yczogW3sgdHlwZTogSG9zdCB9XSB9XHJcbiAgICBdOyB9O1xyXG4gICAgRHhpQW5ub3RhdGlvbkNvbXBvbmVudCA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgQ29tcG9uZW50KHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdkeGktYW5ub3RhdGlvbicsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnJyxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICAgICAgICAgIGlucHV0czogW1xyXG4gICAgICAgICAgICAgICAgJ2FsbG93RHJhZ2dpbmcnLFxyXG4gICAgICAgICAgICAgICAgJ2FyZ3VtZW50JyxcclxuICAgICAgICAgICAgICAgICdhcnJvd0xlbmd0aCcsXHJcbiAgICAgICAgICAgICAgICAnYXJyb3dXaWR0aCcsXHJcbiAgICAgICAgICAgICAgICAnYXhpcycsXHJcbiAgICAgICAgICAgICAgICAnYm9yZGVyJyxcclxuICAgICAgICAgICAgICAgICdjb2xvcicsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9taXplVG9vbHRpcCcsXHJcbiAgICAgICAgICAgICAgICAnZGF0YScsXHJcbiAgICAgICAgICAgICAgICAnZGVzY3JpcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgJ2ZvbnQnLFxyXG4gICAgICAgICAgICAgICAgJ2hlaWdodCcsXHJcbiAgICAgICAgICAgICAgICAnaW1hZ2UnLFxyXG4gICAgICAgICAgICAgICAgJ25hbWUnLFxyXG4gICAgICAgICAgICAgICAgJ29mZnNldFgnLFxyXG4gICAgICAgICAgICAgICAgJ29mZnNldFknLFxyXG4gICAgICAgICAgICAgICAgJ29wYWNpdHknLFxyXG4gICAgICAgICAgICAgICAgJ3BhZGRpbmdMZWZ0UmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgJ3BhZGRpbmdUb3BCb3R0b20nLFxyXG4gICAgICAgICAgICAgICAgJ3NlcmllcycsXHJcbiAgICAgICAgICAgICAgICAnc2hhZG93JyxcclxuICAgICAgICAgICAgICAgICd0ZW1wbGF0ZScsXHJcbiAgICAgICAgICAgICAgICAndGV4dCcsXHJcbiAgICAgICAgICAgICAgICAndGV4dE92ZXJmbG93JyxcclxuICAgICAgICAgICAgICAgICd0b29sdGlwRW5hYmxlZCcsXHJcbiAgICAgICAgICAgICAgICAndG9vbHRpcFRlbXBsYXRlJyxcclxuICAgICAgICAgICAgICAgICd0eXBlJyxcclxuICAgICAgICAgICAgICAgICd2YWx1ZScsXHJcbiAgICAgICAgICAgICAgICAnd2lkdGgnLFxyXG4gICAgICAgICAgICAgICAgJ3dvcmRXcmFwJyxcclxuICAgICAgICAgICAgICAgICd4JyxcclxuICAgICAgICAgICAgICAgICd5J1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBzdHlsZXM6IFsnJ11cclxuICAgICAgICB9KSxcclxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuICAgIF0sIER4aUFubm90YXRpb25Db21wb25lbnQpO1xyXG4gICAgcmV0dXJuIER4aUFubm90YXRpb25Db21wb25lbnQ7XHJcbn0oRHhpQ2hhcnRBbm5vdGF0aW9uQ29uZmlnKSk7XHJcbmV4cG9ydCB7IER4aUFubm90YXRpb25Db21wb25lbnQgfTtcclxudmFyIER4aUFubm90YXRpb25Nb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEeGlBbm5vdGF0aW9uTW9kdWxlKCkge1xyXG4gICAgfVxyXG4gICAgRHhpQW5ub3RhdGlvbk1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgTmdNb2R1bGUoe1xyXG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgIER4aUFubm90YXRpb25Db21wb25lbnRcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZXhwb3J0czogW1xyXG4gICAgICAgICAgICAgICAgRHhpQW5ub3RhdGlvbkNvbXBvbmVudFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0pXHJcbiAgICBdLCBEeGlBbm5vdGF0aW9uTW9kdWxlKTtcclxuICAgIHJldHVybiBEeGlBbm5vdGF0aW9uTW9kdWxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEeGlBbm5vdGF0aW9uTW9kdWxlIH07XHIiXX0=