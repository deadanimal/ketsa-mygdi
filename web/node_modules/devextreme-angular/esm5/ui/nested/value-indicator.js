/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoGaugeIndicator } from './base/gauge-indicator';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxoValueIndicatorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoValueIndicatorComponent, _super);
    function DxoValueIndicatorComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoValueIndicatorComponent.prototype, "_optionPath", {
        get: function () {
            return 'valueIndicator';
        },
        enumerable: true,
        configurable: true
    });
    DxoValueIndicatorComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    };
    DxoValueIndicatorComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxoValueIndicatorComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoValueIndicatorComponent);
DxoValueIndicatorComponent.ɵfac = function DxoValueIndicatorComponent_Factory(t) { return new (t || DxoValueIndicatorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoValueIndicatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoValueIndicatorComponent, selectors: [["dxo-value-indicator"]], inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValueIndicatorComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoValueIndicatorComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-value-indicator',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'arrowLength',
                    'backgroundColor',
                    'baseValue',
                    'beginAdaptingAtRadius',
                    'color',
                    'horizontalOrientation',
                    'indentFromCenter',
                    'length',
                    'offset',
                    'palette',
                    'secondColor',
                    'secondFraction',
                    'size',
                    'spindleGapSize',
                    'spindleSize',
                    'text',
                    'type',
                    'verticalOrientation',
                    'width'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxoValueIndicatorComponent;
}(DxoGaugeIndicator));
export { DxoValueIndicatorComponent };
var DxoValueIndicatorModule = /** @class */ (function () {
    function DxoValueIndicatorModule() {
    }
DxoValueIndicatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoValueIndicatorModule });
DxoValueIndicatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoValueIndicatorModule_Factory(t) { return new (t || DxoValueIndicatorModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoValueIndicatorModule, { declarations: [DxoValueIndicatorComponent], exports: [DxoValueIndicatorComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoValueIndicatorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoValueIndicatorComponent
                ],
                exports: [
                    DxoValueIndicatorComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoValueIndicatorModule;
}());
export { DxoValueIndicatorModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS91aS9uZXN0ZWQvdmFsdWUtaW5kaWNhdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxREFzQnFELEFBNEI5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUk0Qjs7Ozs7O0tBTTlCOzs7Ozs7Ozs7Ozs7OztnREFVMkIiLCJmaWxlIjoidmFsdWUtaW5kaWNhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAxOS4yLjZcclxuICogQnVpbGQgZGF0ZTogVGh1IEphbiAzMCAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cclxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE5nTW9kdWxlLCBIb3N0LCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZXN0ZWRPcHRpb25Ib3N0LCB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhvR2F1Z2VJbmRpY2F0b3IgfSBmcm9tICcuL2Jhc2UvZ2F1Z2UtaW5kaWNhdG9yJztcclxudmFyIER4b1ZhbHVlSW5kaWNhdG9yQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRHhvVmFsdWVJbmRpY2F0b3JDb21wb25lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEeG9WYWx1ZUluZGljYXRvckNvbXBvbmVudChwYXJlbnRPcHRpb25Ib3N0LCBvcHRpb25Ib3N0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBwYXJlbnRPcHRpb25Ib3N0LnNldE5lc3RlZE9wdGlvbihfdGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KF90aGlzLCBfdGhpcy5fZnVsbE9wdGlvblBhdGguYmluZChfdGhpcykpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeG9WYWx1ZUluZGljYXRvckNvbXBvbmVudC5wcm90b3R5cGUsIFwiX29wdGlvblBhdGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ3ZhbHVlSW5kaWNhdG9yJztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIER4b1ZhbHVlSW5kaWNhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9hZGRSZW1vdmVkT3B0aW9uKHRoaXMuX2Z1bGxPcHRpb25QYXRoKCkuc2xpY2UoMCwgLTEpKTtcclxuICAgIH07XHJcbiAgICBEeG9WYWx1ZUluZGljYXRvckNvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcclxuICAgICAgICB7IHR5cGU6IE5lc3RlZE9wdGlvbkhvc3QsIGRlY29yYXRvcnM6IFt7IHR5cGU6IFNraXBTZWxmIH0sIHsgdHlwZTogSG9zdCB9XSB9LFxyXG4gICAgICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCwgZGVjb3JhdG9yczogW3sgdHlwZTogSG9zdCB9XSB9XHJcbiAgICBdOyB9O1xyXG4gICAgRHhvVmFsdWVJbmRpY2F0b3JDb21wb25lbnQgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIENvbXBvbmVudCh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZHhvLXZhbHVlLWluZGljYXRvcicsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnJyxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICAgICAgICAgIGlucHV0czogW1xyXG4gICAgICAgICAgICAgICAgJ2Fycm93TGVuZ3RoJyxcclxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kQ29sb3InLFxyXG4gICAgICAgICAgICAgICAgJ2Jhc2VWYWx1ZScsXHJcbiAgICAgICAgICAgICAgICAnYmVnaW5BZGFwdGluZ0F0UmFkaXVzJyxcclxuICAgICAgICAgICAgICAgICdjb2xvcicsXHJcbiAgICAgICAgICAgICAgICAnaG9yaXpvbnRhbE9yaWVudGF0aW9uJyxcclxuICAgICAgICAgICAgICAgICdpbmRlbnRGcm9tQ2VudGVyJyxcclxuICAgICAgICAgICAgICAgICdsZW5ndGgnLFxyXG4gICAgICAgICAgICAgICAgJ29mZnNldCcsXHJcbiAgICAgICAgICAgICAgICAncGFsZXR0ZScsXHJcbiAgICAgICAgICAgICAgICAnc2Vjb25kQ29sb3InLFxyXG4gICAgICAgICAgICAgICAgJ3NlY29uZEZyYWN0aW9uJyxcclxuICAgICAgICAgICAgICAgICdzaXplJyxcclxuICAgICAgICAgICAgICAgICdzcGluZGxlR2FwU2l6ZScsXHJcbiAgICAgICAgICAgICAgICAnc3BpbmRsZVNpemUnLFxyXG4gICAgICAgICAgICAgICAgJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgJ3R5cGUnLFxyXG4gICAgICAgICAgICAgICAgJ3ZlcnRpY2FsT3JpZW50YXRpb24nLFxyXG4gICAgICAgICAgICAgICAgJ3dpZHRoJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBzdHlsZXM6IFsnJ11cclxuICAgICAgICB9KSxcclxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuICAgIF0sIER4b1ZhbHVlSW5kaWNhdG9yQ29tcG9uZW50KTtcclxuICAgIHJldHVybiBEeG9WYWx1ZUluZGljYXRvckNvbXBvbmVudDtcclxufShEeG9HYXVnZUluZGljYXRvcikpO1xyXG5leHBvcnQgeyBEeG9WYWx1ZUluZGljYXRvckNvbXBvbmVudCB9O1xyXG52YXIgRHhvVmFsdWVJbmRpY2F0b3JNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEeG9WYWx1ZUluZGljYXRvck1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIER4b1ZhbHVlSW5kaWNhdG9yTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgRHhvVmFsdWVJbmRpY2F0b3JDb21wb25lbnRcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZXhwb3J0czogW1xyXG4gICAgICAgICAgICAgICAgRHhvVmFsdWVJbmRpY2F0b3JDb21wb25lbnRcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KVxyXG4gICAgXSwgRHhvVmFsdWVJbmRpY2F0b3JNb2R1bGUpO1xyXG4gICAgcmV0dXJuIER4b1ZhbHVlSW5kaWNhdG9yTW9kdWxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEeG9WYWx1ZUluZGljYXRvck1vZHVsZSB9O1xyIl19