/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoButtonOptions } from './base/button-options';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxoOptionsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoOptionsComponent, _super);
    function DxoOptionsComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoOptionsComponent.prototype, "_optionPath", {
        get: function () {
            return 'options';
        },
        enumerable: true,
        configurable: true
    });
    DxoOptionsComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    };
    DxoOptionsComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxoOptionsComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoOptionsComponent);
DxoOptionsComponent.ɵfac = function DxoOptionsComponent_Factory(t) { return new (t || DxoOptionsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoOptionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoOptionsComponent, selectors: [["dxo-options"]], inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoOptionsComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoOptionsComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-options',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'accessKey',
                    'activeStateEnabled',
                    'disabled',
                    'elementAttr',
                    'focusStateEnabled',
                    'height',
                    'hint',
                    'hoverStateEnabled',
                    'icon',
                    'onClick',
                    'onContentReady',
                    'onDisposing',
                    'onInitialized',
                    'onOptionChanged',
                    'rtlEnabled',
                    'stylingMode',
                    'tabIndex',
                    'template',
                    'text',
                    'type',
                    'useSubmitBehavior',
                    'validationGroup',
                    'visible',
                    'width'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxoOptionsComponent;
}(DxoButtonOptions));
export { DxoOptionsComponent };
var DxoOptionsModule = /** @class */ (function () {
    function DxoOptionsModule() {
    }
DxoOptionsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoOptionsModule });
DxoOptionsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoOptionsModule_Factory(t) { return new (t || DxoOptionsModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoOptionsModule, { declarations: [DxoOptionsComponent], exports: [DxoOptionsComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoOptionsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoOptionsComponent
                ],
                exports: [
                    DxoOptionsComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoOptionsModule;
}());
export { DxoOptionsModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS91aS9uZXN0ZWQvb3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OENBc0I4QyxBQWlDdkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUlxQjs7Ozs7O0tBTXZCOzs7Ozs7Ozs7Ozs7OztnREFVb0IiLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcclxuICogVmVyc2lvbjogMTkuMi42XHJcbiAqIEJ1aWxkIGRhdGU6IFRodSBKYW4gMzAgMjAyMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXHJcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBOZ01vZHVsZSwgSG9zdCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmVzdGVkT3B0aW9uSG9zdCwgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4b0J1dHRvbk9wdGlvbnMgfSBmcm9tICcuL2Jhc2UvYnV0dG9uLW9wdGlvbnMnO1xyXG52YXIgRHhvT3B0aW9uc0NvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKER4b09wdGlvbnNDb21wb25lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEeG9PcHRpb25zQ29tcG9uZW50KHBhcmVudE9wdGlvbkhvc3QsIG9wdGlvbkhvc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIHBhcmVudE9wdGlvbkhvc3Quc2V0TmVzdGVkT3B0aW9uKF90aGlzKTtcclxuICAgICAgICBvcHRpb25Ib3N0LnNldEhvc3QoX3RoaXMsIF90aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKF90aGlzKSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4b09wdGlvbnNDb21wb25lbnQucHJvdG90eXBlLCBcIl9vcHRpb25QYXRoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdvcHRpb25zJztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIER4b09wdGlvbnNDb21wb25lbnQucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2FkZFJlbW92ZWRPcHRpb24odGhpcy5fZnVsbE9wdGlvblBhdGgoKS5zbGljZSgwLCAtMSkpO1xyXG4gICAgfTtcclxuICAgIER4b09wdGlvbnNDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiBOZXN0ZWRPcHRpb25Ib3N0LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBTa2lwU2VsZiB9LCB7IHR5cGU6IEhvc3QgfV0gfSxcclxuICAgICAgICB7IHR5cGU6IE5lc3RlZE9wdGlvbkhvc3QsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEhvc3QgfV0gfVxyXG4gICAgXTsgfTtcclxuICAgIER4b09wdGlvbnNDb21wb25lbnQgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIENvbXBvbmVudCh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZHhvLW9wdGlvbnMnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW05lc3RlZE9wdGlvbkhvc3RdLFxyXG4gICAgICAgICAgICBpbnB1dHM6IFtcclxuICAgICAgICAgICAgICAgICdhY2Nlc3NLZXknLFxyXG4gICAgICAgICAgICAgICAgJ2FjdGl2ZVN0YXRlRW5hYmxlZCcsXHJcbiAgICAgICAgICAgICAgICAnZGlzYWJsZWQnLFxyXG4gICAgICAgICAgICAgICAgJ2VsZW1lbnRBdHRyJyxcclxuICAgICAgICAgICAgICAgICdmb2N1c1N0YXRlRW5hYmxlZCcsXHJcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JyxcclxuICAgICAgICAgICAgICAgICdoaW50JyxcclxuICAgICAgICAgICAgICAgICdob3ZlclN0YXRlRW5hYmxlZCcsXHJcbiAgICAgICAgICAgICAgICAnaWNvbicsXHJcbiAgICAgICAgICAgICAgICAnb25DbGljaycsXHJcbiAgICAgICAgICAgICAgICAnb25Db250ZW50UmVhZHknLFxyXG4gICAgICAgICAgICAgICAgJ29uRGlzcG9zaW5nJyxcclxuICAgICAgICAgICAgICAgICdvbkluaXRpYWxpemVkJyxcclxuICAgICAgICAgICAgICAgICdvbk9wdGlvbkNoYW5nZWQnLFxyXG4gICAgICAgICAgICAgICAgJ3J0bEVuYWJsZWQnLFxyXG4gICAgICAgICAgICAgICAgJ3N0eWxpbmdNb2RlJyxcclxuICAgICAgICAgICAgICAgICd0YWJJbmRleCcsXHJcbiAgICAgICAgICAgICAgICAndGVtcGxhdGUnLFxyXG4gICAgICAgICAgICAgICAgJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgJ3R5cGUnLFxyXG4gICAgICAgICAgICAgICAgJ3VzZVN1Ym1pdEJlaGF2aW9yJyxcclxuICAgICAgICAgICAgICAgICd2YWxpZGF0aW9uR3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgJ3Zpc2libGUnLFxyXG4gICAgICAgICAgICAgICAgJ3dpZHRoJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBzdHlsZXM6IFsnJ11cclxuICAgICAgICB9KSxcclxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuICAgIF0sIER4b09wdGlvbnNDb21wb25lbnQpO1xyXG4gICAgcmV0dXJuIER4b09wdGlvbnNDb21wb25lbnQ7XHJcbn0oRHhvQnV0dG9uT3B0aW9ucykpO1xyXG5leHBvcnQgeyBEeG9PcHRpb25zQ29tcG9uZW50IH07XHJcbnZhciBEeG9PcHRpb25zTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHhvT3B0aW9uc01vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIER4b09wdGlvbnNNb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE5nTW9kdWxlKHtcclxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICBEeG9PcHRpb25zQ29tcG9uZW50XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGV4cG9ydHM6IFtcclxuICAgICAgICAgICAgICAgIER4b09wdGlvbnNDb21wb25lbnRcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KVxyXG4gICAgXSwgRHhvT3B0aW9uc01vZHVsZSk7XHJcbiAgICByZXR1cm4gRHhvT3B0aW9uc01vZHVsZTtcclxufSgpKTtcclxuZXhwb3J0IHsgRHhvT3B0aW9uc01vZHVsZSB9O1xyIl19