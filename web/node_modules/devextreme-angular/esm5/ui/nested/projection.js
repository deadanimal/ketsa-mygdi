/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoVectorMapProjectionConfig } from './base/vector-map-projection-config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxoProjectionComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoProjectionComponent, _super);
    function DxoProjectionComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoProjectionComponent.prototype, "_optionPath", {
        get: function () {
            return 'projection';
        },
        enumerable: true,
        configurable: true
    });
    DxoProjectionComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    };
    DxoProjectionComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxoProjectionComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoProjectionComponent);
DxoProjectionComponent.ɵfac = function DxoProjectionComponent_Factory(t) { return new (t || DxoProjectionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoProjectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoProjectionComponent, selectors: [["dxo-projection"]], inputs: { aspectRatio: "aspectRatio", from: "from", to: "to" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoProjectionComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoProjectionComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-projection',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'aspectRatio',
                    'from',
                    'to'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxoProjectionComponent;
}(DxoVectorMapProjectionConfig));
export { DxoProjectionComponent };
var DxoProjectionModule = /** @class */ (function () {
    function DxoProjectionModule() {
    }
DxoProjectionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoProjectionModule });
DxoProjectionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoProjectionModule_Factory(t) { return new (t || DxoProjectionModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoProjectionModule, { declarations: [DxoProjectionComponent], exports: [DxoProjectionComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoProjectionModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoProjectionComponent
                ],
                exports: [
                    DxoProjectionComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoProjectionModule;
}());
export { DxoProjectionModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS91aS9uZXN0ZWQvcHJvamVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aURBc0JpRCxBQVkxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBSXdCOzs7Ozs7S0FNMUI7Ozs7Ozs7Ozs7Ozs7O2dEQVV1QiIsImZpbGUiOiJwcm9qZWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAxOS4yLjZcclxuICogQnVpbGQgZGF0ZTogVGh1IEphbiAzMCAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cclxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE5nTW9kdWxlLCBIb3N0LCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZXN0ZWRPcHRpb25Ib3N0LCB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhvVmVjdG9yTWFwUHJvamVjdGlvbkNvbmZpZyB9IGZyb20gJy4vYmFzZS92ZWN0b3ItbWFwLXByb2plY3Rpb24tY29uZmlnJztcclxudmFyIER4b1Byb2plY3Rpb25Db21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEeG9Qcm9qZWN0aW9uQ29tcG9uZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRHhvUHJvamVjdGlvbkNvbXBvbmVudChwYXJlbnRPcHRpb25Ib3N0LCBvcHRpb25Ib3N0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBwYXJlbnRPcHRpb25Ib3N0LnNldE5lc3RlZE9wdGlvbihfdGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KF90aGlzLCBfdGhpcy5fZnVsbE9wdGlvblBhdGguYmluZChfdGhpcykpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeG9Qcm9qZWN0aW9uQ29tcG9uZW50LnByb3RvdHlwZSwgXCJfb3B0aW9uUGF0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAncHJvamVjdGlvbic7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEeG9Qcm9qZWN0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9hZGRSZW1vdmVkT3B0aW9uKHRoaXMuX2Z1bGxPcHRpb25QYXRoKCkuc2xpY2UoMCwgLTEpKTtcclxuICAgIH07XHJcbiAgICBEeG9Qcm9qZWN0aW9uQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xyXG4gICAgICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCwgZGVjb3JhdG9yczogW3sgdHlwZTogU2tpcFNlbGYgfSwgeyB0eXBlOiBIb3N0IH1dIH0sXHJcbiAgICAgICAgeyB0eXBlOiBOZXN0ZWRPcHRpb25Ib3N0LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBIb3N0IH1dIH1cclxuICAgIF07IH07XHJcbiAgICBEeG9Qcm9qZWN0aW9uQ29tcG9uZW50ID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBDb21wb25lbnQoe1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJ2R4by1wcm9qZWN0aW9uJyxcclxuICAgICAgICAgICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgICAgICAgICAgaW5wdXRzOiBbXHJcbiAgICAgICAgICAgICAgICAnYXNwZWN0UmF0aW8nLFxyXG4gICAgICAgICAgICAgICAgJ2Zyb20nLFxyXG4gICAgICAgICAgICAgICAgJ3RvJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBzdHlsZXM6IFsnJ11cclxuICAgICAgICB9KSxcclxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBIb3N0KCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuICAgIF0sIER4b1Byb2plY3Rpb25Db21wb25lbnQpO1xyXG4gICAgcmV0dXJuIER4b1Byb2plY3Rpb25Db21wb25lbnQ7XHJcbn0oRHhvVmVjdG9yTWFwUHJvamVjdGlvbkNvbmZpZykpO1xyXG5leHBvcnQgeyBEeG9Qcm9qZWN0aW9uQ29tcG9uZW50IH07XHJcbnZhciBEeG9Qcm9qZWN0aW9uTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHhvUHJvamVjdGlvbk1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIER4b1Byb2plY3Rpb25Nb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE5nTW9kdWxlKHtcclxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICBEeG9Qcm9qZWN0aW9uQ29tcG9uZW50XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGV4cG9ydHM6IFtcclxuICAgICAgICAgICAgICAgIER4b1Byb2plY3Rpb25Db21wb25lbnRcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KVxyXG4gICAgXSwgRHhvUHJvamVjdGlvbk1vZHVsZSk7XHJcbiAgICByZXR1cm4gRHhvUHJvamVjdGlvbk1vZHVsZTtcclxufSgpKTtcclxuZXhwb3J0IHsgRHhvUHJvamVjdGlvbk1vZHVsZSB9O1xyIl19