/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { BrowserTransferStateModule } from '@angular/platform-browser';
import { TransferState } from '@angular/platform-browser';
import { Component, NgModule, ElementRef, NgZone, PLATFORM_ID, Inject, Input, Output, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxTreeMap from 'devextreme/viz/tree_map';
import { DxComponent, DxTemplateHost, DxIntegrationModule, DxTemplateModule, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxoColorizerModule } from 'devextreme-angular/ui/nested';
import { DxoExportModule } from 'devextreme-angular/ui/nested';
import { DxoGroupModule } from 'devextreme-angular/ui/nested';
import { DxoBorderModule } from 'devextreme-angular/ui/nested';
import { DxoHoverStyleModule } from 'devextreme-angular/ui/nested';
import { DxoLabelModule } from 'devextreme-angular/ui/nested';
import { DxoFontModule } from 'devextreme-angular/ui/nested';
import { DxoSelectionStyleModule } from 'devextreme-angular/ui/nested';
import { DxoLoadingIndicatorModule } from 'devextreme-angular/ui/nested';
import { DxoSizeModule } from 'devextreme-angular/ui/nested';
import { DxoTileModule } from 'devextreme-angular/ui/nested';
import { DxoTitleModule } from 'devextreme-angular/ui/nested';
import { DxoMarginModule } from 'devextreme-angular/ui/nested';
import { DxoSubtitleModule } from 'devextreme-angular/ui/nested';
import { DxoTooltipModule } from 'devextreme-angular/ui/nested';
import { DxoFormatModule } from 'devextreme-angular/ui/nested';
import { DxoShadowModule } from 'devextreme-angular/ui/nested';
/**
 * The TreeMap is a widget that displays hierarchical data by using nested rectangles.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
var DxTreeMapComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxTreeMapComponent, _super);
    function DxTreeMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'click', emit: 'onClick' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'drawn', emit: 'onDrawn' },
            { subscribe: 'drill', emit: 'onDrill' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'hoverChanged', emit: 'onHoverChanged' },
            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },
            { subscribe: 'nodesRendering', emit: 'onNodesRendering' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { emit: 'childrenFieldChange' },
            { emit: 'colorFieldChange' },
            { emit: 'colorizerChange' },
            { emit: 'dataSourceChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'exportChange' },
            { emit: 'groupChange' },
            { emit: 'hoverEnabledChange' },
            { emit: 'idFieldChange' },
            { emit: 'interactWithGroupChange' },
            { emit: 'labelFieldChange' },
            { emit: 'layoutAlgorithmChange' },
            { emit: 'layoutDirectionChange' },
            { emit: 'loadingIndicatorChange' },
            { emit: 'maxDepthChange' },
            { emit: 'parentFieldChange' },
            { emit: 'pathModifiedChange' },
            { emit: 'redrawOnResizeChange' },
            { emit: 'resolveLabelOverflowChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'selectionModeChange' },
            { emit: 'sizeChange' },
            { emit: 'themeChange' },
            { emit: 'tileChange' },
            { emit: 'titleChange' },
            { emit: 'tooltipChange' },
            { emit: 'valueFieldChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxTreeMapComponent.prototype, "childrenField", {
        /**
         * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.
         */
        get: function () {
            return this._getOption('childrenField');
        },
        set: function (value) {
            this._setOption('childrenField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "colorField", {
        /**
         * Specifies the name of the data source field that provides colors for tiles.
         */
        get: function () {
            return this._getOption('colorField');
        },
        set: function (value) {
            this._setOption('colorField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "colorizer", {
        /**
         * Manages the color settings.
         */
        get: function () {
            return this._getOption('colorizer');
        },
        set: function (value) {
            this._setOption('colorizer', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "dataSource", {
        /**
         * Binds the widget to data.
         */
        get: function () {
            return this._getOption('dataSource');
        },
        set: function (value) {
            this._setOption('dataSource', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "disabled", {
        /**
         * Specifies whether the widget responds to the user interaction.
         */
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "export", {
        /**
         * Configures the exporting and printing features.
         */
        get: function () {
            return this._getOption('export');
        },
        set: function (value) {
            this._setOption('export', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "group", {
        /**
         * Configures groups.
         */
        get: function () {
            return this._getOption('group');
        },
        set: function (value) {
            this._setOption('group', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "hoverEnabled", {
        /**
         * Specifies whether tiles and groups change their style when a user pauses on them.
         */
        get: function () {
            return this._getOption('hoverEnabled');
        },
        set: function (value) {
            this._setOption('hoverEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "idField", {
        /**
         * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.
         */
        get: function () {
            return this._getOption('idField');
        },
        set: function (value) {
            this._setOption('idField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "interactWithGroup", {
        /**
         * Specifies whether the user will interact with a single tile or its group.
         */
        get: function () {
            return this._getOption('interactWithGroup');
        },
        set: function (value) {
            this._setOption('interactWithGroup', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "labelField", {
        /**
         * Specifies the name of the data source field that provides texts for tile and group labels.
         */
        get: function () {
            return this._getOption('labelField');
        },
        set: function (value) {
            this._setOption('labelField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "layoutAlgorithm", {
        /**
         * Specifies the layout algorithm.
         */
        get: function () {
            return this._getOption('layoutAlgorithm');
        },
        set: function (value) {
            this._setOption('layoutAlgorithm', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "layoutDirection", {
        /**
         * Specifies the direction in which the items will be laid out.
         */
        get: function () {
            return this._getOption('layoutDirection');
        },
        set: function (value) {
            this._setOption('layoutDirection', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "loadingIndicator", {
        /**
         * Configures the loading indicator.
         */
        get: function () {
            return this._getOption('loadingIndicator');
        },
        set: function (value) {
            this._setOption('loadingIndicator', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "maxDepth", {
        /**
         * Specifies how many hierarchical levels must be visualized.
         */
        get: function () {
            return this._getOption('maxDepth');
        },
        set: function (value) {
            this._setOption('maxDepth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "parentField", {
        /**
         * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.
         */
        get: function () {
            return this._getOption('parentField');
        },
        set: function (value) {
            this._setOption('parentField', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "pathModified", {
        /**
         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.
         */
        get: function () {
            return this._getOption('pathModified');
        },
        set: function (value) {
            this._setOption('pathModified', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "redrawOnResize", {
        /**
         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.
         */
        get: function () {
            return this._getOption('redrawOnResize');
        },
        set: function (value) {
            this._setOption('redrawOnResize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "resolveLabelOverflow", {
        /**
         * Use the tile.label.textOverflow option instead.
         */
        get: function () {
            return this._getOption('resolveLabelOverflow');
        },
        set: function (value) {
            this._setOption('resolveLabelOverflow', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "rtlEnabled", {
        /**
         * Switches the widget to a right-to-left representation.
         */
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "selectionMode", {
        /**
         * Specifies whether a single or multiple nodes can be in the selected state simultaneously.
         */
        get: function () {
            return this._getOption('selectionMode');
        },
        set: function (value) {
            this._setOption('selectionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "size", {
        /**
         * Specifies the widget's size in pixels.
         */
        get: function () {
            return this._getOption('size');
        },
        set: function (value) {
            this._setOption('size', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "theme", {
        /**
         * Sets the name of the theme the widget uses.
         */
        get: function () {
            return this._getOption('theme');
        },
        set: function (value) {
            this._setOption('theme', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "tile", {
        /**
         * Configures tiles.
         */
        get: function () {
            return this._getOption('tile');
        },
        set: function (value) {
            this._setOption('tile', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "title", {
        /**
         * Configures the widget's title.
         */
        get: function () {
            return this._getOption('title');
        },
        set: function (value) {
            this._setOption('title', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "tooltip", {
        /**
         * Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.
         */
        get: function () {
            return this._getOption('tooltip');
        },
        set: function (value) {
            this._setOption('tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxTreeMapComponent.prototype, "valueField", {
        /**
         * Specifies the name of the data source field that provides values for tiles.
         */
        get: function () {
            return this._getOption('valueField');
        },
        set: function (value) {
            this._setOption('valueField', value);
        },
        enumerable: true,
        configurable: true
    });
    DxTreeMapComponent.prototype._createInstance = function (element, options) {
        return new DxTreeMap(element, options);
    };
    DxTreeMapComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxTreeMapComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.setupChanges('dataSource', changes);
    };
    DxTreeMapComponent.prototype.setupChanges = function (prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    };
    DxTreeMapComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('dataSource');
        this._watcherHelper.checkWatchers();
        _super.prototype.ngDoCheck.call(this);
        _super.prototype.clearChangedOptions.call(this);
    };
    DxTreeMapComponent.prototype._setOption = function (name, value) {
        var isSetup = this._idh.setupSingle(name, value);
        var isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            _super.prototype._setOption.call(this, name, value);
        }
    };
    DxTreeMapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: IterableDifferHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "childrenField", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "colorField", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "colorizer", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "dataSource", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxTreeMapComponent.prototype, "disabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "elementAttr", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "export", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "group", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxTreeMapComponent.prototype, "hoverEnabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "idField", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxTreeMapComponent.prototype, "interactWithGroup", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "labelField", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "layoutAlgorithm", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "layoutDirection", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "loadingIndicator", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DxTreeMapComponent.prototype, "maxDepth", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "parentField", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxTreeMapComponent.prototype, "pathModified", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxTreeMapComponent.prototype, "redrawOnResize", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "resolveLabelOverflow", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxTreeMapComponent.prototype, "rtlEnabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "selectionMode", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "size", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "theme", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "tile", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "title", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTreeMapComponent.prototype, "tooltip", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxTreeMapComponent.prototype, "valueField", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onDisposing", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onDrawn", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onDrill", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onExported", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onExporting", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onFileSaving", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onHoverChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onIncidentOccurred", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onInitialized", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onNodesInitialized", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onNodesRendering", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onOptionChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "onSelectionChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "childrenFieldChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "colorFieldChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "colorizerChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "dataSourceChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "disabledChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "elementAttrChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "exportChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "groupChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "hoverEnabledChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "idFieldChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "interactWithGroupChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "labelFieldChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "layoutAlgorithmChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "layoutDirectionChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "loadingIndicatorChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "maxDepthChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "parentFieldChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "pathModifiedChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "redrawOnResizeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "resolveLabelOverflowChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "rtlEnabledChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "selectionModeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "sizeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "themeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "tileChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "titleChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "tooltipChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxTreeMapComponent.prototype, "valueFieldChange", void 0);
    DxTreeMapComponent = tslib_1.__decorate([ tslib_1.__param(7, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            IterableDifferHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxTreeMapComponent);
DxTreeMapComponent.ɵfac = function DxTreeMapComponent_Factory(t) { return new (t || DxTreeMapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxTreeMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxTreeMapComponent, selectors: [["dx-tree-map"]], inputs: { childrenField: "childrenField", colorField: "colorField", colorizer: "colorizer", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", export: "export", group: "group", hoverEnabled: "hoverEnabled", idField: "idField", interactWithGroup: "interactWithGroup", labelField: "labelField", layoutAlgorithm: "layoutAlgorithm", layoutDirection: "layoutDirection", loadingIndicator: "loadingIndicator", maxDepth: "maxDepth", parentField: "parentField", pathModified: "pathModified", redrawOnResize: "redrawOnResize", resolveLabelOverflow: "resolveLabelOverflow", rtlEnabled: "rtlEnabled", selectionMode: "selectionMode", size: "size", theme: "theme", tile: "tile", title: "title", tooltip: "tooltip", valueField: "valueField" }, outputs: { onClick: "onClick", onDisposing: "onDisposing", onDrawn: "onDrawn", onDrill: "onDrill", onExported: "onExported", onExporting: "onExporting", onFileSaving: "onFileSaving", onHoverChanged: "onHoverChanged", onIncidentOccurred: "onIncidentOccurred", onInitialized: "onInitialized", onNodesInitialized: "onNodesInitialized", onNodesRendering: "onNodesRendering", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", childrenFieldChange: "childrenFieldChange", colorFieldChange: "colorFieldChange", colorizerChange: "colorizerChange", dataSourceChange: "dataSourceChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", exportChange: "exportChange", groupChange: "groupChange", hoverEnabledChange: "hoverEnabledChange", idFieldChange: "idFieldChange", interactWithGroupChange: "interactWithGroupChange", labelFieldChange: "labelFieldChange", layoutAlgorithmChange: "layoutAlgorithmChange", layoutDirectionChange: "layoutDirectionChange", loadingIndicatorChange: "loadingIndicatorChange", maxDepthChange: "maxDepthChange", parentFieldChange: "parentFieldChange", pathModifiedChange: "pathModifiedChange", redrawOnResizeChange: "redrawOnResizeChange", resolveLabelOverflowChange: "resolveLabelOverflowChange", rtlEnabledChange: "rtlEnabledChange", selectionModeChange: "selectionModeChange", sizeChange: "sizeChange", themeChange: "themeChange", tileChange: "tileChange", titleChange: "titleChange", tooltipChange: "tooltipChange", valueFieldChange: "valueFieldChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], decls: 0, vars: 0, template: function DxTreeMapComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {  display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxTreeMapComponent, [{
        type: Component,
        args: [{
                selector: 'dx-tree-map',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ],
                styles: [' :host {  display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { childrenField: [{
            type: Input
        }], colorField: [{
            type: Input
        }], colorizer: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], disabled: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], export: [{
            type: Input
        }], group: [{
            type: Input
        }], hoverEnabled: [{
            type: Input
        }], idField: [{
            type: Input
        }], interactWithGroup: [{
            type: Input
        }], labelField: [{
            type: Input
        }], layoutAlgorithm: [{
            type: Input
        }], layoutDirection: [{
            type: Input
        }], loadingIndicator: [{
            type: Input
        }], maxDepth: [{
            type: Input
        }], parentField: [{
            type: Input
        }], pathModified: [{
            type: Input
        }], redrawOnResize: [{
            type: Input
        }], resolveLabelOverflow: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], size: [{
            type: Input
        }], theme: [{
            type: Input
        }], tile: [{
            type: Input
        }], title: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], valueField: [{
            type: Input
        }], onClick: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onDrawn: [{
            type: Output
        }], onDrill: [{
            type: Output
        }], onExported: [{
            type: Output
        }], onExporting: [{
            type: Output
        }], onFileSaving: [{
            type: Output
        }], onHoverChanged: [{
            type: Output
        }], onIncidentOccurred: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onNodesInitialized: [{
            type: Output
        }], onNodesRendering: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], childrenFieldChange: [{
            type: Output
        }], colorFieldChange: [{
            type: Output
        }], colorizerChange: [{
            type: Output
        }], dataSourceChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], exportChange: [{
            type: Output
        }], groupChange: [{
            type: Output
        }], hoverEnabledChange: [{
            type: Output
        }], idFieldChange: [{
            type: Output
        }], interactWithGroupChange: [{
            type: Output
        }], labelFieldChange: [{
            type: Output
        }], layoutAlgorithmChange: [{
            type: Output
        }], layoutDirectionChange: [{
            type: Output
        }], loadingIndicatorChange: [{
            type: Output
        }], maxDepthChange: [{
            type: Output
        }], parentFieldChange: [{
            type: Output
        }], pathModifiedChange: [{
            type: Output
        }], redrawOnResizeChange: [{
            type: Output
        }], resolveLabelOverflowChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], selectionModeChange: [{
            type: Output
        }], sizeChange: [{
            type: Output
        }], themeChange: [{
            type: Output
        }], tileChange: [{
            type: Output
        }], titleChange: [{
            type: Output
        }], tooltipChange: [{
            type: Output
        }], valueFieldChange: [{
            type: Output
        }] }); })();
    return DxTreeMapComponent;
}(DxComponent));
export { DxTreeMapComponent };
var DxTreeMapModule = /** @class */ (function () {
    function DxTreeMapModule() {
    }
DxTreeMapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxTreeMapModule });
DxTreeMapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxTreeMapModule_Factory(t) { return new (t || DxTreeMapModule)(); }, imports: [[
            DxoColorizerModule,
            DxoExportModule,
            DxoGroupModule,
            DxoBorderModule,
            DxoHoverStyleModule,
            DxoLabelModule,
            DxoFontModule,
            DxoSelectionStyleModule,
            DxoLoadingIndicatorModule,
            DxoSizeModule,
            DxoTileModule,
            DxoTitleModule,
            DxoMarginModule,
            DxoSubtitleModule,
            DxoTooltipModule,
            DxoFormatModule,
            DxoShadowModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoColorizerModule,
        DxoExportModule,
        DxoGroupModule,
        DxoBorderModule,
        DxoHoverStyleModule,
        DxoLabelModule,
        DxoFontModule,
        DxoSelectionStyleModule,
        DxoLoadingIndicatorModule,
        DxoSizeModule,
        DxoTileModule,
        DxoTitleModule,
        DxoMarginModule,
        DxoSubtitleModule,
        DxoTooltipModule,
        DxoFormatModule,
        DxoShadowModule,
        DxTemplateModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxTreeMapModule, { declarations: function () { return [DxTreeMapComponent]; }, imports: function () { return [DxoColorizerModule,
        DxoExportModule,
        DxoGroupModule,
        DxoBorderModule,
        DxoHoverStyleModule,
        DxoLabelModule,
        DxoFontModule,
        DxoSelectionStyleModule,
        DxoLoadingIndicatorModule,
        DxoSizeModule,
        DxoTileModule,
        DxoTitleModule,
        DxoMarginModule,
        DxoSubtitleModule,
        DxoTooltipModule,
        DxoFormatModule,
        DxoShadowModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxTreeMapComponent,
        DxoColorizerModule,
        DxoExportModule,
        DxoGroupModule,
        DxoBorderModule,
        DxoHoverStyleModule,
        DxoLabelModule,
        DxoFontModule,
        DxoSelectionStyleModule,
        DxoLoadingIndicatorModule,
        DxoSizeModule,
        DxoTileModule,
        DxoTitleModule,
        DxoMarginModule,
        DxoSubtitleModule,
        DxoTooltipModule,
        DxoFormatModule,
        DxoShadowModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxTreeMapModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoColorizerModule,
                    DxoExportModule,
                    DxoGroupModule,
                    DxoBorderModule,
                    DxoHoverStyleModule,
                    DxoLabelModule,
                    DxoFontModule,
                    DxoSelectionStyleModule,
                    DxoLoadingIndicatorModule,
                    DxoSizeModule,
                    DxoTileModule,
                    DxoTitleModule,
                    DxoMarginModule,
                    DxoSubtitleModule,
                    DxoTooltipModule,
                    DxoFormatModule,
                    DxoShadowModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxTreeMapComponent
                ],
                exports: [
                    DxTreeMapComponent,
                    DxoColorizerModule,
                    DxoExportModule,
                    DxoGroupModule,
                    DxoBorderModule,
                    DxoHoverStyleModule,
                    DxoLabelModule,
                    DxoFontModule,
                    DxoSelectionStyleModule,
                    DxoLoadingIndicatorModule,
                    DxoSizeModule,
                    DxoTileModule,
                    DxoTitleModule,
                    DxoMarginModule,
                    DxoSubtitleModule,
                    DxoTooltipModule,
                    DxoFormatModule,
                    DxoShadowModule,
                    DxTemplateModule
                ]
            }]
    }], function () { return []; }, null); })();
    return DxTreeMapModule;
}());
export { DxTreeMapModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS91aS90cmVlLW1hcC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0E0dkI2QyxBQVl0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBTW9COzs7Ozs7S0FNdEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBa0RtQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcclxuICogVmVyc2lvbjogMTkuMi42XHJcbiAqIEJ1aWxkIGRhdGU6IFRodSBKYW4gMzAgMjAyMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXHJcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcbmltcG9ydCB7IEJyb3dzZXJUcmFuc2ZlclN0YXRlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IFRyYW5zZmVyU3RhdGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBOZ01vZHVsZSwgRWxlbWVudFJlZiwgTmdab25lLCBQTEFURk9STV9JRCwgSW5qZWN0LCBJbnB1dCwgT3V0cHV0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBEb0NoZWNrLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBEeFRyZWVNYXAgZnJvbSAnZGV2ZXh0cmVtZS92aXovdHJlZV9tYXAnO1xyXG5pbXBvcnQgeyBEeENvbXBvbmVudCwgRHhUZW1wbGF0ZUhvc3QsIER4SW50ZWdyYXRpb25Nb2R1bGUsIER4VGVtcGxhdGVNb2R1bGUsIE5lc3RlZE9wdGlvbkhvc3QsIEl0ZXJhYmxlRGlmZmVySGVscGVyLCBXYXRjaGVySGVscGVyIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeG9Db2xvcml6ZXJNb2R1bGUgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkJztcclxuaW1wb3J0IHsgRHhvRXhwb3J0TW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b0dyb3VwTW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b0JvcmRlck1vZHVsZSB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci91aS9uZXN0ZWQnO1xyXG5pbXBvcnQgeyBEeG9Ib3ZlclN0eWxlTW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b0xhYmVsTW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b0ZvbnRNb2R1bGUgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkJztcclxuaW1wb3J0IHsgRHhvU2VsZWN0aW9uU3R5bGVNb2R1bGUgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkJztcclxuaW1wb3J0IHsgRHhvTG9hZGluZ0luZGljYXRvck1vZHVsZSB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci91aS9uZXN0ZWQnO1xyXG5pbXBvcnQgeyBEeG9TaXplTW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b1RpbGVNb2R1bGUgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkJztcclxuaW1wb3J0IHsgRHhvVGl0bGVNb2R1bGUgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkJztcclxuaW1wb3J0IHsgRHhvTWFyZ2luTW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b1N1YnRpdGxlTW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b1Rvb2x0aXBNb2R1bGUgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkJztcclxuaW1wb3J0IHsgRHhvRm9ybWF0TW9kdWxlIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4b1NoYWRvd01vZHVsZSB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci91aS9uZXN0ZWQnO1xyXG4vKipcclxuICogVGhlIFRyZWVNYXAgaXMgYSB3aWRnZXQgdGhhdCBkaXNwbGF5cyBoaWVyYXJjaGljYWwgZGF0YSBieSB1c2luZyBuZXN0ZWQgcmVjdGFuZ2xlcy5cclxuICovXHJcbnZhciBEeFRyZWVNYXBDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEeFRyZWVNYXBDb21wb25lbnQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEeFRyZWVNYXBDb21wb25lbnQoZWxlbWVudFJlZiwgbmdab25lLCB0ZW1wbGF0ZUhvc3QsIF93YXRjaGVySGVscGVyLCBfaWRoLCBvcHRpb25Ib3N0LCB0cmFuc2ZlclN0YXRlLCBwbGF0Zm9ybUlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZWxlbWVudFJlZiwgbmdab25lLCB0ZW1wbGF0ZUhvc3QsIF93YXRjaGVySGVscGVyLCB0cmFuc2ZlclN0YXRlLCBwbGF0Zm9ybUlkKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLl93YXRjaGVySGVscGVyID0gX3dhdGNoZXJIZWxwZXI7XHJcbiAgICAgICAgX3RoaXMuX2lkaCA9IF9pZGg7XHJcbiAgICAgICAgX3RoaXMuX2NyZWF0ZUV2ZW50RW1pdHRlcnMoW1xyXG4gICAgICAgICAgICB7IHN1YnNjcmliZTogJ2NsaWNrJywgZW1pdDogJ29uQ2xpY2snIH0sXHJcbiAgICAgICAgICAgIHsgc3Vic2NyaWJlOiAnZGlzcG9zaW5nJywgZW1pdDogJ29uRGlzcG9zaW5nJyB9LFxyXG4gICAgICAgICAgICB7IHN1YnNjcmliZTogJ2RyYXduJywgZW1pdDogJ29uRHJhd24nIH0sXHJcbiAgICAgICAgICAgIHsgc3Vic2NyaWJlOiAnZHJpbGwnLCBlbWl0OiAnb25EcmlsbCcgfSxcclxuICAgICAgICAgICAgeyBzdWJzY3JpYmU6ICdleHBvcnRlZCcsIGVtaXQ6ICdvbkV4cG9ydGVkJyB9LFxyXG4gICAgICAgICAgICB7IHN1YnNjcmliZTogJ2V4cG9ydGluZycsIGVtaXQ6ICdvbkV4cG9ydGluZycgfSxcclxuICAgICAgICAgICAgeyBzdWJzY3JpYmU6ICdmaWxlU2F2aW5nJywgZW1pdDogJ29uRmlsZVNhdmluZycgfSxcclxuICAgICAgICAgICAgeyBzdWJzY3JpYmU6ICdob3ZlckNoYW5nZWQnLCBlbWl0OiAnb25Ib3ZlckNoYW5nZWQnIH0sXHJcbiAgICAgICAgICAgIHsgc3Vic2NyaWJlOiAnaW5jaWRlbnRPY2N1cnJlZCcsIGVtaXQ6ICdvbkluY2lkZW50T2NjdXJyZWQnIH0sXHJcbiAgICAgICAgICAgIHsgc3Vic2NyaWJlOiAnaW5pdGlhbGl6ZWQnLCBlbWl0OiAnb25Jbml0aWFsaXplZCcgfSxcclxuICAgICAgICAgICAgeyBzdWJzY3JpYmU6ICdub2Rlc0luaXRpYWxpemVkJywgZW1pdDogJ29uTm9kZXNJbml0aWFsaXplZCcgfSxcclxuICAgICAgICAgICAgeyBzdWJzY3JpYmU6ICdub2Rlc1JlbmRlcmluZycsIGVtaXQ6ICdvbk5vZGVzUmVuZGVyaW5nJyB9LFxyXG4gICAgICAgICAgICB7IHN1YnNjcmliZTogJ29wdGlvbkNoYW5nZWQnLCBlbWl0OiAnb25PcHRpb25DaGFuZ2VkJyB9LFxyXG4gICAgICAgICAgICB7IHN1YnNjcmliZTogJ3NlbGVjdGlvbkNoYW5nZWQnLCBlbWl0OiAnb25TZWxlY3Rpb25DaGFuZ2VkJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdjaGlsZHJlbkZpZWxkQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdjb2xvckZpZWxkQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdjb2xvcml6ZXJDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ2RhdGFTb3VyY2VDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ2Rpc2FibGVkQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdlbGVtZW50QXR0ckNoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAnZXhwb3J0Q2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdncm91cENoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAnaG92ZXJFbmFibGVkQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdpZEZpZWxkQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdpbnRlcmFjdFdpdGhHcm91cENoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAnbGFiZWxGaWVsZENoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAnbGF5b3V0QWxnb3JpdGhtQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdsYXlvdXREaXJlY3Rpb25DaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ2xvYWRpbmdJbmRpY2F0b3JDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ21heERlcHRoQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdwYXJlbnRGaWVsZENoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAncGF0aE1vZGlmaWVkQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICdyZWRyYXdPblJlc2l6ZUNoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAncmVzb2x2ZUxhYmVsT3ZlcmZsb3dDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ3J0bEVuYWJsZWRDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ3NlbGVjdGlvbk1vZGVDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ3NpemVDaGFuZ2UnIH0sXHJcbiAgICAgICAgICAgIHsgZW1pdDogJ3RoZW1lQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICd0aWxlQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICB7IGVtaXQ6ICd0aXRsZUNoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAndG9vbHRpcENoYW5nZScgfSxcclxuICAgICAgICAgICAgeyBlbWl0OiAndmFsdWVGaWVsZENoYW5nZScgfVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIF90aGlzLl9pZGguc2V0SG9zdChfdGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KF90aGlzKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjaGlsZHJlbkZpZWxkXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlIGZpZWxkIHRoYXQgcHJvdmlkZXMgbmVzdGVkIGl0ZW1zIGZvciBhIGdyb3VwLiBBcHBsaWVzIHRvIGhpZXJhcmNoaWNhbCBkYXRhIHNvdXJjZXMgb25seS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignY2hpbGRyZW5GaWVsZCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdjaGlsZHJlbkZpZWxkJywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiY29sb3JGaWVsZFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBkYXRhIHNvdXJjZSBmaWVsZCB0aGF0IHByb3ZpZGVzIGNvbG9ycyBmb3IgdGlsZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2NvbG9yRmllbGQnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbignY29sb3JGaWVsZCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImNvbG9yaXplclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFuYWdlcyB0aGUgY29sb3Igc2V0dGluZ3MuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2NvbG9yaXplcicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdjb2xvcml6ZXInLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJkYXRhU291cmNlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCaW5kcyB0aGUgd2lkZ2V0IHRvIGRhdGEuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2RhdGFTb3VyY2UnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbignZGF0YVNvdXJjZScsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IHJlc3BvbmRzIHRvIHRoZSB1c2VyIGludGVyYWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdkaXNhYmxlZCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImVsZW1lbnRBdHRyXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhlIGF0dHJpYnV0ZXMgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIHdpZGdldCdzIHJvb3QgZWxlbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignZWxlbWVudEF0dHInKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbignZWxlbWVudEF0dHInLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJleHBvcnRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbmZpZ3VyZXMgdGhlIGV4cG9ydGluZyBhbmQgcHJpbnRpbmcgZmVhdHVyZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2V4cG9ydCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdleHBvcnQnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJncm91cFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uZmlndXJlcyBncm91cHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2dyb3VwJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2dyb3VwJywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiaG92ZXJFbmFibGVkXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aWxlcyBhbmQgZ3JvdXBzIGNoYW5nZSB0aGVpciBzdHlsZSB3aGVuIGEgdXNlciBwYXVzZXMgb24gdGhlbS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignaG92ZXJFbmFibGVkJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2hvdmVyRW5hYmxlZCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImlkRmllbGRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgZmllbGQgdGhhdCBwcm92aWRlcyBJRHMgZm9yIGl0ZW1zLiBBcHBsaWVzIHRvIHBsYWluIGRhdGEgc291cmNlcyBvbmx5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdpZEZpZWxkJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2lkRmllbGQnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJpbnRlcmFjdFdpdGhHcm91cFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHVzZXIgd2lsbCBpbnRlcmFjdCB3aXRoIGEgc2luZ2xlIHRpbGUgb3IgaXRzIGdyb3VwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdpbnRlcmFjdFdpdGhHcm91cCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdpbnRlcmFjdFdpdGhHcm91cCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxhYmVsRmllbGRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgZmllbGQgdGhhdCBwcm92aWRlcyB0ZXh0cyBmb3IgdGlsZSBhbmQgZ3JvdXAgbGFiZWxzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdsYWJlbEZpZWxkJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2xhYmVsRmllbGQnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJsYXlvdXRBbGdvcml0aG1cIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgbGF5b3V0IGFsZ29yaXRobS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignbGF5b3V0QWxnb3JpdGhtJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2xheW91dEFsZ29yaXRobScsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxheW91dERpcmVjdGlvblwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBkaXJlY3Rpb24gaW4gd2hpY2ggdGhlIGl0ZW1zIHdpbGwgYmUgbGFpZCBvdXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2xheW91dERpcmVjdGlvbicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdsYXlvdXREaXJlY3Rpb24nLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJsb2FkaW5nSW5kaWNhdG9yXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25maWd1cmVzIHRoZSBsb2FkaW5nIGluZGljYXRvci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignbG9hZGluZ0luZGljYXRvcicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdsb2FkaW5nSW5kaWNhdG9yJywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwibWF4RGVwdGhcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyBob3cgbWFueSBoaWVyYXJjaGljYWwgbGV2ZWxzIG11c3QgYmUgdmlzdWFsaXplZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignbWF4RGVwdGgnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbignbWF4RGVwdGgnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJwYXJlbnRGaWVsZFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBkYXRhIHNvdXJjZSBmaWVsZCB0aGF0IHByb3ZpZGVzIHBhcmVudCBJRHMgZm9yIGl0ZW1zLiBBcHBsaWVzIHRvIHBsYWluIGRhdGEgc291cmNlcyBvbmx5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdwYXJlbnRGaWVsZCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdwYXJlbnRGaWVsZCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInBhdGhNb2RpZmllZFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTm90aWZpZXMgdGhlIHdpZGdldCB0aGF0IGl0IGlzIGVtYmVkZGVkIGludG8gYW4gSFRNTCBwYWdlIHRoYXQgdXNlcyBhIHRhZyBtb2RpZnlpbmcgdGhlIHBhdGguXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3BhdGhNb2RpZmllZCcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdwYXRoTW9kaWZpZWQnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyZWRyYXdPblJlc2l6ZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmVkcmF3IHRoZSB3aWRnZXQgd2hlbiB0aGUgc2l6ZSBvZiB0aGUgcGFyZW50IGJyb3dzZXIgd2luZG93IGNoYW5nZXMgb3IgYSBtb2JpbGUgZGV2aWNlIHJvdGF0ZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3JlZHJhd09uUmVzaXplJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ3JlZHJhd09uUmVzaXplJywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwicmVzb2x2ZUxhYmVsT3ZlcmZsb3dcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZSB0aGUgdGlsZS5sYWJlbC50ZXh0T3ZlcmZsb3cgb3B0aW9uIGluc3RlYWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3Jlc29sdmVMYWJlbE92ZXJmbG93Jyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ3Jlc29sdmVMYWJlbE92ZXJmbG93JywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwicnRsRW5hYmxlZFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3dpdGNoZXMgdGhlIHdpZGdldCB0byBhIHJpZ2h0LXRvLWxlZnQgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3J0bEVuYWJsZWQnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbigncnRsRW5hYmxlZCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInNlbGVjdGlvbk1vZGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIGEgc2luZ2xlIG9yIG11bHRpcGxlIG5vZGVzIGNhbiBiZSBpbiB0aGUgc2VsZWN0ZWQgc3RhdGUgc2ltdWx0YW5lb3VzbHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3NlbGVjdGlvbk1vZGUnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbignc2VsZWN0aW9uTW9kZScsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgd2lkZ2V0J3Mgc2l6ZSBpbiBwaXhlbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3NpemUnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbignc2l6ZScsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInRoZW1lXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIHRoZSBuYW1lIG9mIHRoZSB0aGVtZSB0aGUgd2lkZ2V0IHVzZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3RoZW1lJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ3RoZW1lJywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidGlsZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uZmlndXJlcyB0aWxlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbigndGlsZScpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCd0aWxlJywgdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidGl0bGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbmZpZ3VyZXMgdGhlIHdpZGdldCdzIHRpdGxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCd0aXRsZScpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCd0aXRsZScsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInRvb2x0aXBcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbmZpZ3VyZXMgdG9vbHRpcHMgLSBzbWFsbCBwb3AtdXAgcmVjdGFuZ2xlcyB0aGF0IGRpc3BsYXkgaW5mb3JtYXRpb24gYWJvdXQgYSBkYXRhLXZpc3VhbGl6aW5nIHdpZGdldCBlbGVtZW50IGJlaW5nIHByZXNzZWQgb3IgaG92ZXJlZCBvdmVyIHdpdGggdGhlIG1vdXNlIHBvaW50ZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ3Rvb2x0aXAnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldE9wdGlvbigndG9vbHRpcCcsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInZhbHVlRmllbGRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgZmllbGQgdGhhdCBwcm92aWRlcyB2YWx1ZXMgZm9yIHRpbGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCd2YWx1ZUZpZWxkJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ3ZhbHVlRmllbGQnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLl9jcmVhdGVJbnN0YW5jZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEeFRyZWVNYXAoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9kZXN0cm95V2lkZ2V0KCk7XHJcbiAgICB9O1xyXG4gICAgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZ09uQ2hhbmdlcy5jYWxsKHRoaXMsIGNoYW5nZXMpO1xyXG4gICAgICAgIHRoaXMuc2V0dXBDaGFuZ2VzKCdkYXRhU291cmNlJywgY2hhbmdlcyk7XHJcbiAgICB9O1xyXG4gICAgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZS5zZXR1cENoYW5nZXMgPSBmdW5jdGlvbiAocHJvcCwgY2hhbmdlcykge1xyXG4gICAgICAgIGlmICghKHByb3AgaW4gdGhpcy5fb3B0aW9uc1RvVXBkYXRlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pZGguc2V0dXAocHJvcCwgY2hhbmdlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUubmdEb0NoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2lkaC5kb0NoZWNrKCdkYXRhU291cmNlJyk7XHJcbiAgICAgICAgdGhpcy5fd2F0Y2hlckhlbHBlci5jaGVja1dhdGNoZXJzKCk7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZ0RvQ2hlY2suY2FsbCh0aGlzKTtcclxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmNsZWFyQ2hhbmdlZE9wdGlvbnMuY2FsbCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLl9zZXRPcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgaXNTZXR1cCA9IHRoaXMuX2lkaC5zZXR1cFNpbmdsZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgdmFyIGlzQ2hhbmdlZCA9IHRoaXMuX2lkaC5nZXRDaGFuZ2VzKG5hbWUsIHZhbHVlKSAhPT0gbnVsbDtcclxuICAgICAgICBpZiAoaXNTZXR1cCB8fCBpc0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fc2V0T3B0aW9uLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEeFRyZWVNYXBDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmIH0sXHJcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUgfSxcclxuICAgICAgICB7IHR5cGU6IER4VGVtcGxhdGVIb3N0IH0sXHJcbiAgICAgICAgeyB0eXBlOiBXYXRjaGVySGVscGVyIH0sXHJcbiAgICAgICAgeyB0eXBlOiBJdGVyYWJsZURpZmZlckhlbHBlciB9LFxyXG4gICAgICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCB9LFxyXG4gICAgICAgIHsgdHlwZTogVHJhbnNmZXJTdGF0ZSB9LFxyXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtQTEFURk9STV9JRCxdIH1dIH1cclxuICAgIF07IH07XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbU3RyaW5nXSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiY2hpbGRyZW5GaWVsZFwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmddKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjb2xvckZpZWxkXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImNvbG9yaXplclwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtPYmplY3RdKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJkYXRhU291cmNlXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtCb29sZWFuXSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiZWxlbWVudEF0dHJcIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiZXhwb3J0XCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImdyb3VwXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtCb29sZWFuXSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiaG92ZXJFbmFibGVkXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZyksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW1N0cmluZ10pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImlkRmllbGRcIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbiksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0Jvb2xlYW5dKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJpbnRlcmFjdFdpdGhHcm91cFwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmddKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJsYWJlbEZpZWxkXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxheW91dEFsZ29yaXRobVwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmddKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJsYXlvdXREaXJlY3Rpb25cIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwibG9hZGluZ0luZGljYXRvclwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBOdW1iZXIpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtOdW1iZXJdKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJtYXhEZXB0aFwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmddKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJwYXJlbnRGaWVsZFwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbQm9vbGVhbl0pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInBhdGhNb2RpZmllZFwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbQm9vbGVhbl0pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInJlZHJhd09uUmVzaXplXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZyksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW1N0cmluZ10pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInJlc29sdmVMYWJlbE92ZXJmbG93XCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtCb29sZWFuXSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwicnRsRW5hYmxlZFwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmddKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzZWxlY3Rpb25Nb2RlXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInNpemVcIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbU3RyaW5nXSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidGhlbWVcIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidGlsZVwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtPYmplY3RdKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0aXRsZVwiLCBudWxsKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5wdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtPYmplY3RdKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0b29sdGlwXCIsIG51bGwpO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbnB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZyksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW1N0cmluZ10pXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInZhbHVlRmllbGRcIiwgbnVsbCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwib25DbGlja1wiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcIm9uRGlzcG9zaW5nXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwib25EcmF3blwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcIm9uRHJpbGxcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkV4cG9ydGVkXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwib25FeHBvcnRpbmdcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkZpbGVTYXZpbmdcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkhvdmVyQ2hhbmdlZFwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcIm9uSW5jaWRlbnRPY2N1cnJlZFwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcIm9uSW5pdGlhbGl6ZWRcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbk5vZGVzSW5pdGlhbGl6ZWRcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbk5vZGVzUmVuZGVyaW5nXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwib25PcHRpb25DaGFuZ2VkXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwib25TZWxlY3Rpb25DaGFuZ2VkXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiY2hpbGRyZW5GaWVsZENoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImNvbG9yRmllbGRDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjb2xvcml6ZXJDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJkYXRhU291cmNlQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiZGlzYWJsZWRDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJlbGVtZW50QXR0ckNoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImV4cG9ydENoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImdyb3VwQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiaG92ZXJFbmFibGVkQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiaWRGaWVsZENoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImludGVyYWN0V2l0aEdyb3VwQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwibGFiZWxGaWVsZENoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxheW91dEFsZ29yaXRobUNoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxheW91dERpcmVjdGlvbkNoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxvYWRpbmdJbmRpY2F0b3JDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJtYXhEZXB0aENoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInBhcmVudEZpZWxkQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwicGF0aE1vZGlmaWVkQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwicmVkcmF3T25SZXNpemVDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyZXNvbHZlTGFiZWxPdmVyZmxvd0NoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInJ0bEVuYWJsZWRDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgT3V0cHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxyXG4gICAgXSwgRHhUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzZWxlY3Rpb25Nb2RlQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwic2l6ZUNoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInRoZW1lQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidGlsZUNoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInRpdGxlQ2hhbmdlXCIsIHZvaWQgMCk7XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE91dHB1dCgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidG9vbHRpcENoYW5nZVwiLCB2b2lkIDApO1xyXG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBPdXRwdXQoKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBFdmVudEVtaXR0ZXIpXHJcbiAgICBdLCBEeFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInZhbHVlRmllbGRDaGFuZ2VcIiwgdm9pZCAwKTtcclxuICAgIER4VHJlZU1hcENvbXBvbmVudCA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgQ29tcG9uZW50KHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdkeC10cmVlLW1hcCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnJyxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICBEeFRlbXBsYXRlSG9zdCxcclxuICAgICAgICAgICAgICAgIFdhdGNoZXJIZWxwZXIsXHJcbiAgICAgICAgICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICAgICAgSXRlcmFibGVEaWZmZXJIZWxwZXJcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgc3R5bGVzOiBbJyA6aG9zdCB7ICBkaXNwbGF5OiBibG9jazsgfSddXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDcsIEluamVjdChQTEFURk9STV9JRCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtFbGVtZW50UmVmLCBOZ1pvbmUsIER4VGVtcGxhdGVIb3N0LFxyXG4gICAgICAgICAgICBXYXRjaGVySGVscGVyLFxyXG4gICAgICAgICAgICBJdGVyYWJsZURpZmZlckhlbHBlcixcclxuICAgICAgICAgICAgTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICAgICAgVHJhbnNmZXJTdGF0ZSwgT2JqZWN0XSlcclxuICAgIF0sIER4VHJlZU1hcENvbXBvbmVudCk7XHJcbiAgICByZXR1cm4gRHhUcmVlTWFwQ29tcG9uZW50O1xyXG59KER4Q29tcG9uZW50KSk7XHJcbmV4cG9ydCB7IER4VHJlZU1hcENvbXBvbmVudCB9O1xyXG52YXIgRHhUcmVlTWFwTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHhUcmVlTWFwTW9kdWxlKCkge1xyXG4gICAgfVxyXG4gICAgRHhUcmVlTWFwTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgICAgIGltcG9ydHM6IFtcclxuICAgICAgICAgICAgICAgIER4b0NvbG9yaXplck1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b0V4cG9ydE1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b0dyb3VwTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvQm9yZGVyTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvSG92ZXJTdHlsZU1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b0xhYmVsTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvRm9udE1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b1NlbGVjdGlvblN0eWxlTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvTG9hZGluZ0luZGljYXRvck1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b1NpemVNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9UaWxlTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvVGl0bGVNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9NYXJnaW5Nb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9TdWJ0aXRsZU1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b1Rvb2x0aXBNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9Gb3JtYXRNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9TaGFkb3dNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeEludGVncmF0aW9uTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhUZW1wbGF0ZU1vZHVsZSxcclxuICAgICAgICAgICAgICAgIEJyb3dzZXJUcmFuc2ZlclN0YXRlTW9kdWxlXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgRHhUcmVlTWFwQ29tcG9uZW50XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGV4cG9ydHM6IFtcclxuICAgICAgICAgICAgICAgIER4VHJlZU1hcENvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgIER4b0NvbG9yaXplck1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b0V4cG9ydE1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b0dyb3VwTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvQm9yZGVyTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvSG92ZXJTdHlsZU1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b0xhYmVsTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvRm9udE1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b1NlbGVjdGlvblN0eWxlTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvTG9hZGluZ0luZGljYXRvck1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b1NpemVNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9UaWxlTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgRHhvVGl0bGVNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9NYXJnaW5Nb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9TdWJ0aXRsZU1vZHVsZSxcclxuICAgICAgICAgICAgICAgIER4b1Rvb2x0aXBNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9Gb3JtYXRNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeG9TaGFkb3dNb2R1bGUsXHJcbiAgICAgICAgICAgICAgICBEeFRlbXBsYXRlTW9kdWxlXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9KVxyXG4gICAgXSwgRHhUcmVlTWFwTW9kdWxlKTtcclxuICAgIHJldHVybiBEeFRyZWVNYXBNb2R1bGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IER4VHJlZU1hcE1vZHVsZSB9O1xyIl19