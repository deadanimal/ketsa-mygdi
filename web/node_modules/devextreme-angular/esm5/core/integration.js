/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, NgZone, Optional } from '@angular/core';
import { XhrFactory } from '@angular/common/http';
import * as httpRequest from 'devextreme/core/http_request';
import { DOCUMENT } from '@angular/common';
import * as domAdapter from 'devextreme/core/dom_adapter';
import * as readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import * as eventsEngine from 'devextreme/events/core/events_engine';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
var insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
var originalAdd;
var callbacks = [];
readyCallbacks.inject({
    add: function (callback) {
        originalAdd = this.callBase.bind(this);
        callbacks.push(callback);
    }
});
var doInjections = function (document, ngZone, xhrFactory) {
    domAdapter.inject({
        _document: document,
        listen: function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var eventName = args[1];
            if (outsideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.runOutsideAngular(function () {
                    return _this.callBase.apply(_this, args);
                });
            }
            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.run(function () {
                    return _this.callBase.apply(_this, args);
                });
            }
            return this.callBase.apply(this, args);
        },
        isElementNode: function (element) {
            return element && element.nodeType === 1;
        },
        isTextNode: function (element) {
            return element && element.nodeType === 3;
        },
        isDocument: function (element) {
            return element && element.nodeType === 9;
        }
    });
    httpRequest.inject({
        getXhr: function () {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            var _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr['withCredentials'] = false;
            }
            return _xhr;
        }
    });
    var runReadyCallbacksInZone = function () {
        ngZone.run(function () {
            eventsEngine.set({});
            callbacks.forEach(function (callback) { return originalAdd.call(null, callback); });
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    doInjections = runReadyCallbacksInZone;
};
var ɵ0 = doInjections;
var DxIntegrationModule = /** @class */ (function () {
    function DxIntegrationModule(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
    DxIntegrationModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone },
        { type: XhrFactory, decorators: [{ type: Optional }] }
    ]; };
    DxIntegrationModule = tslib_1.__decorate([ tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, NgZone, XhrFactory])
    ], DxIntegrationModule);
DxIntegrationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxIntegrationModule });
DxIntegrationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxIntegrationModule_Factory(t) { return new (t || DxIntegrationModule)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory, 8)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxIntegrationModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.XhrFactory, decorators: [{
                type: Optional
            }] }]; }, null); })();
    return DxIntegrationModule;
}());
export { DxIntegrationModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS9jb3JlL2ludGVncmF0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OENBMkU4QyxBQUV2Qzs7Ozs7Ozs7Ozs7OztrQ0FFcUIiLCJmaWxlIjoiaW50ZWdyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3QsIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgWGhyRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0ICogYXMgaHR0cFJlcXVlc3QgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL2h0dHBfcmVxdWVzdCc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0ICogYXMgZG9tQWRhcHRlciBmcm9tICdkZXZleHRyZW1lL2NvcmUvZG9tX2FkYXB0ZXInO1xyXG5pbXBvcnQgKiBhcyByZWFkeUNhbGxiYWNrcyBmcm9tICdkZXZleHRyZW1lL2NvcmUvdXRpbHMvcmVhZHlfY2FsbGJhY2tzJztcclxuaW1wb3J0ICogYXMgZXZlbnRzRW5naW5lIGZyb20gJ2RldmV4dHJlbWUvZXZlbnRzL2NvcmUvZXZlbnRzX2VuZ2luZSc7XHJcbnZhciBvdXRzaWRlWm9uZUV2ZW50cyA9IFsnbW91c2Vtb3ZlJywgJ21vdXNlb3ZlcicsICdtb3VzZW91dCddO1xyXG52YXIgaW5zaWRlWm9uZUV2ZW50cyA9IFsnbW91c2V1cCcsICdjbGljaycsICdtb3VzZWRvd24nLCAndHJhbnNpdGlvbmVuZCcsICd3aGVlbCddO1xyXG52YXIgb3JpZ2luYWxBZGQ7XHJcbnZhciBjYWxsYmFja3MgPSBbXTtcclxucmVhZHlDYWxsYmFja3MuaW5qZWN0KHtcclxuICAgIGFkZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgb3JpZ2luYWxBZGQgPSB0aGlzLmNhbGxCYXNlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfVxyXG59KTtcclxudmFyIGRvSW5qZWN0aW9ucyA9IGZ1bmN0aW9uIChkb2N1bWVudCwgbmdab25lLCB4aHJGYWN0b3J5KSB7XHJcbiAgICBkb21BZGFwdGVyLmluamVjdCh7XHJcbiAgICAgICAgX2RvY3VtZW50OiBkb2N1bWVudCxcclxuICAgICAgICBsaXN0ZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJnc1sxXTtcclxuICAgICAgICAgICAgaWYgKG91dHNpZGVab25lRXZlbnRzLmluZGV4T2YoZXZlbnROYW1lKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYWxsQmFzZS5hcHBseShfdGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobmdab25lLmlzU3RhYmxlICYmIGluc2lkZVpvbmVFdmVudHMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYWxsQmFzZS5hcHBseShfdGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsQmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzRWxlbWVudE5vZGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1RleHROb2RlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNEb2N1bWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gOTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGh0dHBSZXF1ZXN0LmluamVjdCh7XHJcbiAgICAgICAgZ2V0WGhyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICgheGhyRmFjdG9yeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbEJhc2UuYXBwbHkodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIF94aHIgPSB4aHJGYWN0b3J5LmJ1aWxkKCk7XHJcbiAgICAgICAgICAgIGlmICghKCd3aXRoQ3JlZGVudGlhbHMnIGluIF94aHIpKSB7XHJcbiAgICAgICAgICAgICAgICBfeGhyWyd3aXRoQ3JlZGVudGlhbHMnXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfeGhyO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG5nWm9uZS5ydW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBldmVudHNFbmdpbmUuc2V0KHt9KTtcclxuICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBvcmlnaW5hbEFkZC5jYWxsKG51bGwsIGNhbGxiYWNrKTsgfSk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgICAgICByZWFkeUNhbGxiYWNrcy5maXJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcnVuUmVhZHlDYWxsYmFja3NJblpvbmUoKTtcclxuICAgIGRvSW5qZWN0aW9ucyA9IHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lO1xyXG59O1xyXG52YXIgybUwID0gZG9JbmplY3Rpb25zO1xyXG52YXIgRHhJbnRlZ3JhdGlvbk1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIER4SW50ZWdyYXRpb25Nb2R1bGUoZG9jdW1lbnQsIG5nWm9uZSwgeGhyRmFjdG9yeSkge1xyXG4gICAgICAgIGRvSW5qZWN0aW9ucyhkb2N1bWVudCwgbmdab25lLCB4aHJGYWN0b3J5KTtcclxuICAgIH1cclxuICAgIER4SW50ZWdyYXRpb25Nb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0RPQ1VNRU5ULF0gfV0gfSxcclxuICAgICAgICB7IHR5cGU6IE5nWm9uZSB9LFxyXG4gICAgICAgIHsgdHlwZTogWGhyRmFjdG9yeSwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfV0gfVxyXG4gICAgXTsgfTtcclxuICAgIER4SW50ZWdyYXRpb25Nb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIE5nTW9kdWxlKHt9KSxcclxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgSW5qZWN0KERPQ1VNRU5UKSksIHRzbGliXzEuX19wYXJhbSgyLCBPcHRpb25hbCgpKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0LCBOZ1pvbmUsIFhockZhY3RvcnldKVxyXG4gICAgXSwgRHhJbnRlZ3JhdGlvbk1vZHVsZSk7XHJcbiAgICByZXR1cm4gRHhJbnRlZ3JhdGlvbk1vZHVsZTtcclxufSgpKTtcclxuZXhwb3J0IHsgRHhJbnRlZ3JhdGlvbk1vZHVsZSB9O1xyXG5leHBvcnQgeyDJtTAgfTtcciJdfQ==