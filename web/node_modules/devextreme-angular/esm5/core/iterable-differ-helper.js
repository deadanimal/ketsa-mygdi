/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { Injectable, SimpleChanges, IterableDiffers } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var IterableDifferHelper = /** @class */ (function () {
    function IterableDifferHelper(_differs) {
        this._differs = _differs;
        this._propertyDiffers = {};
    }
    IterableDifferHelper.prototype.setHost = function (host) {
        this._host = host;
    };
    IterableDifferHelper.prototype.setup = function (prop, changes) {
        if (prop in changes) {
            var value = changes[prop].currentValue;
            this.setupSingle(prop, value);
        }
    };
    IterableDifferHelper.prototype.setupSingle = function (prop, value) {
        if (value && Array.isArray(value)) {
            if (!this._propertyDiffers[prop]) {
                try {
                    this._propertyDiffers[prop] = this._differs.find(value).create(null);
                    return true;
                }
                catch (e) { }
            }
        }
        else {
            delete this._propertyDiffers[prop];
        }
        return false;
    };
    IterableDifferHelper.prototype.getChanges = function (prop, value) {
        if (this._propertyDiffers[prop]) {
            return this._propertyDiffers[prop].diff(value);
        }
    };
    IterableDifferHelper.prototype.checkChangedOptions = function (propName, hostValue) {
        return this._host.changedOptions[propName] === hostValue;
    };
    ;
    IterableDifferHelper.prototype.doCheck = function (prop) {
        if (this._propertyDiffers[prop]) {
            var hostValue = this._host[prop], isChangedOption = this.checkChangedOptions(prop, hostValue);
            var changes = this.getChanges(prop, hostValue);
            if (changes && this._host.instance && !isChangedOption) {
                this._host.lockWidgetUpdate();
                this._host.instance.option(prop, hostValue);
            }
        }
    };
    IterableDifferHelper.ctorParameters = function () { return [
        { type: IterableDiffers }
    ]; };
    IterableDifferHelper = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [IterableDiffers])
    ], IterableDifferHelper);
IterableDifferHelper.ɵfac = function IterableDifferHelper_Factory(t) { return new (t || IterableDifferHelper)(ɵngcc0.ɵɵinject(ɵngcc0.IterableDiffers)); };
IterableDifferHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: IterableDifferHelper, factory: function (t) { return IterableDifferHelper.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IterableDifferHelper, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.IterableDiffers }]; }, null); })();
    return IterableDifferHelper;
}());
export { IterableDifferHelper };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS9jb3JlL2l0ZXJhYmxlLWRpZmZlci1oZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0NBbUQrQyxBQUV4Qzs7Ozs7O2dGQUNzQiIsImZpbGUiOiJpdGVyYWJsZS1kaWZmZXItaGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAxOS4yLjZcclxuICogQnVpbGQgZGF0ZTogVGh1IEphbiAzMCAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBTaW1wbGVDaGFuZ2VzLCBJdGVyYWJsZURpZmZlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxudmFyIEl0ZXJhYmxlRGlmZmVySGVscGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSXRlcmFibGVEaWZmZXJIZWxwZXIoX2RpZmZlcnMpIHtcclxuICAgICAgICB0aGlzLl9kaWZmZXJzID0gX2RpZmZlcnM7XHJcbiAgICAgICAgdGhpcy5fcHJvcGVydHlEaWZmZXJzID0ge307XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZURpZmZlckhlbHBlci5wcm90b3R5cGUuc2V0SG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XHJcbiAgICAgICAgdGhpcy5faG9zdCA9IGhvc3Q7XHJcbiAgICB9O1xyXG4gICAgSXRlcmFibGVEaWZmZXJIZWxwZXIucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKHByb3AsIGNoYW5nZXMpIHtcclxuICAgICAgICBpZiAocHJvcCBpbiBjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNoYW5nZXNbcHJvcF0uY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwU2luZ2xlKHByb3AsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSXRlcmFibGVEaWZmZXJIZWxwZXIucHJvdG90eXBlLnNldHVwU2luZ2xlID0gZnVuY3Rpb24gKHByb3AsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fcHJvcGVydHlEaWZmZXJzW3Byb3BdKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BlcnR5RGlmZmVyc1twcm9wXSA9IHRoaXMuX2RpZmZlcnMuZmluZCh2YWx1ZSkuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fcHJvcGVydHlEaWZmZXJzW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgSXRlcmFibGVEaWZmZXJIZWxwZXIucHJvdG90eXBlLmdldENoYW5nZXMgPSBmdW5jdGlvbiAocHJvcCwgdmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5fcHJvcGVydHlEaWZmZXJzW3Byb3BdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0eURpZmZlcnNbcHJvcF0uZGlmZih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEl0ZXJhYmxlRGlmZmVySGVscGVyLnByb3RvdHlwZS5jaGVja0NoYW5nZWRPcHRpb25zID0gZnVuY3Rpb24gKHByb3BOYW1lLCBob3N0VmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faG9zdC5jaGFuZ2VkT3B0aW9uc1twcm9wTmFtZV0gPT09IGhvc3RWYWx1ZTtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICBJdGVyYWJsZURpZmZlckhlbHBlci5wcm90b3R5cGUuZG9DaGVjayA9IGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnR5RGlmZmVyc1twcm9wXSkge1xyXG4gICAgICAgICAgICB2YXIgaG9zdFZhbHVlID0gdGhpcy5faG9zdFtwcm9wXSwgaXNDaGFuZ2VkT3B0aW9uID0gdGhpcy5jaGVja0NoYW5nZWRPcHRpb25zKHByb3AsIGhvc3RWYWx1ZSk7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2VzID0gdGhpcy5nZXRDaGFuZ2VzKHByb3AsIGhvc3RWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzICYmIHRoaXMuX2hvc3QuaW5zdGFuY2UgJiYgIWlzQ2hhbmdlZE9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC5sb2NrV2lkZ2V0VXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Lmluc3RhbmNlLm9wdGlvbihwcm9wLCBob3N0VmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEl0ZXJhYmxlRGlmZmVySGVscGVyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xyXG4gICAgICAgIHsgdHlwZTogSXRlcmFibGVEaWZmZXJzIH1cclxuICAgIF07IH07XHJcbiAgICBJdGVyYWJsZURpZmZlckhlbHBlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtJdGVyYWJsZURpZmZlcnNdKVxyXG4gICAgXSwgSXRlcmFibGVEaWZmZXJIZWxwZXIpO1xyXG4gICAgcmV0dXJuIEl0ZXJhYmxlRGlmZmVySGVscGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBJdGVyYWJsZURpZmZlckhlbHBlciB9O1xyIl19