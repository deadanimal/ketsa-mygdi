/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:use-input-property-decorator */
import { Directive, NgModule, TemplateRef, ViewContainerRef, Input, Renderer2, NgZone, EmbeddedViewRef } from '@angular/core';
import { DxTemplateHost } from './template-host';
import { getElement } from './utils';
import * as events from 'devextreme/events';
import * as ɵngcc0 from '@angular/core';
export var DX_TEMPLATE_WRAPPER_CLASS = 'dx-template-wrapper';
var RenderData = /** @class */ (function () {
    function RenderData() {
    }
    return RenderData;
}());
export { RenderData };
var DxTemplateDirective = /** @class */ (function () {
    function DxTemplateDirective(templateRef, viewContainerRef, templateHost, renderer, zone) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.renderer = renderer;
        this.zone = zone;
        templateHost.setTemplate(this);
    }
    Object.defineProperty(DxTemplateDirective.prototype, "dxTemplateOf", {
        set: function (value) {
            this.name = value;
        },
        enumerable: true,
        configurable: true
    });
    ;
    DxTemplateDirective.prototype.renderTemplate = function (renderData) {
        var _this = this;
        var childView = this.viewContainerRef.createEmbeddedView(this.templateRef, {
            '$implicit': renderData.model,
            index: renderData.index
        });
        var container = getElement(renderData.container);
        if (renderData.container) {
            childView.rootNodes.forEach(function (element) {
                _this.renderer.appendChild(container, element);
            });
        }
        return childView;
    };
    DxTemplateDirective.prototype.render = function (renderData) {
        var _this = this;
        var childView;
        if (this.zone.isStable) {
            childView = this.zone.run(function () {
                return _this.renderTemplate(renderData);
            });
        }
        else {
            childView = this.renderTemplate(renderData);
            // =========== WORKAROUND =============
            // https://github.com/angular/angular/issues/12243
            childView['detectChanges']();
            // =========== /WORKAROUND =============
        }
        childView.rootNodes.forEach(function (element) {
            if (element.nodeType === 1) {
                _this.renderer.addClass(element, DX_TEMPLATE_WRAPPER_CLASS);
            }
            events.one(element, 'dxremove', function (_a, params) {
                if (!params || !params._angularIntegration) {
                    childView.destroy();
                }
            });
        });
        return childView.rootNodes;
    };
    DxTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: DxTemplateHost },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxTemplateDirective.prototype, "dxTemplateOf", null);
    DxTemplateDirective = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            DxTemplateHost,
            Renderer2,
            NgZone])
    ], DxTemplateDirective);
DxTemplateDirective.ɵfac = function DxTemplateDirective_Factory(t) { return new (t || DxTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DxTemplateDirective, selectors: [["", "dxTemplate", ""]], inputs: { dxTemplateOf: "dxTemplateOf" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[dxTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: DxTemplateHost }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { dxTemplateOf: [{
            type: Input
        }] }); })();
    return DxTemplateDirective;
}());
export { DxTemplateDirective };
var DxTemplateModule = /** @class */ (function () {
    function DxTemplateModule() {
    }
DxTemplateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxTemplateModule });
DxTemplateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxTemplateModule_Factory(t) { return new (t || DxTemplateModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxTemplateModule, { declarations: [DxTemplateDirective], exports: [DxTemplateDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxTemplateModule, [{
        type: NgModule,
        args: [{
                declarations: [DxTemplateDirective],
                exports: [DxTemplateDirective]
            }]
    }], function () { return []; }, null); })();
    return DxTemplateModule;
}());
export { DxTemplateModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lLWFuZ3VsYXIvZXNtNS9jb3JlL3RlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhDQTRFOEMsQUFJdkM7Ozs7Ozs7Ozs7Ozs7OztvQkFLcUI7Ozs7OztLQU12Qjs7Ozs7Ozs7OztnREFNb0IiLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBOZ01vZHVsZSwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIElucHV0LCBSZW5kZXJlcjIsIE5nWm9uZSwgRW1iZWRkZWRWaWV3UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4VGVtcGxhdGVIb3N0IH0gZnJvbSAnLi90ZW1wbGF0ZS1ob3N0JztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudCB9IGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSAnZGV2ZXh0cmVtZS9ldmVudHMnO1xyXG5leHBvcnQgdmFyIERYX1RFTVBMQVRFX1dSQVBQRVJfQ0xBU1MgPSAnZHgtdGVtcGxhdGUtd3JhcHBlcic7XHJcbnZhciBSZW5kZXJEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVuZGVyRGF0YSgpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBSZW5kZXJEYXRhO1xyXG59KCkpO1xyXG5leHBvcnQgeyBSZW5kZXJEYXRhIH07XHJcbnZhciBEeFRlbXBsYXRlRGlyZWN0aXZlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHhUZW1wbGF0ZURpcmVjdGl2ZSh0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lclJlZiwgdGVtcGxhdGVIb3N0LCByZW5kZXJlciwgem9uZSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZjtcclxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYgPSB2aWV3Q29udGFpbmVyUmVmO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgICAgICB0aGlzLnpvbmUgPSB6b25lO1xyXG4gICAgICAgIHRlbXBsYXRlSG9zdC5zZXRUZW1wbGF0ZSh0aGlzKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEeFRlbXBsYXRlRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJkeFRlbXBsYXRlT2ZcIiwge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgRHhUZW1wbGF0ZURpcmVjdGl2ZS5wcm90b3R5cGUucmVuZGVyVGVtcGxhdGUgPSBmdW5jdGlvbiAocmVuZGVyRGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNoaWxkVmlldyA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwge1xyXG4gICAgICAgICAgICAnJGltcGxpY2l0JzogcmVuZGVyRGF0YS5tb2RlbCxcclxuICAgICAgICAgICAgaW5kZXg6IHJlbmRlckRhdGEuaW5kZXhcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gZ2V0RWxlbWVudChyZW5kZXJEYXRhLmNvbnRhaW5lcik7XHJcbiAgICAgICAgaWYgKHJlbmRlckRhdGEuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNoaWxkVmlldy5yb290Tm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGlsZFZpZXc7XHJcbiAgICB9O1xyXG4gICAgRHhUZW1wbGF0ZURpcmVjdGl2ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckRhdGEpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjaGlsZFZpZXc7XHJcbiAgICAgICAgaWYgKHRoaXMuem9uZS5pc1N0YWJsZSkge1xyXG4gICAgICAgICAgICBjaGlsZFZpZXcgPSB0aGlzLnpvbmUucnVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJUZW1wbGF0ZShyZW5kZXJEYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjaGlsZFZpZXcgPSB0aGlzLnJlbmRlclRlbXBsYXRlKHJlbmRlckRhdGEpO1xyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PSBXT1JLQVJPVU5EID09PT09PT09PT09PT1cclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTIyNDNcclxuICAgICAgICAgICAgY2hpbGRWaWV3WydkZXRlY3RDaGFuZ2VzJ10oKTtcclxuICAgICAgICAgICAgLy8gPT09PT09PT09PT0gL1dPUktBUk9VTkQgPT09PT09PT09PT09PVxyXG4gICAgICAgIH1cclxuICAgICAgICBjaGlsZFZpZXcucm9vdE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlcmVyLmFkZENsYXNzKGVsZW1lbnQsIERYX1RFTVBMQVRFX1dSQVBQRVJfQ0xBU1MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV2ZW50cy5vbmUoZWxlbWVudCwgJ2R4cmVtb3ZlJywgZnVuY3Rpb24gKF9hLCBwYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcGFyYW1zIHx8ICFwYXJhbXMuX2FuZ3VsYXJJbnRlZ3JhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkVmlldy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjaGlsZFZpZXcucm9vdE5vZGVzO1xyXG4gICAgfTtcclxuICAgIER4VGVtcGxhdGVEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiBUZW1wbGF0ZVJlZiB9LFxyXG4gICAgICAgIHsgdHlwZTogVmlld0NvbnRhaW5lclJlZiB9LFxyXG4gICAgICAgIHsgdHlwZTogRHhUZW1wbGF0ZUhvc3QgfSxcclxuICAgICAgICB7IHR5cGU6IFJlbmRlcmVyMiB9LFxyXG4gICAgICAgIHsgdHlwZTogTmdab25lIH1cclxuICAgIF07IH07XHJcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIElucHV0KCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIER4VGVtcGxhdGVEaXJlY3RpdmUucHJvdG90eXBlLCBcImR4VGVtcGxhdGVPZlwiLCBudWxsKTtcclxuICAgIER4VGVtcGxhdGVEaXJlY3RpdmUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIERpcmVjdGl2ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnW2R4VGVtcGxhdGVdJ1xyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtUZW1wbGF0ZVJlZixcclxuICAgICAgICAgICAgVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgRHhUZW1wbGF0ZUhvc3QsXHJcbiAgICAgICAgICAgIFJlbmRlcmVyMixcclxuICAgICAgICAgICAgTmdab25lXSlcclxuICAgIF0sIER4VGVtcGxhdGVEaXJlY3RpdmUpO1xyXG4gICAgcmV0dXJuIER4VGVtcGxhdGVEaXJlY3RpdmU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IER4VGVtcGxhdGVEaXJlY3RpdmUgfTtcclxudmFyIER4VGVtcGxhdGVNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEeFRlbXBsYXRlTW9kdWxlKCkge1xyXG4gICAgfVxyXG4gICAgRHhUZW1wbGF0ZU1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgTmdNb2R1bGUoe1xyXG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtEeFRlbXBsYXRlRGlyZWN0aXZlXSxcclxuICAgICAgICAgICAgZXhwb3J0czogW0R4VGVtcGxhdGVEaXJlY3RpdmVdXHJcbiAgICAgICAgfSlcclxuICAgIF0sIER4VGVtcGxhdGVNb2R1bGUpO1xyXG4gICAgcmV0dXJuIER4VGVtcGxhdGVNb2R1bGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IER4VGVtcGxhdGVNb2R1bGUgfTtcciJdfQ==