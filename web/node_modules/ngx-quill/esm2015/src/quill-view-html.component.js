import { __decorate, __param } from "tslib";
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/platform-browser';
let QuillViewHTMLComponent = class QuillViewHTMLComponent {
    constructor(sanitizer, config) {
        this.sanitizer = sanitizer;
        this.config = config;
        this.innerHTML = '';
        this.themeClass = 'ql-snow';
        this.content = '';
    }
    ngOnChanges(changes) {
        if (changes.theme) {
            const theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');
            this.themeClass = `ql-${theme} ngx-quill-view-html`;
        }
        else if (!this.theme) {
            const theme = this.config.theme ? this.config.theme : 'snow';
            this.themeClass = `ql-${theme} ngx-quill-view-html`;
        }
        if (changes.content) {
            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);
        }
    }
};
QuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) { return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN)); };
QuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewHTMLComponent, selectors: [["quill-view-html"]], inputs: { content: "content", theme: "theme" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], decls: 2, vars: 2, consts: [[1, "ql-container", 3, "ngClass"], [1, "ql-editor", 3, "innerHTML"]], template: function QuillViewHTMLComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.themeClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);
    } }, directives: [ɵngcc1.NgClass], styles: ["\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n"], encapsulation: 2 });
QuillViewHTMLComponent.ctorParameters = () => [
    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
];
__decorate([
    Input()
], QuillViewHTMLComponent.prototype, "content", void 0);
__decorate([
    Input()
], QuillViewHTMLComponent.prototype, "theme", void 0);
QuillViewHTMLComponent = __decorate([ __param(0, Inject(DomSanitizer)),
    __param(1, Inject(QUILL_CONFIG_TOKEN))
], QuillViewHTMLComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view-html',
                template: `
  <div class="ql-container" [ngClass]="themeClass">
    <div class="ql-editor" [innerHTML]="innerHTML">
    </div>
  </div>
`,
                styles: [`
.ql-container.ngx-quill-view-html {
  border: 0;
}
`]
            }]
    }], function () { return [{ type: ɵngcc2.DomSanitizer, decorators: [{
                type: Inject,
                args: [DomSanitizer]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, { content: [{
            type: Input
        }], theme: [{
            type: Input
        }] }); })();
export { QuillViewHTMLComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9uZ3gtcXVpbGwvZXNtMjAxNS9zcmMvcXVpbGwtdmlldy1odG1sLmNvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lJQXFCRTs7Ozs7Ozs7Ozs7cUNBV21DLEFBZ0JsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUV3QiIsImZpbGUiOiJxdWlsbC12aWV3LWh0bWwuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSwgX19wYXJhbSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgUVVJTExfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5sZXQgUXVpbGxWaWV3SFRNTENvbXBvbmVudCA9IGNsYXNzIFF1aWxsVmlld0hUTUxDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNhbml0aXplciwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2FuaXRpemVyID0gc2FuaXRpemVyO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgdGhpcy50aGVtZUNsYXNzID0gJ3FsLXNub3cnO1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSAnJztcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlcy50aGVtZSkge1xuICAgICAgICAgICAgY29uc3QgdGhlbWUgPSBjaGFuZ2VzLnRoZW1lLmN1cnJlbnRWYWx1ZSB8fCAodGhpcy5jb25maWcudGhlbWUgPyB0aGlzLmNvbmZpZy50aGVtZSA6ICdzbm93Jyk7XG4gICAgICAgICAgICB0aGlzLnRoZW1lQ2xhc3MgPSBgcWwtJHt0aGVtZX0gbmd4LXF1aWxsLXZpZXctaHRtbGA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMudGhlbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoZW1lID0gdGhpcy5jb25maWcudGhlbWUgPyB0aGlzLmNvbmZpZy50aGVtZSA6ICdzbm93JztcbiAgICAgICAgICAgIHRoaXMudGhlbWVDbGFzcyA9IGBxbC0ke3RoZW1lfSBuZ3gtcXVpbGwtdmlldy1odG1sYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlcy5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKGNoYW5nZXMuY29udGVudC5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblF1aWxsVmlld0hUTUxDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBEb21TYW5pdGl6ZXIsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0RvbVNhbml0aXplcixdIH1dIH0sXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW1FVSUxMX0NPTkZJR19UT0tFTixdIH1dIH1cbl07XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBRdWlsbFZpZXdIVE1MQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjb250ZW50XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBRdWlsbFZpZXdIVE1MQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0aGVtZVwiLCB2b2lkIDApO1xuUXVpbGxWaWV3SFRNTENvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuICAgIENvbXBvbmVudCh7XG4gICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgIHNlbGVjdG9yOiAncXVpbGwtdmlldy1odG1sJyxcbiAgICAgICAgdGVtcGxhdGU6IGBcbiAgPGRpdiBjbGFzcz1cInFsLWNvbnRhaW5lclwiIFtuZ0NsYXNzXT1cInRoZW1lQ2xhc3NcIj5cbiAgICA8ZGl2IGNsYXNzPVwicWwtZWRpdG9yXCIgW2lubmVySFRNTF09XCJpbm5lckhUTUxcIj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5gLFxuICAgICAgICBzdHlsZXM6IFtgXG4ucWwtY29udGFpbmVyLm5neC1xdWlsbC12aWV3LWh0bWwge1xuICBib3JkZXI6IDA7XG59XG5gXVxuICAgIH0pLFxuICAgIF9fcGFyYW0oMCwgSW5qZWN0KERvbVNhbml0aXplcikpLFxuICAgIF9fcGFyYW0oMSwgSW5qZWN0KFFVSUxMX0NPTkZJR19UT0tFTikpXG5dLCBRdWlsbFZpZXdIVE1MQ29tcG9uZW50KTtcbmV4cG9ydCB7IFF1aWxsVmlld0hUTUxDb21wb25lbnQgfTtcbiJdfQ==