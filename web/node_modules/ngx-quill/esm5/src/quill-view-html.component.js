import { __decorate, __param } from "tslib";
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/platform-browser';
var QuillViewHTMLComponent = /** @class */ (function () {
    function QuillViewHTMLComponent(sanitizer, config) {
        this.sanitizer = sanitizer;
        this.config = config;
        this.innerHTML = '';
        this.themeClass = 'ql-snow';
        this.content = '';
    }
    QuillViewHTMLComponent.prototype.ngOnChanges = function (changes) {
        if (changes.theme) {
            var theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');
            this.themeClass = "ql-" + theme + " ngx-quill-view-html";
        }
        else if (!this.theme) {
            var theme = this.config.theme ? this.config.theme : 'snow';
            this.themeClass = "ql-" + theme + " ngx-quill-view-html";
        }
        if (changes.content) {
            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);
        }
    };
    QuillViewHTMLComponent.ctorParameters = function () { return [
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillViewHTMLComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewHTMLComponent.prototype, "theme", void 0);
    QuillViewHTMLComponent = __decorate([ __param(0, Inject(DomSanitizer)),
        __param(1, Inject(QUILL_CONFIG_TOKEN))
    ], QuillViewHTMLComponent);
QuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) { return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN)); };
QuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewHTMLComponent, selectors: [["quill-view-html"]], inputs: { content: "content", theme: "theme" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], decls: 2, vars: 2, consts: [[1, "ql-container", 3, "ngClass"], [1, "ql-editor", 3, "innerHTML"]], template: function QuillViewHTMLComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.themeClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);
    } }, directives: [ɵngcc1.NgClass], styles: ["\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view-html',
                template: "\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n",
                styles: ["\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n"]
            }]
    }], function () { return [{ type: ɵngcc2.DomSanitizer, decorators: [{
                type: Inject,
                args: [DomSanitizer]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, { content: [{
            type: Input
        }], theme: [{
            type: Input
        }] }); })();
    return QuillViewHTMLComponent;
}());
export { QuillViewHTMLComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9uZ3gtcXVpbGwvZXNtNS9zcmMvcXVpbGwtdmlldy1odG1sLmNvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQStCeUMsQUFPbEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRXdCIiwiZmlsZSI6InF1aWxsLXZpZXctaHRtbC5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlLCBfX3BhcmFtIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBRVUlMTF9DT05GSUdfVE9LRU4gfSBmcm9tICcuL3F1aWxsLWVkaXRvci5pbnRlcmZhY2VzJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbnZhciBRdWlsbFZpZXdIVE1MQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1aWxsVmlld0hUTUxDb21wb25lbnQoc2FuaXRpemVyLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5zYW5pdGl6ZXIgPSBzYW5pdGl6ZXI7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0aGlzLnRoZW1lQ2xhc3MgPSAncWwtc25vdyc7XG4gICAgICAgIHRoaXMuY29udGVudCA9ICcnO1xuICAgIH1cbiAgICBRdWlsbFZpZXdIVE1MQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLnRoZW1lKSB7XG4gICAgICAgICAgICB2YXIgdGhlbWUgPSBjaGFuZ2VzLnRoZW1lLmN1cnJlbnRWYWx1ZSB8fCAodGhpcy5jb25maWcudGhlbWUgPyB0aGlzLmNvbmZpZy50aGVtZSA6ICdzbm93Jyk7XG4gICAgICAgICAgICB0aGlzLnRoZW1lQ2xhc3MgPSBcInFsLVwiICsgdGhlbWUgKyBcIiBuZ3gtcXVpbGwtdmlldy1odG1sXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMudGhlbWUpIHtcbiAgICAgICAgICAgIHZhciB0aGVtZSA9IHRoaXMuY29uZmlnLnRoZW1lID8gdGhpcy5jb25maWcudGhlbWUgOiAnc25vdyc7XG4gICAgICAgICAgICB0aGlzLnRoZW1lQ2xhc3MgPSBcInFsLVwiICsgdGhlbWUgKyBcIiBuZ3gtcXVpbGwtdmlldy1odG1sXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChjaGFuZ2VzLmNvbnRlbnQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUXVpbGxWaWV3SFRNTENvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBEb21TYW5pdGl6ZXIsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0RvbVNhbml0aXplcixdIH1dIH0sXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtRVUlMTF9DT05GSUdfVE9LRU4sXSB9XSB9XG4gICAgXTsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFF1aWxsVmlld0hUTUxDb21wb25lbnQucHJvdG90eXBlLCBcImNvbnRlbnRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFF1aWxsVmlld0hUTUxDb21wb25lbnQucHJvdG90eXBlLCBcInRoZW1lXCIsIHZvaWQgMCk7XG4gICAgUXVpbGxWaWV3SFRNTENvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBDb21wb25lbnQoe1xuICAgICAgICAgICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICAgICAgICAgIHNlbGVjdG9yOiAncXVpbGwtdmlldy1odG1sJyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgPGRpdiBjbGFzcz1cXFwicWwtY29udGFpbmVyXFxcIiBbbmdDbGFzc109XFxcInRoZW1lQ2xhc3NcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJxbC1lZGl0b3JcXFwiIFtpbm5lckhUTUxdPVxcXCJpbm5lckhUTUxcXFwiPlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcblwiLFxuICAgICAgICAgICAgc3R5bGVzOiBbXCJcXG4ucWwtY29udGFpbmVyLm5neC1xdWlsbC12aWV3LWh0bWwge1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cIl1cbiAgICAgICAgfSksXG4gICAgICAgIF9fcGFyYW0oMCwgSW5qZWN0KERvbVNhbml0aXplcikpLFxuICAgICAgICBfX3BhcmFtKDEsIEluamVjdChRVUlMTF9DT05GSUdfVE9LRU4pKVxuICAgIF0sIFF1aWxsVmlld0hUTUxDb21wb25lbnQpO1xuICAgIHJldHVybiBRdWlsbFZpZXdIVE1MQ29tcG9uZW50O1xufSgpKTtcbmV4cG9ydCB7IFF1aWxsVmlld0hUTUxDb21wb25lbnQgfTtcbiJdfQ==