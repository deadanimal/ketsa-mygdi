import * as tslib_1 from "tslib";
// angular
import { Component, forwardRef, HostBinding, Input, Output, EventEmitter, Renderer2, ViewChild, ViewChildren, ContentChildren, ContentChild, TemplateRef, QueryList } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { debounceTime, filter, map, first } from 'rxjs/operators';
// ng2-tag-input
import { TagInputAccessor } from '../../core/accessor';
import { listen } from '../../core/helpers/listen';
import * as constants from '../../core/constants';
import { DragProvider } from '../../core/providers/drag-provider';
import { TagInputForm } from '../tag-input-form/tag-input-form.component';
import { TagComponent } from '../tag/tag.component';
import { animations } from './animations';
import { defaults } from '../../defaults';
import { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';
// angular universal hacks
/* tslint:disable-next-line */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../tag-input-form/tag-input-form.component';
import * as ɵngcc3 from '../tag/tag.component';

function TagInputComponent_tag_2_Template(rf, ctx) { if (rf & 1) {
    const _r369 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tag", 6);
    ɵngcc0.ɵɵlistener("onSelect", function TagInputComponent_tag_2_Template_tag_onSelect_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const item_r366 = ctx.$implicit; const ctx_r368 = ɵngcc0.ɵɵnextContext(); return ctx_r368.selectItem(item_r366); })("onRemove", function TagInputComponent_tag_2_Template_tag_onRemove_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const item_r366 = ctx.$implicit; const i_r367 = ctx.index; const ctx_r370 = ɵngcc0.ɵɵnextContext(); return ctx_r370.onRemoveRequested(item_r366, i_r367); })("onKeyDown", function TagInputComponent_tag_2_Template_tag_onKeyDown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const ctx_r371 = ɵngcc0.ɵɵnextContext(); return ctx_r371.handleKeydown($event); })("onTagEdited", function TagInputComponent_tag_2_Template_tag_onTagEdited_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const ctx_r372 = ɵngcc0.ɵɵnextContext(); return ctx_r372.updateEditedTag($event); })("onBlur", function TagInputComponent_tag_2_Template_tag_onBlur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const i_r367 = ctx.index; const ctx_r373 = ɵngcc0.ɵɵnextContext(); return ctx_r373.onTagBlurred($event, i_r367); })("dragstart", function TagInputComponent_tag_2_Template_tag_dragstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const item_r366 = ctx.$implicit; const i_r367 = ctx.index; const ctx_r374 = ɵngcc0.ɵɵnextContext(); return ctx_r374.dragZone ? ctx_r374.onDragStarted($event, item_r366, i_r367) : undefined; })("drop", function TagInputComponent_tag_2_Template_tag_drop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const i_r367 = ctx.index; const ctx_r375 = ɵngcc0.ɵɵnextContext(); return ctx_r375.dragZone ? ctx_r375.onTagDropped($event, i_r367) : undefined; })("dragenter", function TagInputComponent_tag_2_Template_tag_dragenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const ctx_r376 = ɵngcc0.ɵɵnextContext(); return ctx_r376.dragZone ? ctx_r376.onDragOver($event) : undefined; })("dragover", function TagInputComponent_tag_2_Template_tag_dragover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const i_r367 = ctx.index; const ctx_r377 = ɵngcc0.ɵɵnextContext(); return ctx_r377.dragZone ? ctx_r377.onDragOver($event, i_r367) : undefined; })("dragleave", function TagInputComponent_tag_2_Template_tag_dragleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r369); const ctx_r378 = ɵngcc0.ɵɵnextContext(); return ctx_r378.dragZone ? ctx_r378.dragProvider.onDragEnd() : undefined; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r366 = ctx.$implicit;
    const i_r367 = ctx.index;
    const ctx_r363 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("draggable", ctx_r363.editable);
    ɵngcc0.ɵɵproperty("canAddTag", ctx_r363.isTagValid)("disabled", ctx_r363.disable)("@animation", ctx_r363.animationMetadata)("hasRipple", ctx_r363.ripple)("index", i_r367)("removable", ctx_r363.removable)("editable", ctx_r363.editable)("displayBy", ctx_r363.displayBy)("identifyBy", ctx_r363.identifyBy)("template", !!ctx_r363.hasCustomTemplate() ? ctx_r363.templates.first : undefined)("draggable", ctx_r363.dragZone)("model", item_r366);
    ɵngcc0.ɵɵattribute("tabindex", 0);
} }
function TagInputComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 7);
} }
function TagInputComponent_div_6_p_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 10);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r380 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(error_r380);
} }
function TagInputComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, TagInputComponent_div_6_p_1_Template, 3, 1, "p", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r365 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r365.theme);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r365.errors);
} }
const _c0 = ["*"];
const DragEvent = window.DragEvent;
const CUSTOM_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TagInputComponent),
    multi: true
};
let TagInputComponent = class TagInputComponent extends TagInputAccessor {
    constructor(renderer, dragProvider) {
        super();
        this.renderer = renderer;
        this.dragProvider = dragProvider;
        /**
         * @name separatorKeys
         * @desc keyboard keys with which a user can separate items
         */
        this.separatorKeys = defaults.tagInput.separatorKeys;
        /**
         * @name separatorKeyCodes
         * @desc keyboard key codes with which a user can separate items
         */
        this.separatorKeyCodes = defaults.tagInput.separatorKeyCodes;
        /**
         * @name placeholder
         * @desc the placeholder of the input text
         */
        this.placeholder = defaults.tagInput.placeholder;
        /**
         * @name secondaryPlaceholder
         * @desc placeholder to appear when the input is empty
         */
        this.secondaryPlaceholder = defaults.tagInput.secondaryPlaceholder;
        /**
         * @name maxItems
         * @desc maximum number of items that can be added
         */
        this.maxItems = defaults.tagInput.maxItems;
        /**
         * @name validators
         * @desc array of Validators that are used to validate the tag before it gets appended to the list
         */
        this.validators = defaults.tagInput.validators;
        /**
         * @name asyncValidators
         * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list
         */
        this.asyncValidators = defaults.tagInput.asyncValidators;
        /**
        * - if set to true, it will only possible to add items from the autocomplete
        * @name onlyFromAutocomplete
        */
        this.onlyFromAutocomplete = defaults.tagInput.onlyFromAutocomplete;
        /**
         * @name errorMessages
         */
        this.errorMessages = defaults.tagInput.errorMessages;
        /**
         * @name theme
         */
        this.theme = defaults.tagInput.theme;
        /**
         * @name onTextChangeDebounce
         */
        this.onTextChangeDebounce = defaults.tagInput.onTextChangeDebounce;
        /**
         * - custom id assigned to the input
         * @name id
         */
        this.inputId = defaults.tagInput.inputId;
        /**
         * - custom class assigned to the input
         */
        this.inputClass = defaults.tagInput.inputClass;
        /**
         * - option to clear text input when the form is blurred
         * @name clearOnBlur
         */
        this.clearOnBlur = defaults.tagInput.clearOnBlur;
        /**
         * - hideForm
         * @name clearOnBlur
         */
        this.hideForm = defaults.tagInput.hideForm;
        /**
         * @name addOnBlur
         */
        this.addOnBlur = defaults.tagInput.addOnBlur;
        /**
         * @name addOnPaste
         */
        this.addOnPaste = defaults.tagInput.addOnPaste;
        /**
         * - pattern used with the native method split() to separate patterns in the string pasted
         * @name pasteSplitPattern
         */
        this.pasteSplitPattern = defaults.tagInput.pasteSplitPattern;
        /**
         * @name blinkIfDupe
         */
        this.blinkIfDupe = defaults.tagInput.blinkIfDupe;
        /**
         * @name removable
         */
        this.removable = defaults.tagInput.removable;
        /**
         * @name editable
         */
        this.editable = defaults.tagInput.editable;
        /**
         * @name allowDupes
         */
        this.allowDupes = defaults.tagInput.allowDupes;
        /**
         * @description if set to true, the newly added tags will be added as strings, and not objects
         * @name modelAsStrings
         */
        this.modelAsStrings = defaults.tagInput.modelAsStrings;
        /**
         * @name trimTags
         */
        this.trimTags = defaults.tagInput.trimTags;
        /**
         * @name ripple
         */
        this.ripple = defaults.tagInput.ripple;
        /**
         * @name tabindex
         * @desc pass through the specified tabindex to the input
         */
        this.tabindex = defaults.tagInput.tabIndex;
        /**
         * @name disable
         */
        this.disable = defaults.tagInput.disable;
        /**
         * @name dragZone
         */
        this.dragZone = defaults.tagInput.dragZone;
        /**
         * @name onRemoving
         */
        this.onRemoving = defaults.tagInput.onRemoving;
        /**
         * @name onAdding
         */
        this.onAdding = defaults.tagInput.onAdding;
        /**
         * @name animationDuration
         */
        this.animationDuration = defaults.tagInput.animationDuration;
        /**
         * @name onAdd
         * @desc event emitted when adding a new item
         */
        this.onAdd = new EventEmitter();
        /**
         * @name onRemove
         * @desc event emitted when removing an existing item
         */
        this.onRemove = new EventEmitter();
        /**
         * @name onSelect
         * @desc event emitted when selecting an item
         */
        this.onSelect = new EventEmitter();
        /**
         * @name onFocus
         * @desc event emitted when the input is focused
         */
        this.onFocus = new EventEmitter();
        /**
         * @name onFocus
         * @desc event emitted when the input is blurred
         */
        this.onBlur = new EventEmitter();
        /**
         * @name onTextChange
         * @desc event emitted when the input value changes
         */
        this.onTextChange = new EventEmitter();
        /**
         * - output triggered when text is pasted in the form
         * @name onPaste
         */
        this.onPaste = new EventEmitter();
        /**
         * - output triggered when tag entered is not valid
         * @name onValidationError
         */
        this.onValidationError = new EventEmitter();
        /**
         * - output triggered when tag is edited
         * @name onTagEdited
         */
        this.onTagEdited = new EventEmitter();
        /**
         * @name isLoading
         */
        this.isLoading = false;
        /**
         * @name listeners
         * @desc array of events that get fired using @fireEvents
         */
        this.listeners = {
            [constants.KEYDOWN]: [],
            [constants.KEYUP]: []
        };
        /**
         * @description emitter for the 2-way data binding inputText value
         * @name inputTextChange
         */
        this.inputTextChange = new EventEmitter();
        /**
         * @description private variable to bind get/set
         * @name inputTextValue
         */
        this.inputTextValue = '';
        this.errors = [];
        /**
         * @name appendTag
         * @param tag {TagModel}
         */
        this.appendTag = (tag, index = this.items.length) => {
            const items = this.items;
            const model = this.modelAsStrings ? tag[this.identifyBy] : tag;
            this.items = [
                ...items.slice(0, index),
                model,
                ...items.slice(index, items.length)
            ];
        };
        /**
         * @name createTag
         * @param model
         */
        this.createTag = (model) => {
            const trim = (val, key) => {
                return typeof val === 'string' ? val.trim() : val[key];
            };
            return Object.assign({}, typeof model !== 'string' ? model : {}, { [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model, [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model });
        };
        /**
         *
         * @param tag
         * @param isFromAutocomplete
         */
        this.isTagValid = (tag, fromAutocomplete = false) => {
            const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;
            const value = this.getItemDisplay(tag).trim();
            if (selectedItem && !fromAutocomplete || !value) {
                return false;
            }
            const dupe = this.findDupe(tag, fromAutocomplete);
            // if so, give a visual cue and return false
            if (!this.allowDupes && dupe && this.blinkIfDupe) {
                const model = this.tags.find(item => {
                    return this.getItemValue(item.model) === this.getItemValue(dupe);
                });
                if (model) {
                    model.blink();
                }
            }
            const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;
            const assertions = [
                // 1. there must be no dupe OR dupes are allowed
                !dupe || this.allowDupes,
                // 2. check max items has not been reached
                !this.maxItemsReached,
                // 3. check item comes from autocomplete or onlyFromAutocomplete is false
                ((isFromAutocomplete) || !this.onlyFromAutocomplete)
            ];
            return assertions.filter(Boolean).length === assertions.length;
        };
        /**
         * @name onPasteCallback
         * @param data
         */
        this.onPasteCallback = (data) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const getText = () => {
                const isIE = Boolean(window.clipboardData);
                const clipboardData = isIE ? (window.clipboardData) : data.clipboardData;
                const type = isIE ? 'Text' : 'text/plain';
                return clipboardData === null ? '' : clipboardData.getData(type) || '';
            };
            const text = getText();
            const requests = text
                .split(this.pasteSplitPattern)
                .map(item => {
                const tag = this.createTag(item);
                this.setInputValue(tag[this.displayBy]);
                return this.onAddingRequested(false, tag);
            });
            const resetInput = () => setTimeout(() => this.setInputValue(''), 50);
            Promise.all(requests).then(() => {
                this.onPaste.emit(text);
                resetInput();
            })
                .catch(resetInput);
        });
    }
    /**
     * @name inputText
     */
    get inputText() {
        return this.inputTextValue;
    }
    /**
     * @name inputText
     * @param text
     */
    set inputText(text) {
        this.inputTextValue = text;
        this.inputTextChange.emit(text);
    }
    /**
     * @desc removes the tab index if it is set - it will be passed through to the input
     * @name tabindexAttr
     */
    get tabindexAttr() {
        return this.tabindex !== '' ? '-1' : '';
    }
    /**
     * @name ngAfterViewInit
     */
    ngAfterViewInit() {
        // set up listeners
        this.setUpKeypressListeners();
        this.setupSeparatorKeysListener();
        this.setUpInputKeydownListeners();
        if (this.onTextChange.observers.length) {
            this.setUpTextChangeSubscriber();
        }
        // if clear on blur is set to true, subscribe to the event and clear the text's form
        if (this.clearOnBlur || this.addOnBlur) {
            this.setUpOnBlurSubscriber();
        }
        // if addOnPaste is set to true, register the handler and add items
        if (this.addOnPaste) {
            this.setUpOnPasteListener();
        }
        const statusChanges$ = this.inputForm.form.statusChanges;
        statusChanges$.pipe(filter((status) => status !== 'PENDING')).subscribe(() => {
            this.errors = this.inputForm.getErrorMessages(this.errorMessages);
        });
        this.isProgressBarVisible$ = statusChanges$.pipe(map((status) => {
            return status === 'PENDING' || this.isLoading;
        }));
        // if hideForm is set to true, remove the input
        if (this.hideForm) {
            this.inputForm.destroy();
        }
    }
    /**
     * @name ngOnInit
     */
    ngOnInit() {
        // if the number of items specified in the model is > of the value of maxItems
        // degrade gracefully and let the max number of items to be the number of items in the model
        // though, warn the user.
        const hasReachedMaxItems = this.maxItems !== undefined &&
            this.items &&
            this.items.length > this.maxItems;
        if (hasReachedMaxItems) {
            this.maxItems = this.items.length;
            console.warn(constants.MAX_ITEMS_WARNING);
        }
        // Setting editable to false to fix problem with tags in IE still being editable when
        // onlyFromAutocomplete is true
        this.editable = this.onlyFromAutocomplete ? false : this.editable;
        this.setAnimationMetadata();
    }
    /**
     * @name onRemoveRequested
     * @param tag
     * @param index
     */
    onRemoveRequested(tag, index) {
        return new Promise(resolve => {
            const subscribeFn = (model) => {
                this.removeItem(model, index);
                resolve(tag);
            };
            this.onRemoving ?
                this.onRemoving(tag)
                    .pipe(first())
                    .subscribe(subscribeFn) : subscribeFn(tag);
        });
    }
    /**
     * @name onAddingRequested
     * @param fromAutocomplete {boolean}
     * @param tag {TagModel}
     * @param index? {number}
     * @param giveupFocus? {boolean}
     */
    onAddingRequested(fromAutocomplete, tag, index, giveupFocus) {
        return new Promise((resolve, reject) => {
            const subscribeFn = (model) => {
                return this
                    .addItem(fromAutocomplete, model, index, giveupFocus)
                    .then(resolve)
                    .catch(reject);
            };
            return this.onAdding ?
                this.onAdding(tag)
                    .pipe(first())
                    .subscribe(subscribeFn, reject) : subscribeFn(tag);
        });
    }
    /**
     * @name selectItem
     * @desc selects item passed as parameter as the selected tag
     * @param item
     * @param emit
     */
    selectItem(item, emit = true) {
        const isReadonly = item && typeof item !== 'string' && item.readonly;
        if (isReadonly || this.selectedTag === item) {
            return;
        }
        this.selectedTag = item;
        if (emit) {
            this.onSelect.emit(item);
        }
    }
    /**
     * @name fireEvents
     * @desc goes through the list of the events for a given eventName, and fires each of them
     * @param eventName
     * @param $event
     */
    fireEvents(eventName, $event) {
        this.listeners[eventName].forEach(listener => listener.call(this, $event));
    }
    /**
     * @name handleKeydown
     * @desc handles action when the user hits a keyboard key
     * @param data
     */
    handleKeydown(data) {
        const event = data.event;
        const key = event.keyCode || event.which;
        const shiftKey = event.shiftKey || false;
        switch (constants.KEY_PRESS_ACTIONS[key]) {
            case constants.ACTIONS_KEYS.DELETE:
                if (this.selectedTag && this.removable) {
                    const index = this.items.indexOf(this.selectedTag);
                    this.onRemoveRequested(this.selectedTag, index);
                }
                break;
            case constants.ACTIONS_KEYS.SWITCH_PREV:
                this.moveToTag(data.model, constants.PREV);
                break;
            case constants.ACTIONS_KEYS.SWITCH_NEXT:
                this.moveToTag(data.model, constants.NEXT);
                break;
            case constants.ACTIONS_KEYS.TAB:
                if (shiftKey) {
                    if (this.isFirstTag(data.model)) {
                        return;
                    }
                    this.moveToTag(data.model, constants.PREV);
                }
                else {
                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {
                        return;
                    }
                    this.moveToTag(data.model, constants.NEXT);
                }
                break;
            default:
                return;
        }
        // prevent default behaviour
        event.preventDefault();
    }
    onFormSubmit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.onAddingRequested(false, this.formValue);
            }
            catch (_a) {
                return;
            }
        });
    }
    /**
     * @name setInputValue
     * @param value
     */
    setInputValue(value, emitEvent = true) {
        const control = this.getControl();
        // update form value with the transformed item
        control.setValue(value, { emitEvent });
    }
    /**
     * @name getControl
     */
    getControl() {
        return this.inputForm.value;
    }
    /**
     * @name focus
     * @param applyFocus
     * @param displayAutocomplete
     */
    focus(applyFocus = false, displayAutocomplete = false) {
        if (this.dragProvider.getState('dragging')) {
            return;
        }
        this.selectItem(undefined, false);
        if (applyFocus) {
            this.inputForm.focus();
            this.onFocus.emit(this.formValue);
        }
    }
    /**
     * @name blur
     */
    blur() {
        this.onTouched();
        this.onBlur.emit(this.formValue);
    }
    /**
     * @name hasErrors
     */
    hasErrors() {
        return !!this.inputForm && this.inputForm.hasErrors();
    }
    /**
     * @name isInputFocused
     */
    isInputFocused() {
        return !!this.inputForm && this.inputForm.isInputFocused();
    }
    /**
     * - this is the one way I found to tell if the template has been passed and it is not
     * the template for the menu item
     * @name hasCustomTemplate
     */
    hasCustomTemplate() {
        const template = this.templates ? this.templates.first : undefined;
        const menuTemplate = this.dropdown && this.dropdown.templates ?
            this.dropdown.templates.first : undefined;
        return Boolean(template && template !== menuTemplate);
    }
    /**
     * @name maxItemsReached
     */
    get maxItemsReached() {
        return this.maxItems !== undefined &&
            this.items.length >= this.maxItems;
    }
    /**
     * @name formValue
     */
    get formValue() {
        const form = this.inputForm.value;
        return form ? form.value : '';
    }
    /**3
     * @name onDragStarted
     * @param event
     * @param index
     */
    onDragStarted(event, tag, index) {
        event.stopPropagation();
        const item = { zone: this.dragZone, tag, index };
        this.dragProvider.setSender(this);
        this.dragProvider.setDraggedItem(event, item);
        this.dragProvider.setState({ dragging: true, index });
    }
    /**
     * @name onDragOver
     * @param event
     */
    onDragOver(event, index) {
        this.dragProvider.setState({ dropping: true });
        this.dragProvider.setReceiver(this);
        event.preventDefault();
    }
    /**
     * @name onTagDropped
     * @param event
     * @param index
     */
    onTagDropped(event, index) {
        const item = this.dragProvider.getDraggedItem(event);
        if (!item || item.zone !== this.dragZone) {
            return;
        }
        this.dragProvider.onTagDropped(item.tag, item.index, index);
        event.preventDefault();
        event.stopPropagation();
    }
    /**
     * @name isDropping
     */
    isDropping() {
        const isReceiver = this.dragProvider.receiver === this;
        const isDropping = this.dragProvider.getState('dropping');
        return Boolean(isReceiver && isDropping);
    }
    /**
     * @name onTagBlurred
     * @param changedElement {TagModel}
     * @param index {number}
     */
    onTagBlurred(changedElement, index) {
        this.items[index] = changedElement;
        this.blur();
    }
    /**
     * @name trackBy
     * @param items
     */
    trackBy(index, item) {
        return item[this.identifyBy];
    }
    /**
     * @name updateEditedTag
     * @param tag
     */
    updateEditedTag({ tag, index }) {
        this.onTagEdited.emit(tag);
    }
    /**
     * @name moveToTag
     * @param item
     * @param direction
     */
    moveToTag(item, direction) {
        const isLast = this.isLastTag(item);
        const isFirst = this.isFirstTag(item);
        const stopSwitch = (direction === constants.NEXT && isLast) ||
            (direction === constants.PREV && isFirst);
        if (stopSwitch) {
            this.focus(true);
            return;
        }
        const offset = direction === constants.NEXT ? 1 : -1;
        const index = this.getTagIndex(item) + offset;
        const tag = this.getTagAtIndex(index);
        return tag.select.call(tag);
    }
    /**
     * @name isFirstTag
     * @param item {TagModel}
     */
    isFirstTag(item) {
        return this.tags.first.model === item;
    }
    /**
     * @name isLastTag
     * @param item {TagModel}
     */
    isLastTag(item) {
        return this.tags.last.model === item;
    }
    /**
     * @name getTagIndex
     * @param item
     */
    getTagIndex(item) {
        const tags = this.tags.toArray();
        return tags.findIndex(tag => tag.model === item);
    }
    /**
     * @name getTagAtIndex
     * @param index
     */
    getTagAtIndex(index) {
        const tags = this.tags.toArray();
        return tags[index];
    }
    /**
     * @name removeItem
     * @desc removes an item from the array of the model
     * @param tag {TagModel}
     * @param index {number}
     */
    removeItem(tag, index) {
        this.items = this.getItemsWithout(index);
        // if the removed tag was selected, set it as undefined
        if (this.selectedTag === tag) {
            this.selectItem(undefined, false);
        }
        // focus input
        this.focus(true, false);
        // emit remove event
        this.onRemove.emit(tag);
    }
    /**
     * @name addItem
     * @desc adds the current text model to the items array
     * @param fromAutocomplete {boolean}
     * @param item {TagModel}
     * @param index? {number}
     * @param giveupFocus? {boolean}
     */
    addItem(fromAutocomplete = false, item, index, giveupFocus) {
        const display = this.getItemDisplay(item);
        const tag = this.createTag(item);
        if (fromAutocomplete) {
            this.setInputValue(this.getItemValue(item, true));
        }
        return new Promise((resolve, reject) => {
            /**
             * @name reset
             */
            const reset = () => {
                // reset control and focus input
                this.setInputValue('');
                if (giveupFocus) {
                    this.focus(false, false);
                }
                else {
                    // focus input
                    this.focus(true, false);
                }
                resolve(display);
            };
            const appendItem = () => {
                this.appendTag(tag, index);
                // emit event
                this.onAdd.emit(tag);
                if (!this.dropdown) {
                    return;
                }
                this.dropdown.hide();
                if (this.dropdown.showDropdownIfEmpty) {
                    this.dropdown.show();
                }
            };
            const status = this.inputForm.form.status;
            const isTagValid = this.isTagValid(tag, fromAutocomplete);
            const onValidationError = () => {
                this.onValidationError.emit(tag);
                return reject();
            };
            if (status === 'VALID' && isTagValid) {
                appendItem();
                return reset();
            }
            if (status === 'INVALID' || !isTagValid) {
                reset();
                return onValidationError();
            }
            if (status === 'PENDING') {
                const statusUpdate$ = this.inputForm.form.statusChanges;
                return statusUpdate$
                    .pipe(filter(statusUpdate => statusUpdate !== 'PENDING'), first())
                    .subscribe((statusUpdate) => {
                    if (statusUpdate === 'VALID' && isTagValid) {
                        appendItem();
                        return reset();
                    }
                    else {
                        reset();
                        return onValidationError();
                    }
                });
            }
        });
    }
    /**
     * @name setupSeparatorKeysListener
     */
    setupSeparatorKeysListener() {
        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;
        const listener = ($event) => {
            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;
            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;
            // the keyCode of keydown event is 229 when IME is processing the key event.
            const isIMEProcessing = $event.keyCode === 229;
            if (hasKeyCode || (hasKey && !isIMEProcessing)) {
                $event.preventDefault();
                this.onAddingRequested(false, this.formValue)
                    .catch(() => { });
            }
        };
        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);
    }
    /**
     * @name setUpKeypressListeners
     */
    setUpKeypressListeners() {
        const listener = ($event) => {
            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;
            if (isCorrectKey &&
                !this.formValue &&
                this.items.length) {
                this.tags.last.select.call(this.tags.last);
            }
        };
        // setting up the keypress listeners
        listen.call(this, constants.KEYDOWN, listener);
    }
    /**
     * @name setUpKeydownListeners
     */
    setUpInputKeydownListeners() {
        this.inputForm.onKeydown.subscribe(event => {
            if (event.key === 'Backspace' && this.formValue.trim() === '') {
                event.preventDefault();
            }
        });
    }
    /**
     * @name setUpOnPasteListener
     */
    setUpOnPasteListener() {
        const input = this.inputForm.input.nativeElement;
        // attach listener to input
        this.renderer.listen(input, 'paste', (event) => {
            this.onPasteCallback(event);
            event.preventDefault();
            return true;
        });
    }
    /**
     * @name setUpTextChangeSubscriber
     */
    setUpTextChangeSubscriber() {
        this.inputForm.form
            .valueChanges
            .pipe(debounceTime(this.onTextChangeDebounce))
            .subscribe((value) => {
            this.onTextChange.emit(value.item);
        });
    }
    /**
     * @name setUpOnBlurSubscriber
     */
    setUpOnBlurSubscriber() {
        const filterFn = () => {
            const isVisible = this.dropdown && this.dropdown.isVisible;
            return !isVisible && !!this.formValue;
        };
        this.inputForm
            .onBlur
            .pipe(debounceTime(100), filter(filterFn))
            .subscribe(() => {
            const reset = () => this.setInputValue('');
            if (this.addOnBlur) {
                return this
                    .onAddingRequested(false, this.formValue, undefined, true)
                    .then(reset)
                    .catch(reset);
            }
            reset();
        });
    }
    /**
     * @name findDupe
     * @param tag
     * @param isFromAutocomplete
     */
    findDupe(tag, isFromAutocomplete) {
        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;
        const id = tag[identifyBy];
        return this.items.find(item => this.getItemValue(item) === id);
    }
    /**
     * @name setAnimationMetadata
     */
    setAnimationMetadata() {
        this.animationMetadata = {
            value: 'in',
            params: Object.assign({}, this.animationDuration)
        };
    }
};
TagInputComponent.ɵfac = function TagInputComponent_Factory(t) { return new (t || TagInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DragProvider)); };
TagInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagInputComponent, selectors: [["tag-input"]], contentQueries: function TagInputComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TagInputDropdown, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);
    } }, viewQuery: function TagInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(TagInputForm, true);
        ɵngcc0.ɵɵviewQuery(TagComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputForm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tags = _t);
    } }, hostVars: 1, hostBindings: function TagInputComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabindexAttr);
    } }, inputs: { separatorKeys: "separatorKeys", separatorKeyCodes: "separatorKeyCodes", placeholder: "placeholder", secondaryPlaceholder: "secondaryPlaceholder", maxItems: "maxItems", validators: "validators", asyncValidators: "asyncValidators", onlyFromAutocomplete: "onlyFromAutocomplete", errorMessages: "errorMessages", theme: "theme", onTextChangeDebounce: "onTextChangeDebounce", inputId: "inputId", inputClass: "inputClass", clearOnBlur: "clearOnBlur", hideForm: "hideForm", addOnBlur: "addOnBlur", addOnPaste: "addOnPaste", pasteSplitPattern: "pasteSplitPattern", blinkIfDupe: "blinkIfDupe", removable: "removable", editable: "editable", allowDupes: "allowDupes", modelAsStrings: "modelAsStrings", trimTags: "trimTags", ripple: "ripple", tabindex: "tabindex", disable: "disable", dragZone: "dragZone", onRemoving: "onRemoving", onAdding: "onAdding", animationDuration: "animationDuration", inputText: "inputText" }, outputs: { onAdd: "onAdd", onRemove: "onRemove", onSelect: "onSelect", onFocus: "onFocus", onBlur: "onBlur", onTextChange: "onTextChange", onPaste: "onPaste", onValidationError: "onValidationError", onTagEdited: "onTagEdited", inputTextChange: "inputTextChange" }, features: [ɵngcc0.ɵɵProvidersFeature([CUSTOM_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 8, vars: 27, consts: [[1, "ng2-tag-input", 3, "ngClass", "click", "drop", "dragenter", "dragover", "dragend"], [1, "ng2-tags-container"], [3, "draggable", "canAddTag", "disabled", "hasRipple", "index", "removable", "editable", "displayBy", "identifyBy", "template", "model", "onSelect", "onRemove", "onKeyDown", "onTagEdited", "onBlur", "dragstart", "drop", "dragenter", "dragover", "dragleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "inputText", "disabled", "validators", "asyncValidators", "hidden", "placeholder", "inputClass", "inputId", "tabindex", "onSubmit", "onBlur", "click", "onKeydown", "onKeyup", "inputTextChange"], ["class", "progress-bar", 4, "ngIf"], ["class", "error-messages", 3, "ngClass", 4, "ngIf"], [3, "draggable", "canAddTag", "disabled", "hasRipple", "index", "removable", "editable", "displayBy", "identifyBy", "template", "model", "onSelect", "onRemove", "onKeyDown", "onTagEdited", "onBlur", "dragstart", "drop", "dragenter", "dragover", "dragleave"], [1, "progress-bar"], [1, "error-messages", 3, "ngClass"], ["class", "error-message", 4, "ngFor", "ngForOf"], [1, "error-message"]], template: function TagInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function TagInputComponent_Template_div_click_0_listener($event) { return ctx.focus(true, false); })("drop", function TagInputComponent_Template_div_drop_0_listener($event) { return ctx.dragZone ? ctx.onTagDropped($event, undefined) : undefined; })("dragenter", function TagInputComponent_Template_div_dragenter_0_listener($event) { return ctx.dragZone ? ctx.onDragOver($event) : undefined; })("dragover", function TagInputComponent_Template_div_dragover_0_listener($event) { return ctx.dragZone ? ctx.onDragOver($event) : undefined; })("dragend", function TagInputComponent_Template_div_dragend_0_listener($event) { return ctx.dragZone ? ctx.dragProvider.onDragEnd() : undefined; });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, TagInputComponent_tag_2_Template, 1, 14, "tag", 2);
        ɵngcc0.ɵɵelementStart(3, "tag-input-form", 3);
        ɵngcc0.ɵɵlistener("onSubmit", function TagInputComponent_Template_tag_input_form_onSubmit_3_listener($event) { return ctx.onFormSubmit(); })("onBlur", function TagInputComponent_Template_tag_input_form_onBlur_3_listener($event) { return ctx.blur(); })("click", function TagInputComponent_Template_tag_input_form_click_3_listener($event) { return ctx.dropdown ? ctx.dropdown.show() : undefined; })("onKeydown", function TagInputComponent_Template_tag_input_form_onKeydown_3_listener($event) { return ctx.fireEvents("keydown", $event); })("onKeyup", function TagInputComponent_Template_tag_input_form_onKeyup_3_listener($event) { return ctx.fireEvents("keyup", $event); })("inputTextChange", function TagInputComponent_Template_tag_input_form_inputTextChange_3_listener($event) { return ctx.inputText = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, TagInputComponent_div_4_Template, 1, 0, "div", 4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, TagInputComponent_div_6_Template, 2, 2, "div", 5);
        ɵngcc0.ɵɵprojection(7);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ng2-tag-input--dropping", ctx.isDropping())("ng2-tag-input--disabled", ctx.disable)("ng2-tag-input--loading", ctx.isLoading)("ng2-tag-input--invalid", ctx.hasErrors())("ng2-tag-input--focused", ctx.isInputFocused());
        ɵngcc0.ɵɵproperty("ngClass", ctx.theme);
        ɵngcc0.ɵɵattribute("tabindex", 0 - 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items)("ngForTrackBy", ctx.trackBy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("inputText", ctx.inputText)("disabled", ctx.disable)("validators", ctx.validators)("asyncValidators", ctx.asyncValidators)("hidden", ctx.maxItemsReached)("placeholder", ctx.items.length ? ctx.placeholder : ctx.secondaryPlaceholder)("inputClass", ctx.inputClass)("inputId", ctx.inputId)("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(5, 25, ctx.isProgressBarVisible$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasErrors());
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc2.TagInputForm, ɵngcc1.NgIf, ɵngcc3.TagComponent], pipes: [ɵngcc1.AsyncPipe], styles: [".dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:.25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.dark.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused[_ngcontent-%COMP%]{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping[_ngcontent-%COMP%]{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid[_ngcontent-%COMP%]{box-shadow:inset 0 1px 1px #d9534f;border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading[_ngcontent-%COMP%]{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled[_ngcontent-%COMP%]{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin:.1em 0}.bootstrap3-info.ng2-tag-input[_ngcontent-%COMP%]   .ng2-tags-container[_ngcontent-%COMP%]{flex-wrap:wrap;display:flex}.error-message[_ngcontent-%COMP%]{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap[_ngcontent-%COMP%]   .error-message[_ngcontent-%COMP%]{color:#d9534f}.progress-bar[_ngcontent-%COMP%], .progress-bar[_ngcontent-%COMP%]:before{height:2px;width:100%;margin:0}.progress-bar[_ngcontent-%COMP%]{background-color:#2196f3;display:flex;position:absolute;bottom:0}.progress-bar[_ngcontent-%COMP%]:before{background-color:#82c4f8;content:\"\";-webkit-animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress;animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress}@-webkit-keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}@keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:400;font-size:1em;letter-spacing:.05rem;color:#444;border-radius:16px;transition:.3s;margin:.1rem .3rem .1rem 0;padding:.08rem .45rem;height:32px;line-height:34px;background:#efefef;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#2196f3;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active{background:#0d8aee;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#e2e2e2;color:initial;box-shadow:0 2px 3px 1px #d4d1d1}tag.readonly[_ngcontent-%COMP%]{cursor:default}tag.readonly[_ngcontent-%COMP%]:focus, tag[_ngcontent-%COMP%]:focus{outline:0}tag.tag--editing[_ngcontent-%COMP%]{background-color:#fff;border:1px solid #ccc;cursor:text}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;border-radius:0;background:#f9f9f9;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active, .minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#d0d0d0;color:initial}.minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#ececec}.minimal[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.minimal[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .minimal[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.minimal[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}.dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:3px;background:#444;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#efefef;color:#444}.dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#2b2b2b;color:#f9f9f9}.dark[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.dark[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .dark[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.dark[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:.25rem;background:#0275d8;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active, .bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#025aa5}.bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#0267bf;color:#f9f9f9}.bootstrap[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.bootstrap[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .bootstrap[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.bootstrap[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;font-family:inherit;font-weight:400;font-size:95%;color:#fff;border-radius:.25em;background:#5bc0de;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative;padding:.25em .6em;text-align:center;white-space:nowrap}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):active, .bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(.readonly):not(.tag--editing):focus{background:#28a1c5}.bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#46b8da;color:#fff}.bootstrap3-info[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]{cursor:default}.bootstrap3-info[_ngcontent-%COMP%]   tag.readonly[_ngcontent-%COMP%]:focus, .bootstrap3-info[_ngcontent-%COMP%]   tag[_ngcontent-%COMP%]:focus{outline:0}.bootstrap3-info[_ngcontent-%COMP%]   tag.tag--editing[_ngcontent-%COMP%]{cursor:text}[_nghost-%COMP%]{display:block}"], data: { animation: animations } });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagInputComponent.prototype, "separatorKeys", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagInputComponent.prototype, "separatorKeyCodes", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagInputComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagInputComponent.prototype, "secondaryPlaceholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], TagInputComponent.prototype, "maxItems", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagInputComponent.prototype, "validators", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], TagInputComponent.prototype, "asyncValidators", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onlyFromAutocomplete", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "errorMessages", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagInputComponent.prototype, "theme", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onTextChangeDebounce", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "inputId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagInputComponent.prototype, "inputClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "clearOnBlur", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "hideForm", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "addOnBlur", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "addOnPaste", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "pasteSplitPattern", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "blinkIfDupe", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "removable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "editable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "allowDupes", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "modelAsStrings", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "trimTags", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], TagInputComponent.prototype, "inputText", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "ripple", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagInputComponent.prototype, "tabindex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], TagInputComponent.prototype, "disable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TagInputComponent.prototype, "dragZone", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onRemoving", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onAdding", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "animationDuration", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onAdd", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onRemove", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onSelect", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onFocus", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onBlur", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onTextChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onPaste", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onValidationError", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TagInputComponent.prototype, "onTagEdited", void 0);
tslib_1.__decorate([
    ContentChild(TagInputDropdown, { static: false }),
    tslib_1.__metadata("design:type", TagInputDropdown)
], TagInputComponent.prototype, "dropdown", void 0);
tslib_1.__decorate([
    ContentChildren(TemplateRef, { descendants: false }),
    tslib_1.__metadata("design:type", QueryList)
], TagInputComponent.prototype, "templates", void 0);
tslib_1.__decorate([
    ViewChild(TagInputForm, { static: false }),
    tslib_1.__metadata("design:type", TagInputForm)
], TagInputComponent.prototype, "inputForm", void 0);
tslib_1.__decorate([
    ViewChildren(TagComponent),
    tslib_1.__metadata("design:type", QueryList)
], TagInputComponent.prototype, "tags", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], TagInputComponent.prototype, "inputTextChange", void 0);
tslib_1.__decorate([
    HostBinding('attr.tabindex'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], TagInputComponent.prototype, "tabindexAttr", null);
TagInputComponent = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [Renderer2,
        DragProvider])
], TagInputComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagInputComponent, [{
        type: Component,
        args: [{
                selector: 'tag-input',
                providers: [CUSTOM_ACCESSOR],
                template: "<div\n    [ngClass]=\"theme\"\n    class=\"ng2-tag-input\"\n    (click)=\"focus(true, false)\"\n    [attr.tabindex]=\"-1\"\n    (drop)=\"dragZone ? onTagDropped($event, undefined) : undefined\"\n    (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n    (dragover)=\"dragZone ? onDragOver($event) : undefined\"\n    (dragend)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n    [class.ng2-tag-input--dropping]=\"isDropping()\"\n    [class.ng2-tag-input--disabled]=\"disable\"\n    [class.ng2-tag-input--loading]=\"isLoading\"\n    [class.ng2-tag-input--invalid]=\"hasErrors()\"\n    [class.ng2-tag-input--focused]=\"isInputFocused()\"\n>\n\n    <!-- TAGS -->\n    <div class=\"ng2-tags-container\">\n        <tag\n            *ngFor=\"let item of items; let i = index; trackBy: trackBy\"\n            (onSelect)=\"selectItem(item)\"\n            (onRemove)=\"onRemoveRequested(item, i)\"\n            (onKeyDown)=\"handleKeydown($event)\"\n            (onTagEdited)=\"updateEditedTag($event)\"\n            (onBlur)=\"onTagBlurred($event, i)\"\n            draggable=\"{{ editable }}\"\n            (dragstart)=\"dragZone ? onDragStarted($event, item, i) : undefined\"\n            (drop)=\"dragZone ? onTagDropped($event, i) : undefined\"\n            (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n            (dragover)=\"dragZone ? onDragOver($event, i) : undefined\"\n            (dragleave)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n            [canAddTag]=\"isTagValid\"\n            [attr.tabindex]=\"0\"\n            [disabled]=\"disable\"\n            [@animation]=\"animationMetadata\"\n            [hasRipple]=\"ripple\"\n            [index]=\"i\"\n            [removable]=\"removable\"\n            [editable]=\"editable\"\n            [displayBy]=\"displayBy\"\n            [identifyBy]=\"identifyBy\"\n            [template]=\"!!hasCustomTemplate() ? templates.first : undefined\"\n            [draggable]=\"dragZone\"\n            [model]=\"item\"\n        >\n        </tag>\n\n        <tag-input-form\n            (onSubmit)=\"onFormSubmit()\"\n            (onBlur)=\"blur()\"\n            (click)=\"dropdown ? dropdown.show() : undefined\"\n            (onKeydown)=\"fireEvents('keydown', $event)\"\n            (onKeyup)=\"fireEvents('keyup', $event)\"\n            [(inputText)]=\"inputText\"\n            [disabled]=\"disable\"\n            [validators]=\"validators\"\n            [asyncValidators]=\"asyncValidators\"\n            [hidden]=\"maxItemsReached\"\n            [placeholder]=\"items.length ? placeholder : secondaryPlaceholder\"\n            [inputClass]=\"inputClass\"\n            [inputId]=\"inputId\"\n            [tabindex]=\"tabindex\"\n        >\n        </tag-input-form>\n    </div>\n\n    <div\n        class=\"progress-bar\"\n        *ngIf=\"isProgressBarVisible$ | async\"\n    ></div>\n</div>\n\n<!-- ERRORS -->\n<div\n    *ngIf=\"hasErrors()\"\n    [ngClass]=\"theme\"\n    class=\"error-messages\"\n>\n    <p\n        *ngFor=\"let error of errors\"\n        class=\"error-message\"\n    >\n        <span>{{ error }}</span>\n    </p>\n</div>\n<ng-content></ng-content>",
                animations,
                styles: [".dark tag:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:.25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.dark.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{box-shadow:inset 0 1px 1px #d9534f;border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}.progress-bar,.progress-bar:before{height:2px;width:100%;margin:0}.progress-bar{background-color:#2196f3;display:flex;position:absolute;bottom:0}.progress-bar:before{background-color:#82c4f8;content:\"\";-webkit-animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress;animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress}@-webkit-keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}@keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}tag{display:flex;flex-direction:row;flex-wrap:wrap;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:400;font-size:1em;letter-spacing:.05rem;color:#444;border-radius:16px;transition:.3s;margin:.1rem .3rem .1rem 0;padding:.08rem .45rem;height:32px;line-height:34px;background:#efefef;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}tag:not(.readonly):not(.tag--editing):focus{background:#2196f3;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag:not(.readonly):not(.tag--editing):active{background:#0d8aee;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#e2e2e2;color:initial;box-shadow:0 2px 3px 1px #d4d1d1}tag.readonly{cursor:default}tag.readonly:focus,tag:focus{outline:0}tag.tag--editing{background-color:#fff;border:1px solid #ccc;cursor:text}.minimal tag{display:flex;flex-direction:row;flex-wrap:wrap;border-radius:0;background:#f9f9f9;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.minimal tag:not(.readonly):not(.tag--editing):active,.minimal tag:not(.readonly):not(.tag--editing):focus{background:#d0d0d0;color:initial}.minimal tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#ececec}.minimal tag.readonly{cursor:default}.minimal tag.readonly:focus,.minimal tag:focus{outline:0}.minimal tag.tag--editing{cursor:text}.dark tag{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:3px;background:#444;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.dark tag:not(.readonly):not(.tag--editing):focus{background:#efefef;color:#444}.dark tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#2b2b2b;color:#f9f9f9}.dark tag.readonly{cursor:default}.dark tag.readonly:focus,.dark tag:focus{outline:0}.dark tag.tag--editing{cursor:text}.bootstrap tag{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:.25rem;background:#0275d8;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.bootstrap tag:not(.readonly):not(.tag--editing):active,.bootstrap tag:not(.readonly):not(.tag--editing):focus{background:#025aa5}.bootstrap tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#0267bf;color:#f9f9f9}.bootstrap tag.readonly{cursor:default}.bootstrap tag.readonly:focus,.bootstrap tag:focus{outline:0}.bootstrap tag.tag--editing{cursor:text}.bootstrap3-info tag{display:flex;flex-direction:row;flex-wrap:wrap;font-family:inherit;font-weight:400;font-size:95%;color:#fff;border-radius:.25em;background:#5bc0de;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative;padding:.25em .6em;text-align:center;white-space:nowrap}.bootstrap3-info tag:not(.readonly):not(.tag--editing):active,.bootstrap3-info tag:not(.readonly):not(.tag--editing):focus{background:#28a1c5}.bootstrap3-info tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#46b8da;color:#fff}.bootstrap3-info tag.readonly{cursor:default}.bootstrap3-info tag.readonly:focus,.bootstrap3-info tag:focus{outline:0}.bootstrap3-info tag.tag--editing{cursor:text}:host{display:block}"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: DragProvider }]; }, { separatorKeys: [{
            type: Input
        }], separatorKeyCodes: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], secondaryPlaceholder: [{
            type: Input
        }], maxItems: [{
            type: Input
        }], validators: [{
            type: Input
        }], asyncValidators: [{
            type: Input
        }], onlyFromAutocomplete: [{
            type: Input
        }], errorMessages: [{
            type: Input
        }], theme: [{
            type: Input
        }], onTextChangeDebounce: [{
            type: Input
        }], inputId: [{
            type: Input
        }], inputClass: [{
            type: Input
        }], clearOnBlur: [{
            type: Input
        }], hideForm: [{
            type: Input
        }], addOnBlur: [{
            type: Input
        }], addOnPaste: [{
            type: Input
        }], pasteSplitPattern: [{
            type: Input
        }], blinkIfDupe: [{
            type: Input
        }], removable: [{
            type: Input
        }], editable: [{
            type: Input
        }], allowDupes: [{
            type: Input
        }], modelAsStrings: [{
            type: Input
        }], trimTags: [{
            type: Input
        }], ripple: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], disable: [{
            type: Input
        }], dragZone: [{
            type: Input
        }], onRemoving: [{
            type: Input
        }], onAdding: [{
            type: Input
        }], animationDuration: [{
            type: Input
        }], onAdd: [{
            type: Output
        }], onRemove: [{
            type: Output
        }], onSelect: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], onBlur: [{
            type: Output
        }], onTextChange: [{
            type: Output
        }], onPaste: [{
            type: Output
        }], onValidationError: [{
            type: Output
        }], onTagEdited: [{
            type: Output
        }], inputTextChange: [{
            type: Output
        }], inputText: [{
            type: Input
        }], tabindexAttr: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], dropdown: [{
            type: ContentChild,
            args: [TagInputDropdown, { static: false }]
        }], templates: [{
            type: ContentChildren,
            args: [TemplateRef, { descendants: false }]
        }], inputForm: [{
            type: ViewChild,
            args: [TagInputForm, { static: false }]
        }], tags: [{
            type: ViewChildren,
            args: [TagComponent]
        }] }); })();
export { TagInputComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9uZ3gtY2hpcHMvZXNtMjAxNS9jb21wb25lbnRzL3RhZy1pbnB1dC90YWctaW5wdXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyZ1ZBdTJCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0NBK0xzQyxBQVFyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUVtQiIsImZpbGUiOiJ0YWctaW5wdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuLy8gYW5ndWxhclxuaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIsIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuLCBDb250ZW50Q2hpbGRyZW4sIENvbnRlbnRDaGlsZCwgVGVtcGxhdGVSZWYsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGZpbHRlciwgbWFwLCBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbi8vIG5nMi10YWctaW5wdXRcbmltcG9ydCB7IFRhZ0lucHV0QWNjZXNzb3IgfSBmcm9tICcuLi8uLi9jb3JlL2FjY2Vzc29yJztcbmltcG9ydCB7IGxpc3RlbiB9IGZyb20gJy4uLy4uL2NvcmUvaGVscGVycy9saXN0ZW4nO1xuaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gJy4uLy4uL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IERyYWdQcm92aWRlciB9IGZyb20gJy4uLy4uL2NvcmUvcHJvdmlkZXJzL2RyYWctcHJvdmlkZXInO1xuaW1wb3J0IHsgVGFnSW5wdXRGb3JtIH0gZnJvbSAnLi4vdGFnLWlucHV0LWZvcm0vdGFnLWlucHV0LWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IFRhZ0NvbXBvbmVudCB9IGZyb20gJy4uL3RhZy90YWcuY29tcG9uZW50JztcbmltcG9ydCB7IGFuaW1hdGlvbnMgfSBmcm9tICcuL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgZGVmYXVsdHMgfSBmcm9tICcuLi8uLi9kZWZhdWx0cyc7XG5pbXBvcnQgeyBUYWdJbnB1dERyb3Bkb3duIH0gZnJvbSAnLi4vZHJvcGRvd24vdGFnLWlucHV0LWRyb3Bkb3duLmNvbXBvbmVudCc7XG4vLyBhbmd1bGFyIHVuaXZlcnNhbCBoYWNrc1xuLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lICovXG5jb25zdCBEcmFnRXZlbnQgPSB3aW5kb3cuRHJhZ0V2ZW50O1xuY29uc3QgQ1VTVE9NX0FDQ0VTU09SID0ge1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhZ0lucHV0Q29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZVxufTtcbmxldCBUYWdJbnB1dENvbXBvbmVudCA9IGNsYXNzIFRhZ0lucHV0Q29tcG9uZW50IGV4dGVuZHMgVGFnSW5wdXRBY2Nlc3NvciB7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGRyYWdQcm92aWRlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuZHJhZ1Byb3ZpZGVyID0gZHJhZ1Byb3ZpZGVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgc2VwYXJhdG9yS2V5c1xuICAgICAgICAgKiBAZGVzYyBrZXlib2FyZCBrZXlzIHdpdGggd2hpY2ggYSB1c2VyIGNhbiBzZXBhcmF0ZSBpdGVtc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXBhcmF0b3JLZXlzID0gZGVmYXVsdHMudGFnSW5wdXQuc2VwYXJhdG9yS2V5cztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIHNlcGFyYXRvcktleUNvZGVzXG4gICAgICAgICAqIEBkZXNjIGtleWJvYXJkIGtleSBjb2RlcyB3aXRoIHdoaWNoIGEgdXNlciBjYW4gc2VwYXJhdGUgaXRlbXNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VwYXJhdG9yS2V5Q29kZXMgPSBkZWZhdWx0cy50YWdJbnB1dC5zZXBhcmF0b3JLZXlDb2RlcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIHBsYWNlaG9sZGVyXG4gICAgICAgICAqIEBkZXNjIHRoZSBwbGFjZWhvbGRlciBvZiB0aGUgaW5wdXQgdGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGRlZmF1bHRzLnRhZ0lucHV0LnBsYWNlaG9sZGVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgc2Vjb25kYXJ5UGxhY2Vob2xkZXJcbiAgICAgICAgICogQGRlc2MgcGxhY2Vob2xkZXIgdG8gYXBwZWFyIHdoZW4gdGhlIGlucHV0IGlzIGVtcHR5XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlY29uZGFyeVBsYWNlaG9sZGVyID0gZGVmYXVsdHMudGFnSW5wdXQuc2Vjb25kYXJ5UGxhY2Vob2xkZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBtYXhJdGVtc1xuICAgICAgICAgKiBAZGVzYyBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0aGF0IGNhbiBiZSBhZGRlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXhJdGVtcyA9IGRlZmF1bHRzLnRhZ0lucHV0Lm1heEl0ZW1zO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgdmFsaWRhdG9yc1xuICAgICAgICAgKiBAZGVzYyBhcnJheSBvZiBWYWxpZGF0b3JzIHRoYXQgYXJlIHVzZWQgdG8gdmFsaWRhdGUgdGhlIHRhZyBiZWZvcmUgaXQgZ2V0cyBhcHBlbmRlZCB0byB0aGUgbGlzdFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWxpZGF0b3JzID0gZGVmYXVsdHMudGFnSW5wdXQudmFsaWRhdG9ycztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGFzeW5jVmFsaWRhdG9yc1xuICAgICAgICAgKiBAZGVzYyBhcnJheSBvZiBBc3luY1ZhbGlkYXRvciB0aGF0IGFyZSB1c2VkIHRvIHZhbGlkYXRlIHRoZSB0YWcgYmVmb3JlIGl0IGdldHMgYXBwZW5kZWQgdG8gdGhlIGxpc3RcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXN5bmNWYWxpZGF0b3JzID0gZGVmYXVsdHMudGFnSW5wdXQuYXN5bmNWYWxpZGF0b3JzO1xuICAgICAgICAvKipcbiAgICAgICAgKiAtIGlmIHNldCB0byB0cnVlLCBpdCB3aWxsIG9ubHkgcG9zc2libGUgdG8gYWRkIGl0ZW1zIGZyb20gdGhlIGF1dG9jb21wbGV0ZVxuICAgICAgICAqIEBuYW1lIG9ubHlGcm9tQXV0b2NvbXBsZXRlXG4gICAgICAgICovXG4gICAgICAgIHRoaXMub25seUZyb21BdXRvY29tcGxldGUgPSBkZWZhdWx0cy50YWdJbnB1dC5vbmx5RnJvbUF1dG9jb21wbGV0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGVycm9yTWVzc2FnZXNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlcyA9IGRlZmF1bHRzLnRhZ0lucHV0LmVycm9yTWVzc2FnZXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSB0aGVtZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50aGVtZSA9IGRlZmF1bHRzLnRhZ0lucHV0LnRoZW1lO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgb25UZXh0Q2hhbmdlRGVib3VuY2VcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25UZXh0Q2hhbmdlRGVib3VuY2UgPSBkZWZhdWx0cy50YWdJbnB1dC5vblRleHRDaGFuZ2VEZWJvdW5jZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIC0gY3VzdG9tIGlkIGFzc2lnbmVkIHRvIHRoZSBpbnB1dFxuICAgICAgICAgKiBAbmFtZSBpZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbnB1dElkID0gZGVmYXVsdHMudGFnSW5wdXQuaW5wdXRJZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIC0gY3VzdG9tIGNsYXNzIGFzc2lnbmVkIHRvIHRoZSBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbnB1dENsYXNzID0gZGVmYXVsdHMudGFnSW5wdXQuaW5wdXRDbGFzcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIC0gb3B0aW9uIHRvIGNsZWFyIHRleHQgaW5wdXQgd2hlbiB0aGUgZm9ybSBpcyBibHVycmVkXG4gICAgICAgICAqIEBuYW1lIGNsZWFyT25CbHVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsZWFyT25CbHVyID0gZGVmYXVsdHMudGFnSW5wdXQuY2xlYXJPbkJsdXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAtIGhpZGVGb3JtXG4gICAgICAgICAqIEBuYW1lIGNsZWFyT25CbHVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhpZGVGb3JtID0gZGVmYXVsdHMudGFnSW5wdXQuaGlkZUZvcm07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBhZGRPbkJsdXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRkT25CbHVyID0gZGVmYXVsdHMudGFnSW5wdXQuYWRkT25CbHVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgYWRkT25QYXN0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGRPblBhc3RlID0gZGVmYXVsdHMudGFnSW5wdXQuYWRkT25QYXN0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIC0gcGF0dGVybiB1c2VkIHdpdGggdGhlIG5hdGl2ZSBtZXRob2Qgc3BsaXQoKSB0byBzZXBhcmF0ZSBwYXR0ZXJucyBpbiB0aGUgc3RyaW5nIHBhc3RlZFxuICAgICAgICAgKiBAbmFtZSBwYXN0ZVNwbGl0UGF0dGVyblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXN0ZVNwbGl0UGF0dGVybiA9IGRlZmF1bHRzLnRhZ0lucHV0LnBhc3RlU3BsaXRQYXR0ZXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgYmxpbmtJZkR1cGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxpbmtJZkR1cGUgPSBkZWZhdWx0cy50YWdJbnB1dC5ibGlua0lmRHVwZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIHJlbW92YWJsZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZW1vdmFibGUgPSBkZWZhdWx0cy50YWdJbnB1dC5yZW1vdmFibGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBlZGl0YWJsZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9IGRlZmF1bHRzLnRhZ0lucHV0LmVkaXRhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgYWxsb3dEdXBlc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbGxvd0R1cGVzID0gZGVmYXVsdHMudGFnSW5wdXQuYWxsb3dEdXBlcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBpZiBzZXQgdG8gdHJ1ZSwgdGhlIG5ld2x5IGFkZGVkIHRhZ3Mgd2lsbCBiZSBhZGRlZCBhcyBzdHJpbmdzLCBhbmQgbm90IG9iamVjdHNcbiAgICAgICAgICogQG5hbWUgbW9kZWxBc1N0cmluZ3NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubW9kZWxBc1N0cmluZ3MgPSBkZWZhdWx0cy50YWdJbnB1dC5tb2RlbEFzU3RyaW5ncztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIHRyaW1UYWdzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyaW1UYWdzID0gZGVmYXVsdHMudGFnSW5wdXQudHJpbVRhZ3M7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSByaXBwbGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmlwcGxlID0gZGVmYXVsdHMudGFnSW5wdXQucmlwcGxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgdGFiaW5kZXhcbiAgICAgICAgICogQGRlc2MgcGFzcyB0aHJvdWdoIHRoZSBzcGVjaWZpZWQgdGFiaW5kZXggdG8gdGhlIGlucHV0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRhYmluZGV4ID0gZGVmYXVsdHMudGFnSW5wdXQudGFiSW5kZXg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBkaXNhYmxlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2FibGUgPSBkZWZhdWx0cy50YWdJbnB1dC5kaXNhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgZHJhZ1pvbmVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZHJhZ1pvbmUgPSBkZWZhdWx0cy50YWdJbnB1dC5kcmFnWm9uZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIG9uUmVtb3ZpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25SZW1vdmluZyA9IGRlZmF1bHRzLnRhZ0lucHV0Lm9uUmVtb3Zpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBvbkFkZGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkFkZGluZyA9IGRlZmF1bHRzLnRhZ0lucHV0Lm9uQWRkaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgYW5pbWF0aW9uRHVyYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRHVyYXRpb24gPSBkZWZhdWx0cy50YWdJbnB1dC5hbmltYXRpb25EdXJhdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIG9uQWRkXG4gICAgICAgICAqIEBkZXNjIGV2ZW50IGVtaXR0ZWQgd2hlbiBhZGRpbmcgYSBuZXcgaXRlbVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkFkZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIG9uUmVtb3ZlXG4gICAgICAgICAqIEBkZXNjIGV2ZW50IGVtaXR0ZWQgd2hlbiByZW1vdmluZyBhbiBleGlzdGluZyBpdGVtXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uUmVtb3ZlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgb25TZWxlY3RcbiAgICAgICAgICogQGRlc2MgZXZlbnQgZW1pdHRlZCB3aGVuIHNlbGVjdGluZyBhbiBpdGVtXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uU2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgb25Gb2N1c1xuICAgICAgICAgKiBAZGVzYyBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGlucHV0IGlzIGZvY3VzZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIG9uRm9jdXNcbiAgICAgICAgICogQGRlc2MgZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBpbnB1dCBpcyBibHVycmVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIG9uVGV4dENoYW5nZVxuICAgICAgICAgKiBAZGVzYyBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGlucHV0IHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25UZXh0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogLSBvdXRwdXQgdHJpZ2dlcmVkIHdoZW4gdGV4dCBpcyBwYXN0ZWQgaW4gdGhlIGZvcm1cbiAgICAgICAgICogQG5hbWUgb25QYXN0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblBhc3RlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogLSBvdXRwdXQgdHJpZ2dlcmVkIHdoZW4gdGFnIGVudGVyZWQgaXMgbm90IHZhbGlkXG4gICAgICAgICAqIEBuYW1lIG9uVmFsaWRhdGlvbkVycm9yXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uVmFsaWRhdGlvbkVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogLSBvdXRwdXQgdHJpZ2dlcmVkIHdoZW4gdGFnIGlzIGVkaXRlZFxuICAgICAgICAgKiBAbmFtZSBvblRhZ0VkaXRlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblRhZ0VkaXRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGlzTG9hZGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIGxpc3RlbmVyc1xuICAgICAgICAgKiBAZGVzYyBhcnJheSBvZiBldmVudHMgdGhhdCBnZXQgZmlyZWQgdXNpbmcgQGZpcmVFdmVudHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgW2NvbnN0YW50cy5LRVlET1dOXTogW10sXG4gICAgICAgICAgICBbY29uc3RhbnRzLktFWVVQXTogW11cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBlbWl0dGVyIGZvciB0aGUgMi13YXkgZGF0YSBiaW5kaW5nIGlucHV0VGV4dCB2YWx1ZVxuICAgICAgICAgKiBAbmFtZSBpbnB1dFRleHRDaGFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5wdXRUZXh0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHByaXZhdGUgdmFyaWFibGUgdG8gYmluZCBnZXQvc2V0XG4gICAgICAgICAqIEBuYW1lIGlucHV0VGV4dFZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlucHV0VGV4dFZhbHVlID0gJyc7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBhcHBlbmRUYWdcbiAgICAgICAgICogQHBhcmFtIHRhZyB7VGFnTW9kZWx9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFwcGVuZFRhZyA9ICh0YWcsIGluZGV4ID0gdGhpcy5pdGVtcy5sZW5ndGgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5tb2RlbEFzU3RyaW5ncyA/IHRhZ1t0aGlzLmlkZW50aWZ5QnldIDogdGFnO1xuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IFtcbiAgICAgICAgICAgICAgICAuLi5pdGVtcy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgICAgICAgLi4uaXRlbXMuc2xpY2UoaW5kZXgsIGl0ZW1zLmxlbmd0aClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBjcmVhdGVUYWdcbiAgICAgICAgICogQHBhcmFtIG1vZGVsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZVRhZyA9IChtb2RlbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHJpbSA9ICh2YWwsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IHZhbC50cmltKCkgOiB2YWxba2V5XTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdHlwZW9mIG1vZGVsICE9PSAnc3RyaW5nJyA/IG1vZGVsIDoge30sIHsgW3RoaXMuZGlzcGxheUJ5XTogdGhpcy50cmltVGFncyA/IHRyaW0obW9kZWwsIHRoaXMuZGlzcGxheUJ5KSA6IG1vZGVsLCBbdGhpcy5pZGVudGlmeUJ5XTogdGhpcy50cmltVGFncyA/IHRyaW0obW9kZWwsIHRoaXMuaWRlbnRpZnlCeSkgOiBtb2RlbCB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0YWdcbiAgICAgICAgICogQHBhcmFtIGlzRnJvbUF1dG9jb21wbGV0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1RhZ1ZhbGlkID0gKHRhZywgZnJvbUF1dG9jb21wbGV0ZSA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW0gPSB0aGlzLmRyb3Bkb3duID8gdGhpcy5kcm9wZG93bi5zZWxlY3RlZEl0ZW0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0SXRlbURpc3BsYXkodGFnKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtICYmICFmcm9tQXV0b2NvbXBsZXRlIHx8ICF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGR1cGUgPSB0aGlzLmZpbmREdXBlKHRhZywgZnJvbUF1dG9jb21wbGV0ZSk7XG4gICAgICAgICAgICAvLyBpZiBzbywgZ2l2ZSBhIHZpc3VhbCBjdWUgYW5kIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93RHVwZXMgJiYgZHVwZSAmJiB0aGlzLmJsaW5rSWZEdXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLnRhZ3MuZmluZChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SXRlbVZhbHVlKGl0ZW0ubW9kZWwpID09PSB0aGlzLmdldEl0ZW1WYWx1ZShkdXBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuYmxpbmsoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc0Zyb21BdXRvY29tcGxldGUgPSBmcm9tQXV0b2NvbXBsZXRlICYmIHRoaXMub25seUZyb21BdXRvY29tcGxldGU7XG4gICAgICAgICAgICBjb25zdCBhc3NlcnRpb25zID0gW1xuICAgICAgICAgICAgICAgIC8vIDEuIHRoZXJlIG11c3QgYmUgbm8gZHVwZSBPUiBkdXBlcyBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgICFkdXBlIHx8IHRoaXMuYWxsb3dEdXBlcyxcbiAgICAgICAgICAgICAgICAvLyAyLiBjaGVjayBtYXggaXRlbXMgaGFzIG5vdCBiZWVuIHJlYWNoZWRcbiAgICAgICAgICAgICAgICAhdGhpcy5tYXhJdGVtc1JlYWNoZWQsXG4gICAgICAgICAgICAgICAgLy8gMy4gY2hlY2sgaXRlbSBjb21lcyBmcm9tIGF1dG9jb21wbGV0ZSBvciBvbmx5RnJvbUF1dG9jb21wbGV0ZSBpcyBmYWxzZVxuICAgICAgICAgICAgICAgICgoaXNGcm9tQXV0b2NvbXBsZXRlKSB8fCAhdGhpcy5vbmx5RnJvbUF1dG9jb21wbGV0ZSlcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0aW9ucy5maWx0ZXIoQm9vbGVhbikubGVuZ3RoID09PSBhc3NlcnRpb25zLmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuYW1lIG9uUGFzdGVDYWxsYmFja1xuICAgICAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblBhc3RlQ2FsbGJhY2sgPSAoZGF0YSkgPT4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBnZXRUZXh0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzSUUgPSBCb29sZWFuKHdpbmRvdy5jbGlwYm9hcmREYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGlwYm9hcmREYXRhID0gaXNJRSA/ICh3aW5kb3cuY2xpcGJvYXJkRGF0YSkgOiBkYXRhLmNsaXBib2FyZERhdGE7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGlzSUUgPyAnVGV4dCcgOiAndGV4dC9wbGFpbic7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaXBib2FyZERhdGEgPT09IG51bGwgPyAnJyA6IGNsaXBib2FyZERhdGEuZ2V0RGF0YSh0eXBlKSB8fCAnJztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZ2V0VGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdHMgPSB0ZXh0XG4gICAgICAgICAgICAgICAgLnNwbGl0KHRoaXMucGFzdGVTcGxpdFBhdHRlcm4pXG4gICAgICAgICAgICAgICAgLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSB0aGlzLmNyZWF0ZVRhZyhpdGVtKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldElucHV0VmFsdWUodGFnW3RoaXMuZGlzcGxheUJ5XSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub25BZGRpbmdSZXF1ZXN0ZWQoZmFsc2UsIHRhZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0SW5wdXQgPSAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0SW5wdXRWYWx1ZSgnJyksIDUwKTtcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHJlcXVlc3RzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uUGFzdGUuZW1pdCh0ZXh0KTtcbiAgICAgICAgICAgICAgICByZXNldElucHV0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChyZXNldElucHV0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIGlucHV0VGV4dFxuICAgICAqL1xuICAgIGdldCBpbnB1dFRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0VGV4dFZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbnB1dFRleHRcbiAgICAgKiBAcGFyYW0gdGV4dFxuICAgICAqL1xuICAgIHNldCBpbnB1dFRleHQodGV4dCkge1xuICAgICAgICB0aGlzLmlucHV0VGV4dFZhbHVlID0gdGV4dDtcbiAgICAgICAgdGhpcy5pbnB1dFRleHRDaGFuZ2UuZW1pdCh0ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlc2MgcmVtb3ZlcyB0aGUgdGFiIGluZGV4IGlmIGl0IGlzIHNldCAtIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGlucHV0XG4gICAgICogQG5hbWUgdGFiaW5kZXhBdHRyXG4gICAgICovXG4gICAgZ2V0IHRhYmluZGV4QXR0cigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFiaW5kZXggIT09ICcnID8gJy0xJyA6ICcnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBuZ0FmdGVyVmlld0luaXRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIC8vIHNldCB1cCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5zZXRVcEtleXByZXNzTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2V0dXBTZXBhcmF0b3JLZXlzTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5zZXRVcElucHV0S2V5ZG93bkxpc3RlbmVycygpO1xuICAgICAgICBpZiAodGhpcy5vblRleHRDaGFuZ2Uub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXRVcFRleHRDaGFuZ2VTdWJzY3JpYmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgY2xlYXIgb24gYmx1ciBpcyBzZXQgdG8gdHJ1ZSwgc3Vic2NyaWJlIHRvIHRoZSBldmVudCBhbmQgY2xlYXIgdGhlIHRleHQncyBmb3JtXG4gICAgICAgIGlmICh0aGlzLmNsZWFyT25CbHVyIHx8IHRoaXMuYWRkT25CbHVyKSB7XG4gICAgICAgICAgICB0aGlzLnNldFVwT25CbHVyU3Vic2NyaWJlcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGFkZE9uUGFzdGUgaXMgc2V0IHRvIHRydWUsIHJlZ2lzdGVyIHRoZSBoYW5kbGVyIGFuZCBhZGQgaXRlbXNcbiAgICAgICAgaWYgKHRoaXMuYWRkT25QYXN0ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRVcE9uUGFzdGVMaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXR1c0NoYW5nZXMkID0gdGhpcy5pbnB1dEZvcm0uZm9ybS5zdGF0dXNDaGFuZ2VzO1xuICAgICAgICBzdGF0dXNDaGFuZ2VzJC5waXBlKGZpbHRlcigoc3RhdHVzKSA9PiBzdGF0dXMgIT09ICdQRU5ESU5HJykpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuaW5wdXRGb3JtLmdldEVycm9yTWVzc2FnZXModGhpcy5lcnJvck1lc3NhZ2VzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaXNQcm9ncmVzc0JhclZpc2libGUkID0gc3RhdHVzQ2hhbmdlcyQucGlwZShtYXAoKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXR1cyA9PT0gJ1BFTkRJTkcnIHx8IHRoaXMuaXNMb2FkaW5nO1xuICAgICAgICB9KSk7XG4gICAgICAgIC8vIGlmIGhpZGVGb3JtIGlzIHNldCB0byB0cnVlLCByZW1vdmUgdGhlIGlucHV0XG4gICAgICAgIGlmICh0aGlzLmhpZGVGb3JtKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0Rm9ybS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgbmdPbkluaXRcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgLy8gaWYgdGhlIG51bWJlciBvZiBpdGVtcyBzcGVjaWZpZWQgaW4gdGhlIG1vZGVsIGlzID4gb2YgdGhlIHZhbHVlIG9mIG1heEl0ZW1zXG4gICAgICAgIC8vIGRlZ3JhZGUgZ3JhY2VmdWxseSBhbmQgbGV0IHRoZSBtYXggbnVtYmVyIG9mIGl0ZW1zIHRvIGJlIHRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIG1vZGVsXG4gICAgICAgIC8vIHRob3VnaCwgd2FybiB0aGUgdXNlci5cbiAgICAgICAgY29uc3QgaGFzUmVhY2hlZE1heEl0ZW1zID0gdGhpcy5tYXhJdGVtcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLml0ZW1zICYmXG4gICAgICAgICAgICB0aGlzLml0ZW1zLmxlbmd0aCA+IHRoaXMubWF4SXRlbXM7XG4gICAgICAgIGlmIChoYXNSZWFjaGVkTWF4SXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMubWF4SXRlbXMgPSB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihjb25zdGFudHMuTUFYX0lURU1TX1dBUk5JTkcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldHRpbmcgZWRpdGFibGUgdG8gZmFsc2UgdG8gZml4IHByb2JsZW0gd2l0aCB0YWdzIGluIElFIHN0aWxsIGJlaW5nIGVkaXRhYmxlIHdoZW5cbiAgICAgICAgLy8gb25seUZyb21BdXRvY29tcGxldGUgaXMgdHJ1ZVxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gdGhpcy5vbmx5RnJvbUF1dG9jb21wbGV0ZSA/IGZhbHNlIDogdGhpcy5lZGl0YWJsZTtcbiAgICAgICAgdGhpcy5zZXRBbmltYXRpb25NZXRhZGF0YSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBvblJlbW92ZVJlcXVlc3RlZFxuICAgICAqIEBwYXJhbSB0YWdcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKi9cbiAgICBvblJlbW92ZVJlcXVlc3RlZCh0YWcsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmliZUZuID0gKG1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKG1vZGVsLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0YWcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMub25SZW1vdmluZyA/XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW92aW5nKHRhZylcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShzdWJzY3JpYmVGbikgOiBzdWJzY3JpYmVGbih0YWcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25BZGRpbmdSZXF1ZXN0ZWRcbiAgICAgKiBAcGFyYW0gZnJvbUF1dG9jb21wbGV0ZSB7Ym9vbGVhbn1cbiAgICAgKiBAcGFyYW0gdGFnIHtUYWdNb2RlbH1cbiAgICAgKiBAcGFyYW0gaW5kZXg/IHtudW1iZXJ9XG4gICAgICogQHBhcmFtIGdpdmV1cEZvY3VzPyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBvbkFkZGluZ1JlcXVlc3RlZChmcm9tQXV0b2NvbXBsZXRlLCB0YWcsIGluZGV4LCBnaXZldXBGb2N1cykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlRm4gPSAobW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgICAgICAgICAuYWRkSXRlbShmcm9tQXV0b2NvbXBsZXRlLCBtb2RlbCwgaW5kZXgsIGdpdmV1cEZvY3VzKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vbkFkZGluZyA/XG4gICAgICAgICAgICAgICAgdGhpcy5vbkFkZGluZyh0YWcpXG4gICAgICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoc3Vic2NyaWJlRm4sIHJlamVjdCkgOiBzdWJzY3JpYmVGbih0YWcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2VsZWN0SXRlbVxuICAgICAqIEBkZXNjIHNlbGVjdHMgaXRlbSBwYXNzZWQgYXMgcGFyYW1ldGVyIGFzIHRoZSBzZWxlY3RlZCB0YWdcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqIEBwYXJhbSBlbWl0XG4gICAgICovXG4gICAgc2VsZWN0SXRlbShpdGVtLCBlbWl0ID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBpc1JlYWRvbmx5ID0gaXRlbSAmJiB0eXBlb2YgaXRlbSAhPT0gJ3N0cmluZycgJiYgaXRlbS5yZWFkb25seTtcbiAgICAgICAgaWYgKGlzUmVhZG9ubHkgfHwgdGhpcy5zZWxlY3RlZFRhZyA9PT0gaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUYWcgPSBpdGVtO1xuICAgICAgICBpZiAoZW1pdCkge1xuICAgICAgICAgICAgdGhpcy5vblNlbGVjdC5lbWl0KGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIGZpcmVFdmVudHNcbiAgICAgKiBAZGVzYyBnb2VzIHRocm91Z2ggdGhlIGxpc3Qgb2YgdGhlIGV2ZW50cyBmb3IgYSBnaXZlbiBldmVudE5hbWUsIGFuZCBmaXJlcyBlYWNoIG9mIHRoZW1cbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHBhcmFtICRldmVudFxuICAgICAqL1xuICAgIGZpcmVFdmVudHMoZXZlbnROYW1lLCAkZXZlbnQpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyLmNhbGwodGhpcywgJGV2ZW50KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIGhhbmRsZUtleWRvd25cbiAgICAgKiBAZGVzYyBoYW5kbGVzIGFjdGlvbiB3aGVuIHRoZSB1c2VyIGhpdHMgYSBrZXlib2FyZCBrZXlcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIGhhbmRsZUtleWRvd24oZGF0YSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGRhdGEuZXZlbnQ7XG4gICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XG4gICAgICAgIGNvbnN0IHNoaWZ0S2V5ID0gZXZlbnQuc2hpZnRLZXkgfHwgZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoY29uc3RhbnRzLktFWV9QUkVTU19BQ1RJT05TW2tleV0pIHtcbiAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLkFDVElPTlNfS0VZUy5ERUxFVEU6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUYWcgJiYgdGhpcy5yZW1vdmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmluZGV4T2YodGhpcy5zZWxlY3RlZFRhZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25SZW1vdmVSZXF1ZXN0ZWQodGhpcy5zZWxlY3RlZFRhZywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLkFDVElPTlNfS0VZUy5TV0lUQ0hfUFJFVjpcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVUb1RhZyhkYXRhLm1vZGVsLCBjb25zdGFudHMuUFJFVik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGNvbnN0YW50cy5BQ1RJT05TX0tFWVMuU1dJVENIX05FWFQ6XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlVG9UYWcoZGF0YS5tb2RlbCwgY29uc3RhbnRzLk5FWFQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjb25zdGFudHMuQUNUSU9OU19LRVlTLlRBQjpcbiAgICAgICAgICAgICAgICBpZiAoc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNGaXJzdFRhZyhkYXRhLm1vZGVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvVGFnKGRhdGEubW9kZWwsIGNvbnN0YW50cy5QUkVWKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGFzdFRhZyhkYXRhLm1vZGVsKSAmJiAodGhpcy5kaXNhYmxlIHx8IHRoaXMubWF4SXRlbXNSZWFjaGVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvVGFnKGRhdGEubW9kZWwsIGNvbnN0YW50cy5ORVhUKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3VyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIG9uRm9ybVN1Ym1pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLm9uQWRkaW5nUmVxdWVzdGVkKGZhbHNlLCB0aGlzLmZvcm1WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRJbnB1dFZhbHVlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0SW5wdXRWYWx1ZSh2YWx1ZSwgZW1pdEV2ZW50ID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBjb250cm9sID0gdGhpcy5nZXRDb250cm9sKCk7XG4gICAgICAgIC8vIHVwZGF0ZSBmb3JtIHZhbHVlIHdpdGggdGhlIHRyYW5zZm9ybWVkIGl0ZW1cbiAgICAgICAgY29udHJvbC5zZXRWYWx1ZSh2YWx1ZSwgeyBlbWl0RXZlbnQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIGdldENvbnRyb2xcbiAgICAgKi9cbiAgICBnZXRDb250cm9sKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dEZvcm0udmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIGZvY3VzXG4gICAgICogQHBhcmFtIGFwcGx5Rm9jdXNcbiAgICAgKiBAcGFyYW0gZGlzcGxheUF1dG9jb21wbGV0ZVxuICAgICAqL1xuICAgIGZvY3VzKGFwcGx5Rm9jdXMgPSBmYWxzZSwgZGlzcGxheUF1dG9jb21wbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLmRyYWdQcm92aWRlci5nZXRTdGF0ZSgnZHJhZ2dpbmcnKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0SXRlbSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgaWYgKGFwcGx5Rm9jdXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRGb3JtLmZvY3VzKCk7XG4gICAgICAgICAgICB0aGlzLm9uRm9jdXMuZW1pdCh0aGlzLmZvcm1WYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgYmx1clxuICAgICAqL1xuICAgIGJsdXIoKSB7XG4gICAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgICAgIHRoaXMub25CbHVyLmVtaXQodGhpcy5mb3JtVmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBoYXNFcnJvcnNcbiAgICAgKi9cbiAgICBoYXNFcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuaW5wdXRGb3JtICYmIHRoaXMuaW5wdXRGb3JtLmhhc0Vycm9ycygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBpc0lucHV0Rm9jdXNlZFxuICAgICAqL1xuICAgIGlzSW5wdXRGb2N1c2VkKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmlucHV0Rm9ybSAmJiB0aGlzLmlucHV0Rm9ybS5pc0lucHV0Rm9jdXNlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAtIHRoaXMgaXMgdGhlIG9uZSB3YXkgSSBmb3VuZCB0byB0ZWxsIGlmIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBwYXNzZWQgYW5kIGl0IGlzIG5vdFxuICAgICAqIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG1lbnUgaXRlbVxuICAgICAqIEBuYW1lIGhhc0N1c3RvbVRlbXBsYXRlXG4gICAgICovXG4gICAgaGFzQ3VzdG9tVGVtcGxhdGUoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZXMgPyB0aGlzLnRlbXBsYXRlcy5maXJzdCA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbWVudVRlbXBsYXRlID0gdGhpcy5kcm9wZG93biAmJiB0aGlzLmRyb3Bkb3duLnRlbXBsYXRlcyA/XG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLnRlbXBsYXRlcy5maXJzdCA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGVtcGxhdGUgJiYgdGVtcGxhdGUgIT09IG1lbnVUZW1wbGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIG1heEl0ZW1zUmVhY2hlZFxuICAgICAqL1xuICAgIGdldCBtYXhJdGVtc1JlYWNoZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heEl0ZW1zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaXRlbXMubGVuZ3RoID49IHRoaXMubWF4SXRlbXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIGZvcm1WYWx1ZVxuICAgICAqL1xuICAgIGdldCBmb3JtVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IGZvcm0gPSB0aGlzLmlucHV0Rm9ybS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGZvcm0gPyBmb3JtLnZhbHVlIDogJyc7XG4gICAgfVxuICAgIC8qKjNcbiAgICAgKiBAbmFtZSBvbkRyYWdTdGFydGVkXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICovXG4gICAgb25EcmFnU3RhcnRlZChldmVudCwgdGFnLCBpbmRleCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgaXRlbSA9IHsgem9uZTogdGhpcy5kcmFnWm9uZSwgdGFnLCBpbmRleCB9O1xuICAgICAgICB0aGlzLmRyYWdQcm92aWRlci5zZXRTZW5kZXIodGhpcyk7XG4gICAgICAgIHRoaXMuZHJhZ1Byb3ZpZGVyLnNldERyYWdnZWRJdGVtKGV2ZW50LCBpdGVtKTtcbiAgICAgICAgdGhpcy5kcmFnUHJvdmlkZXIuc2V0U3RhdGUoeyBkcmFnZ2luZzogdHJ1ZSwgaW5kZXggfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uRHJhZ092ZXJcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBvbkRyYWdPdmVyKGV2ZW50LCBpbmRleCkge1xuICAgICAgICB0aGlzLmRyYWdQcm92aWRlci5zZXRTdGF0ZSh7IGRyb3BwaW5nOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmRyYWdQcm92aWRlci5zZXRSZWNlaXZlcih0aGlzKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25UYWdEcm9wcGVkXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICovXG4gICAgb25UYWdEcm9wcGVkKGV2ZW50LCBpbmRleCkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5kcmFnUHJvdmlkZXIuZ2V0RHJhZ2dlZEl0ZW0oZXZlbnQpO1xuICAgICAgICBpZiAoIWl0ZW0gfHwgaXRlbS56b25lICE9PSB0aGlzLmRyYWdab25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmFnUHJvdmlkZXIub25UYWdEcm9wcGVkKGl0ZW0udGFnLCBpdGVtLmluZGV4LCBpbmRleCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBpc0Ryb3BwaW5nXG4gICAgICovXG4gICAgaXNEcm9wcGluZygpIHtcbiAgICAgICAgY29uc3QgaXNSZWNlaXZlciA9IHRoaXMuZHJhZ1Byb3ZpZGVyLnJlY2VpdmVyID09PSB0aGlzO1xuICAgICAgICBjb25zdCBpc0Ryb3BwaW5nID0gdGhpcy5kcmFnUHJvdmlkZXIuZ2V0U3RhdGUoJ2Ryb3BwaW5nJyk7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGlzUmVjZWl2ZXIgJiYgaXNEcm9wcGluZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uVGFnQmx1cnJlZFxuICAgICAqIEBwYXJhbSBjaGFuZ2VkRWxlbWVudCB7VGFnTW9kZWx9XG4gICAgICogQHBhcmFtIGluZGV4IHtudW1iZXJ9XG4gICAgICovXG4gICAgb25UYWdCbHVycmVkKGNoYW5nZWRFbGVtZW50LCBpbmRleCkge1xuICAgICAgICB0aGlzLml0ZW1zW2luZGV4XSA9IGNoYW5nZWRFbGVtZW50O1xuICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgdHJhY2tCeVxuICAgICAqIEBwYXJhbSBpdGVtc1xuICAgICAqL1xuICAgIHRyYWNrQnkoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1bdGhpcy5pZGVudGlmeUJ5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgdXBkYXRlRWRpdGVkVGFnXG4gICAgICogQHBhcmFtIHRhZ1xuICAgICAqL1xuICAgIHVwZGF0ZUVkaXRlZFRhZyh7IHRhZywgaW5kZXggfSkge1xuICAgICAgICB0aGlzLm9uVGFnRWRpdGVkLmVtaXQodGFnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgbW92ZVRvVGFnXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uXG4gICAgICovXG4gICAgbW92ZVRvVGFnKGl0ZW0sIGRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBpc0xhc3QgPSB0aGlzLmlzTGFzdFRhZyhpdGVtKTtcbiAgICAgICAgY29uc3QgaXNGaXJzdCA9IHRoaXMuaXNGaXJzdFRhZyhpdGVtKTtcbiAgICAgICAgY29uc3Qgc3RvcFN3aXRjaCA9IChkaXJlY3Rpb24gPT09IGNvbnN0YW50cy5ORVhUICYmIGlzTGFzdCkgfHxcbiAgICAgICAgICAgIChkaXJlY3Rpb24gPT09IGNvbnN0YW50cy5QUkVWICYmIGlzRmlyc3QpO1xuICAgICAgICBpZiAoc3RvcFN3aXRjaCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1cyh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvZmZzZXQgPSBkaXJlY3Rpb24gPT09IGNvbnN0YW50cy5ORVhUID8gMSA6IC0xO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0VGFnSW5kZXgoaXRlbSkgKyBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHRhZyA9IHRoaXMuZ2V0VGFnQXRJbmRleChpbmRleCk7XG4gICAgICAgIHJldHVybiB0YWcuc2VsZWN0LmNhbGwodGFnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNGaXJzdFRhZ1xuICAgICAqIEBwYXJhbSBpdGVtIHtUYWdNb2RlbH1cbiAgICAgKi9cbiAgICBpc0ZpcnN0VGFnKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFncy5maXJzdC5tb2RlbCA9PT0gaXRlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNMYXN0VGFnXG4gICAgICogQHBhcmFtIGl0ZW0ge1RhZ01vZGVsfVxuICAgICAqL1xuICAgIGlzTGFzdFRhZyhpdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZ3MubGFzdC5tb2RlbCA9PT0gaXRlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0VGFnSW5kZXhcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqL1xuICAgIGdldFRhZ0luZGV4KGl0ZW0pIHtcbiAgICAgICAgY29uc3QgdGFncyA9IHRoaXMudGFncy50b0FycmF5KCk7XG4gICAgICAgIHJldHVybiB0YWdzLmZpbmRJbmRleCh0YWcgPT4gdGFnLm1vZGVsID09PSBpdGVtKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0VGFnQXRJbmRleFxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqL1xuICAgIGdldFRhZ0F0SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGFncyA9IHRoaXMudGFncy50b0FycmF5KCk7XG4gICAgICAgIHJldHVybiB0YWdzW2luZGV4XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgcmVtb3ZlSXRlbVxuICAgICAqIEBkZXNjIHJlbW92ZXMgYW4gaXRlbSBmcm9tIHRoZSBhcnJheSBvZiB0aGUgbW9kZWxcbiAgICAgKiBAcGFyYW0gdGFnIHtUYWdNb2RlbH1cbiAgICAgKiBAcGFyYW0gaW5kZXgge251bWJlcn1cbiAgICAgKi9cbiAgICByZW1vdmVJdGVtKHRhZywgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuZ2V0SXRlbXNXaXRob3V0KGluZGV4KTtcbiAgICAgICAgLy8gaWYgdGhlIHJlbW92ZWQgdGFnIHdhcyBzZWxlY3RlZCwgc2V0IGl0IGFzIHVuZGVmaW5lZFxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFRhZyA9PT0gdGFnKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEl0ZW0odW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZm9jdXMgaW5wdXRcbiAgICAgICAgdGhpcy5mb2N1cyh0cnVlLCBmYWxzZSk7XG4gICAgICAgIC8vIGVtaXQgcmVtb3ZlIGV2ZW50XG4gICAgICAgIHRoaXMub25SZW1vdmUuZW1pdCh0YWcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBhZGRJdGVtXG4gICAgICogQGRlc2MgYWRkcyB0aGUgY3VycmVudCB0ZXh0IG1vZGVsIHRvIHRoZSBpdGVtcyBhcnJheVxuICAgICAqIEBwYXJhbSBmcm9tQXV0b2NvbXBsZXRlIHtib29sZWFufVxuICAgICAqIEBwYXJhbSBpdGVtIHtUYWdNb2RlbH1cbiAgICAgKiBAcGFyYW0gaW5kZXg/IHtudW1iZXJ9XG4gICAgICogQHBhcmFtIGdpdmV1cEZvY3VzPyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBhZGRJdGVtKGZyb21BdXRvY29tcGxldGUgPSBmYWxzZSwgaXRlbSwgaW5kZXgsIGdpdmV1cEZvY3VzKSB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLmdldEl0ZW1EaXNwbGF5KGl0ZW0pO1xuICAgICAgICBjb25zdCB0YWcgPSB0aGlzLmNyZWF0ZVRhZyhpdGVtKTtcbiAgICAgICAgaWYgKGZyb21BdXRvY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLmdldEl0ZW1WYWx1ZShpdGVtLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQG5hbWUgcmVzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgY29udHJvbCBhbmQgZm9jdXMgaW5wdXRcbiAgICAgICAgICAgICAgICB0aGlzLnNldElucHV0VmFsdWUoJycpO1xuICAgICAgICAgICAgICAgIGlmIChnaXZldXBGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb2N1cyBpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkaXNwbGF5KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBhcHBlbmRJdGVtID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kVGFnKHRhZywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIC8vIGVtaXQgZXZlbnRcbiAgICAgICAgICAgICAgICB0aGlzLm9uQWRkLmVtaXQodGFnKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZHJvcGRvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wZG93bi5zaG93RHJvcGRvd25JZkVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24uc2hvdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmlucHV0Rm9ybS5mb3JtLnN0YXR1cztcbiAgICAgICAgICAgIGNvbnN0IGlzVGFnVmFsaWQgPSB0aGlzLmlzVGFnVmFsaWQodGFnLCBmcm9tQXV0b2NvbXBsZXRlKTtcbiAgICAgICAgICAgIGNvbnN0IG9uVmFsaWRhdGlvbkVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25WYWxpZGF0aW9uRXJyb3IuZW1pdCh0YWcpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnVkFMSUQnICYmIGlzVGFnVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBhcHBlbmRJdGVtKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnSU5WQUxJRCcgfHwgIWlzVGFnVmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvblZhbGlkYXRpb25FcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzVXBkYXRlJCA9IHRoaXMuaW5wdXRGb3JtLmZvcm0uc3RhdHVzQ2hhbmdlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzVXBkYXRlJFxuICAgICAgICAgICAgICAgICAgICAucGlwZShmaWx0ZXIoc3RhdHVzVXBkYXRlID0+IHN0YXR1c1VwZGF0ZSAhPT0gJ1BFTkRJTkcnKSwgZmlyc3QoKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoc3RhdHVzVXBkYXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXNVcGRhdGUgPT09ICdWQUxJRCcgJiYgaXNUYWdWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kSXRlbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9uVmFsaWRhdGlvbkVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBuYW1lIHNldHVwU2VwYXJhdG9yS2V5c0xpc3RlbmVyXG4gICAgICovXG4gICAgc2V0dXBTZXBhcmF0b3JLZXlzTGlzdGVuZXIoKSB7XG4gICAgICAgIGNvbnN0IHVzZVNlcGFyYXRvcktleXMgPSB0aGlzLnNlcGFyYXRvcktleUNvZGVzLmxlbmd0aCA+IDAgfHwgdGhpcy5zZXBhcmF0b3JLZXlzLmxlbmd0aCA+IDA7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCRldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFzS2V5Q29kZSA9IHRoaXMuc2VwYXJhdG9yS2V5Q29kZXMuaW5kZXhPZigkZXZlbnQua2V5Q29kZSkgPj0gMDtcbiAgICAgICAgICAgIGNvbnN0IGhhc0tleSA9IHRoaXMuc2VwYXJhdG9yS2V5cy5pbmRleE9mKCRldmVudC5rZXkpID49IDA7XG4gICAgICAgICAgICAvLyB0aGUga2V5Q29kZSBvZiBrZXlkb3duIGV2ZW50IGlzIDIyOSB3aGVuIElNRSBpcyBwcm9jZXNzaW5nIHRoZSBrZXkgZXZlbnQuXG4gICAgICAgICAgICBjb25zdCBpc0lNRVByb2Nlc3NpbmcgPSAkZXZlbnQua2V5Q29kZSA9PT0gMjI5O1xuICAgICAgICAgICAgaWYgKGhhc0tleUNvZGUgfHwgKGhhc0tleSAmJiAhaXNJTUVQcm9jZXNzaW5nKSkge1xuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMub25BZGRpbmdSZXF1ZXN0ZWQoZmFsc2UsIHRoaXMuZm9ybVZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbGlzdGVuLmNhbGwodGhpcywgY29uc3RhbnRzLktFWURPV04sIGxpc3RlbmVyLCB1c2VTZXBhcmF0b3JLZXlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2V0VXBLZXlwcmVzc0xpc3RlbmVyc1xuICAgICAqL1xuICAgIHNldFVwS2V5cHJlc3NMaXN0ZW5lcnMoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCRldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNDb3JyZWN0S2V5ID0gJGV2ZW50LmtleUNvZGUgPT09IDM3IHx8ICRldmVudC5rZXlDb2RlID09PSA4O1xuICAgICAgICAgICAgaWYgKGlzQ29ycmVjdEtleSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLmZvcm1WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzLmxhc3Quc2VsZWN0LmNhbGwodGhpcy50YWdzLmxhc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBzZXR0aW5nIHVwIHRoZSBrZXlwcmVzcyBsaXN0ZW5lcnNcbiAgICAgICAgbGlzdGVuLmNhbGwodGhpcywgY29uc3RhbnRzLktFWURPV04sIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2V0VXBLZXlkb3duTGlzdGVuZXJzXG4gICAgICovXG4gICAgc2V0VXBJbnB1dEtleWRvd25MaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRGb3JtLm9uS2V5ZG93bi5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0JhY2tzcGFjZScgJiYgdGhpcy5mb3JtVmFsdWUudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRVcE9uUGFzdGVMaXN0ZW5lclxuICAgICAqL1xuICAgIHNldFVwT25QYXN0ZUxpc3RlbmVyKCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuaW5wdXRGb3JtLmlucHV0Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIC8vIGF0dGFjaCBsaXN0ZW5lciB0byBpbnB1dFxuICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihpbnB1dCwgJ3Bhc3RlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uUGFzdGVDYWxsYmFjayhldmVudCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRVcFRleHRDaGFuZ2VTdWJzY3JpYmVyXG4gICAgICovXG4gICAgc2V0VXBUZXh0Q2hhbmdlU3Vic2NyaWJlcigpIHtcbiAgICAgICAgdGhpcy5pbnB1dEZvcm0uZm9ybVxuICAgICAgICAgICAgLnZhbHVlQ2hhbmdlc1xuICAgICAgICAgICAgLnBpcGUoZGVib3VuY2VUaW1lKHRoaXMub25UZXh0Q2hhbmdlRGVib3VuY2UpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25UZXh0Q2hhbmdlLmVtaXQodmFsdWUuaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRVcE9uQmx1clN1YnNjcmliZXJcbiAgICAgKi9cbiAgICBzZXRVcE9uQmx1clN1YnNjcmliZXIoKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlckZuID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gdGhpcy5kcm9wZG93biAmJiB0aGlzLmRyb3Bkb3duLmlzVmlzaWJsZTtcbiAgICAgICAgICAgIHJldHVybiAhaXNWaXNpYmxlICYmICEhdGhpcy5mb3JtVmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW5wdXRGb3JtXG4gICAgICAgICAgICAub25CbHVyXG4gICAgICAgICAgICAucGlwZShkZWJvdW5jZVRpbWUoMTAwKSwgZmlsdGVyKGZpbHRlckZuKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzZXQgPSAoKSA9PiB0aGlzLnNldElucHV0VmFsdWUoJycpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWRkT25CbHVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLm9uQWRkaW5nUmVxdWVzdGVkKGZhbHNlLCB0aGlzLmZvcm1WYWx1ZSwgdW5kZWZpbmVkLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNldClcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHJlc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBmaW5kRHVwZVxuICAgICAqIEBwYXJhbSB0YWdcbiAgICAgKiBAcGFyYW0gaXNGcm9tQXV0b2NvbXBsZXRlXG4gICAgICovXG4gICAgZmluZER1cGUodGFnLCBpc0Zyb21BdXRvY29tcGxldGUpIHtcbiAgICAgICAgY29uc3QgaWRlbnRpZnlCeSA9IGlzRnJvbUF1dG9jb21wbGV0ZSA/IHRoaXMuZHJvcGRvd24uaWRlbnRpZnlCeSA6IHRoaXMuaWRlbnRpZnlCeTtcbiAgICAgICAgY29uc3QgaWQgPSB0YWdbaWRlbnRpZnlCeV07XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbmQoaXRlbSA9PiB0aGlzLmdldEl0ZW1WYWx1ZShpdGVtKSA9PT0gaWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRBbmltYXRpb25NZXRhZGF0YVxuICAgICAqL1xuICAgIHNldEFuaW1hdGlvbk1ldGFkYXRhKCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbk1ldGFkYXRhID0ge1xuICAgICAgICAgICAgdmFsdWU6ICdpbicsXG4gICAgICAgICAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuYW5pbWF0aW9uRHVyYXRpb24pXG4gICAgICAgIH07XG4gICAgfVxufTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBBcnJheSlcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJzZXBhcmF0b3JLZXlzXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQXJyYXkpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwic2VwYXJhdG9yS2V5Q29kZXNcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwicGxhY2Vob2xkZXJcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwic2Vjb25kYXJ5UGxhY2Vob2xkZXJcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBOdW1iZXIpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwibWF4SXRlbXNcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBBcnJheSlcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJ2YWxpZGF0b3JzXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQXJyYXkpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwiYXN5bmNWYWxpZGF0b3JzXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcIm9ubHlGcm9tQXV0b2NvbXBsZXRlXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImVycm9yTWVzc2FnZXNcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwidGhlbWVcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwib25UZXh0Q2hhbmdlRGVib3VuY2VcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwiaW5wdXRJZFwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJpbnB1dENsYXNzXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJjbGVhck9uQmx1clwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwiaGlkZUZvcm1cIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImFkZE9uQmx1clwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwiYWRkT25QYXN0ZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJwYXN0ZVNwbGl0UGF0dGVyblwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJibGlua0lmRHVwZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJyZW1vdmFibGVcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImVkaXRhYmxlXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImFsbG93RHVwZXNcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwibW9kZWxBc1N0cmluZ3NcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwidHJpbVRhZ3NcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmddKVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImlucHV0VGV4dFwiLCBudWxsKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcInJpcHBsZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJ0YWJpbmRleFwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwiZGlzYWJsZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJkcmFnWm9uZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvblJlbW92aW5nXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcIm9uQWRkaW5nXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImFuaW1hdGlvbkR1cmF0aW9uXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIE91dHB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkFkZFwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBPdXRwdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwib25SZW1vdmVcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcIm9uU2VsZWN0XCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIE91dHB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkZvY3VzXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIE91dHB1dCgpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkJsdXJcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcIm9uVGV4dENoYW5nZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBPdXRwdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwib25QYXN0ZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBPdXRwdXQoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwib25WYWxpZGF0aW9uRXJyb3JcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcIm9uVGFnRWRpdGVkXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIENvbnRlbnRDaGlsZChUYWdJbnB1dERyb3Bkb3duLCB7IHN0YXRpYzogZmFsc2UgfSksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgVGFnSW5wdXREcm9wZG93bilcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJkcm9wZG93blwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBDb250ZW50Q2hpbGRyZW4oVGVtcGxhdGVSZWYsIHsgZGVzY2VuZGFudHM6IGZhbHNlIH0pLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFF1ZXJ5TGlzdClcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJ0ZW1wbGF0ZXNcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgVmlld0NoaWxkKFRhZ0lucHV0Rm9ybSwgeyBzdGF0aWM6IGZhbHNlIH0pLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFRhZ0lucHV0Rm9ybSlcbl0sIFRhZ0lucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJpbnB1dEZvcm1cIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgVmlld0NoaWxkcmVuKFRhZ0NvbXBvbmVudCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgUXVlcnlMaXN0KVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcInRhZ3NcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxuXSwgVGFnSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImlucHV0VGV4dENoYW5nZVwiLCB2b2lkIDApO1xudHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZyksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW10pXG5dLCBUYWdJbnB1dENvbXBvbmVudC5wcm90b3R5cGUsIFwidGFiaW5kZXhBdHRyXCIsIG51bGwpO1xuVGFnSW5wdXRDb21wb25lbnQgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIENvbXBvbmVudCh7XG4gICAgICAgIHNlbGVjdG9yOiAndGFnLWlucHV0JyxcbiAgICAgICAgcHJvdmlkZXJzOiBbQ1VTVE9NX0FDQ0VTU09SXSxcbiAgICAgICAgdGVtcGxhdGU6IFwiPGRpdlxcbiAgICBbbmdDbGFzc109XFxcInRoZW1lXFxcIlxcbiAgICBjbGFzcz1cXFwibmcyLXRhZy1pbnB1dFxcXCJcXG4gICAgKGNsaWNrKT1cXFwiZm9jdXModHJ1ZSwgZmFsc2UpXFxcIlxcbiAgICBbYXR0ci50YWJpbmRleF09XFxcIi0xXFxcIlxcbiAgICAoZHJvcCk9XFxcImRyYWdab25lID8gb25UYWdEcm9wcGVkKCRldmVudCwgdW5kZWZpbmVkKSA6IHVuZGVmaW5lZFxcXCJcXG4gICAgKGRyYWdlbnRlcik9XFxcImRyYWdab25lID8gb25EcmFnT3ZlcigkZXZlbnQpIDogdW5kZWZpbmVkXFxcIlxcbiAgICAoZHJhZ292ZXIpPVxcXCJkcmFnWm9uZSA/IG9uRHJhZ092ZXIoJGV2ZW50KSA6IHVuZGVmaW5lZFxcXCJcXG4gICAgKGRyYWdlbmQpPVxcXCJkcmFnWm9uZSA/IGRyYWdQcm92aWRlci5vbkRyYWdFbmQoKSA6IHVuZGVmaW5lZFxcXCJcXG4gICAgW2NsYXNzLm5nMi10YWctaW5wdXQtLWRyb3BwaW5nXT1cXFwiaXNEcm9wcGluZygpXFxcIlxcbiAgICBbY2xhc3MubmcyLXRhZy1pbnB1dC0tZGlzYWJsZWRdPVxcXCJkaXNhYmxlXFxcIlxcbiAgICBbY2xhc3MubmcyLXRhZy1pbnB1dC0tbG9hZGluZ109XFxcImlzTG9hZGluZ1xcXCJcXG4gICAgW2NsYXNzLm5nMi10YWctaW5wdXQtLWludmFsaWRdPVxcXCJoYXNFcnJvcnMoKVxcXCJcXG4gICAgW2NsYXNzLm5nMi10YWctaW5wdXQtLWZvY3VzZWRdPVxcXCJpc0lucHV0Rm9jdXNlZCgpXFxcIlxcbj5cXG5cXG4gICAgPCEtLSBUQUdTIC0tPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJuZzItdGFncy1jb250YWluZXJcXFwiPlxcbiAgICAgICAgPHRhZ1xcbiAgICAgICAgICAgICpuZ0Zvcj1cXFwibGV0IGl0ZW0gb2YgaXRlbXM7IGxldCBpID0gaW5kZXg7IHRyYWNrQnk6IHRyYWNrQnlcXFwiXFxuICAgICAgICAgICAgKG9uU2VsZWN0KT1cXFwic2VsZWN0SXRlbShpdGVtKVxcXCJcXG4gICAgICAgICAgICAob25SZW1vdmUpPVxcXCJvblJlbW92ZVJlcXVlc3RlZChpdGVtLCBpKVxcXCJcXG4gICAgICAgICAgICAob25LZXlEb3duKT1cXFwiaGFuZGxlS2V5ZG93bigkZXZlbnQpXFxcIlxcbiAgICAgICAgICAgIChvblRhZ0VkaXRlZCk9XFxcInVwZGF0ZUVkaXRlZFRhZygkZXZlbnQpXFxcIlxcbiAgICAgICAgICAgIChvbkJsdXIpPVxcXCJvblRhZ0JsdXJyZWQoJGV2ZW50LCBpKVxcXCJcXG4gICAgICAgICAgICBkcmFnZ2FibGU9XFxcInt7IGVkaXRhYmxlIH19XFxcIlxcbiAgICAgICAgICAgIChkcmFnc3RhcnQpPVxcXCJkcmFnWm9uZSA/IG9uRHJhZ1N0YXJ0ZWQoJGV2ZW50LCBpdGVtLCBpKSA6IHVuZGVmaW5lZFxcXCJcXG4gICAgICAgICAgICAoZHJvcCk9XFxcImRyYWdab25lID8gb25UYWdEcm9wcGVkKCRldmVudCwgaSkgOiB1bmRlZmluZWRcXFwiXFxuICAgICAgICAgICAgKGRyYWdlbnRlcik9XFxcImRyYWdab25lID8gb25EcmFnT3ZlcigkZXZlbnQpIDogdW5kZWZpbmVkXFxcIlxcbiAgICAgICAgICAgIChkcmFnb3Zlcik9XFxcImRyYWdab25lID8gb25EcmFnT3ZlcigkZXZlbnQsIGkpIDogdW5kZWZpbmVkXFxcIlxcbiAgICAgICAgICAgIChkcmFnbGVhdmUpPVxcXCJkcmFnWm9uZSA/IGRyYWdQcm92aWRlci5vbkRyYWdFbmQoKSA6IHVuZGVmaW5lZFxcXCJcXG4gICAgICAgICAgICBbY2FuQWRkVGFnXT1cXFwiaXNUYWdWYWxpZFxcXCJcXG4gICAgICAgICAgICBbYXR0ci50YWJpbmRleF09XFxcIjBcXFwiXFxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cXFwiZGlzYWJsZVxcXCJcXG4gICAgICAgICAgICBbQGFuaW1hdGlvbl09XFxcImFuaW1hdGlvbk1ldGFkYXRhXFxcIlxcbiAgICAgICAgICAgIFtoYXNSaXBwbGVdPVxcXCJyaXBwbGVcXFwiXFxuICAgICAgICAgICAgW2luZGV4XT1cXFwiaVxcXCJcXG4gICAgICAgICAgICBbcmVtb3ZhYmxlXT1cXFwicmVtb3ZhYmxlXFxcIlxcbiAgICAgICAgICAgIFtlZGl0YWJsZV09XFxcImVkaXRhYmxlXFxcIlxcbiAgICAgICAgICAgIFtkaXNwbGF5QnldPVxcXCJkaXNwbGF5QnlcXFwiXFxuICAgICAgICAgICAgW2lkZW50aWZ5QnldPVxcXCJpZGVudGlmeUJ5XFxcIlxcbiAgICAgICAgICAgIFt0ZW1wbGF0ZV09XFxcIiEhaGFzQ3VzdG9tVGVtcGxhdGUoKSA/IHRlbXBsYXRlcy5maXJzdCA6IHVuZGVmaW5lZFxcXCJcXG4gICAgICAgICAgICBbZHJhZ2dhYmxlXT1cXFwiZHJhZ1pvbmVcXFwiXFxuICAgICAgICAgICAgW21vZGVsXT1cXFwiaXRlbVxcXCJcXG4gICAgICAgID5cXG4gICAgICAgIDwvdGFnPlxcblxcbiAgICAgICAgPHRhZy1pbnB1dC1mb3JtXFxuICAgICAgICAgICAgKG9uU3VibWl0KT1cXFwib25Gb3JtU3VibWl0KClcXFwiXFxuICAgICAgICAgICAgKG9uQmx1cik9XFxcImJsdXIoKVxcXCJcXG4gICAgICAgICAgICAoY2xpY2spPVxcXCJkcm9wZG93biA/IGRyb3Bkb3duLnNob3coKSA6IHVuZGVmaW5lZFxcXCJcXG4gICAgICAgICAgICAob25LZXlkb3duKT1cXFwiZmlyZUV2ZW50cygna2V5ZG93bicsICRldmVudClcXFwiXFxuICAgICAgICAgICAgKG9uS2V5dXApPVxcXCJmaXJlRXZlbnRzKCdrZXl1cCcsICRldmVudClcXFwiXFxuICAgICAgICAgICAgWyhpbnB1dFRleHQpXT1cXFwiaW5wdXRUZXh0XFxcIlxcbiAgICAgICAgICAgIFtkaXNhYmxlZF09XFxcImRpc2FibGVcXFwiXFxuICAgICAgICAgICAgW3ZhbGlkYXRvcnNdPVxcXCJ2YWxpZGF0b3JzXFxcIlxcbiAgICAgICAgICAgIFthc3luY1ZhbGlkYXRvcnNdPVxcXCJhc3luY1ZhbGlkYXRvcnNcXFwiXFxuICAgICAgICAgICAgW2hpZGRlbl09XFxcIm1heEl0ZW1zUmVhY2hlZFxcXCJcXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVxcXCJpdGVtcy5sZW5ndGggPyBwbGFjZWhvbGRlciA6IHNlY29uZGFyeVBsYWNlaG9sZGVyXFxcIlxcbiAgICAgICAgICAgIFtpbnB1dENsYXNzXT1cXFwiaW5wdXRDbGFzc1xcXCJcXG4gICAgICAgICAgICBbaW5wdXRJZF09XFxcImlucHV0SWRcXFwiXFxuICAgICAgICAgICAgW3RhYmluZGV4XT1cXFwidGFiaW5kZXhcXFwiXFxuICAgICAgICA+XFxuICAgICAgICA8L3RhZy1pbnB1dC1mb3JtPlxcbiAgICA8L2Rpdj5cXG5cXG4gICAgPGRpdlxcbiAgICAgICAgY2xhc3M9XFxcInByb2dyZXNzLWJhclxcXCJcXG4gICAgICAgICpuZ0lmPVxcXCJpc1Byb2dyZXNzQmFyVmlzaWJsZSQgfCBhc3luY1xcXCJcXG4gICAgPjwvZGl2PlxcbjwvZGl2PlxcblxcbjwhLS0gRVJST1JTIC0tPlxcbjxkaXZcXG4gICAgKm5nSWY9XFxcImhhc0Vycm9ycygpXFxcIlxcbiAgICBbbmdDbGFzc109XFxcInRoZW1lXFxcIlxcbiAgICBjbGFzcz1cXFwiZXJyb3ItbWVzc2FnZXNcXFwiXFxuPlxcbiAgICA8cFxcbiAgICAgICAgKm5nRm9yPVxcXCJsZXQgZXJyb3Igb2YgZXJyb3JzXFxcIlxcbiAgICAgICAgY2xhc3M9XFxcImVycm9yLW1lc3NhZ2VcXFwiXFxuICAgID5cXG4gICAgICAgIDxzcGFuPnt7IGVycm9yIH19PC9zcGFuPlxcbiAgICA8L3A+XFxuPC9kaXY+XFxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgICAgICBhbmltYXRpb25zLFxuICAgICAgICBzdHlsZXM6IFtcIi5kYXJrIHRhZzpmb2N1c3tib3gtc2hhZG93OjAgMCAwIDFweCAjMzIzMjMyfS5uZzItdGFnLWlucHV0LmJvb3RzdHJhcDMtaW5mb3tiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7ZGlzcGxheTppbmxpbmUtYmxvY2s7Y29sb3I6IzU1NTt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7bWF4LXdpZHRoOjEwMCU7aGVpZ2h0OjQycHg7bGluZS1oZWlnaHQ6NDRweH0ubmcyLXRhZy1pbnB1dC5ib290c3RyYXAzLWluZm8gaW5wdXR7Ym9yZGVyOm5vbmU7Ym94LXNoYWRvdzpub25lO291dGxpbmU6MDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3BhZGRpbmc6MCA2cHg7bWFyZ2luOjA7d2lkdGg6YXV0bzttYXgtd2lkdGg6aW5oZXJpdH0ubmcyLXRhZy1pbnB1dC5ib290c3RyYXAzLWluZm8gLmZvcm0tY29udHJvbCBpbnB1dDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojNzc3O29wYWNpdHk6MX0ubmcyLXRhZy1pbnB1dC5ib290c3RyYXAzLWluZm8gLmZvcm0tY29udHJvbCBpbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6Izc3N30ubmcyLXRhZy1pbnB1dC5ib290c3RyYXAzLWluZm8gLmZvcm0tY29udHJvbCBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzc3fS5uZzItdGFnLWlucHV0LmJvb3RzdHJhcDMtaW5mbyBpbnB1dDpmb2N1c3tib3JkZXI6bm9uZTtib3gtc2hhZG93Om5vbmV9LmJvb3RzdHJhcDMtaW5mby5uZzItdGFnLWlucHV0Lm5nMi10YWctaW5wdXQtLWZvY3VzZWR7Ym94LXNoYWRvdzppbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuNCk7Ym9yZGVyOjFweCBzb2xpZCAjY2NjfS5uZzItdGFnLWlucHV0e2Rpc3BsYXk6YmxvY2s7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwO3Bvc2l0aW9uOnJlbGF0aXZlO3RyYW5zaXRpb246LjI1cztwYWRkaW5nOi4yNXJlbSAwO21pbi1oZWlnaHQ6MzJweDtjdXJzb3I6dGV4dDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjZWZlZmVmfS5uZzItdGFnLWlucHV0OmZvY3Vze291dGxpbmU6MH0ubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1kcm9wcGluZ3tvcGFjaXR5Oi43fS5uZzItdGFnLWlucHV0Lm5nMi10YWctaW5wdXQtLWZvY3VzZWR7Ym9yZGVyLWJvdHRvbToycHggc29saWQgIzIxOTZmM30ubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1pbnZhbGlke2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNmNDQzMzZ9Lm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tbG9hZGluZ3tib3JkZXI6bm9uZX0ubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1kaXNhYmxlZHtvcGFjaXR5Oi41O2N1cnNvcjpub3QtYWxsb3dlZH0ubmcyLXRhZy1pbnB1dCBmb3Jte21hcmdpbjouMWVtIDB9Lm5nMi10YWctaW5wdXQgLm5nMi10YWdzLWNvbnRhaW5lcntmbGV4LXdyYXA6d3JhcDtkaXNwbGF5OmZsZXh9Lm1pbmltYWwubmcyLXRhZy1pbnB1dHtkaXNwbGF5OmJsb2NrO2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcDtwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6dGV4dDtib3JkZXItYm90dG9tOjFweCBzb2xpZCB0cmFuc3BhcmVudH0ubWluaW1hbC5uZzItdGFnLWlucHV0OmZvY3Vze291dGxpbmU6MH0ubWluaW1hbC5uZzItdGFnLWlucHV0Lm5nMi10YWctaW5wdXQtLWRyb3BwaW5ne29wYWNpdHk6Ljd9Lm1pbmltYWwubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1sb2FkaW5ne2JvcmRlcjpub25lfS5taW5pbWFsLm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tZGlzYWJsZWR7b3BhY2l0eTouNTtjdXJzb3I6bm90LWFsbG93ZWR9Lm1pbmltYWwubmcyLXRhZy1pbnB1dCAubmcyLXRhZ3MtY29udGFpbmVye2ZsZXgtd3JhcDp3cmFwO2Rpc3BsYXk6ZmxleH0uZGFyay5uZzItdGFnLWlucHV0e2Rpc3BsYXk6YmxvY2s7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwO3Bvc2l0aW9uOnJlbGF0aXZlO2N1cnNvcjp0ZXh0O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICM0NDR9LmRhcmsubmcyLXRhZy1pbnB1dDpmb2N1c3tvdXRsaW5lOjB9LmRhcmsubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1kcm9wcGluZ3tvcGFjaXR5Oi43fS5kYXJrLm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tbG9hZGluZ3tib3JkZXI6bm9uZX0uZGFyay5uZzItdGFnLWlucHV0Lm5nMi10YWctaW5wdXQtLWRpc2FibGVke29wYWNpdHk6LjU7Y3Vyc29yOm5vdC1hbGxvd2VkfS5kYXJrLm5nMi10YWctaW5wdXQgLm5nMi10YWdzLWNvbnRhaW5lcntmbGV4LXdyYXA6d3JhcDtkaXNwbGF5OmZsZXh9LmJvb3RzdHJhcC5uZzItdGFnLWlucHV0e2Rpc3BsYXk6YmxvY2s7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwO3Bvc2l0aW9uOnJlbGF0aXZlO2N1cnNvcjp0ZXh0O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNlZmVmZWZ9LmJvb3RzdHJhcC5uZzItdGFnLWlucHV0OmZvY3Vze291dGxpbmU6MH0uYm9vdHN0cmFwLm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tZHJvcHBpbmd7b3BhY2l0eTouN30uYm9vdHN0cmFwLm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tZm9jdXNlZHtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjMDI3NWQ4fS5ib290c3RyYXAubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1pbnZhbGlke2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNkOTUzNGZ9LmJvb3RzdHJhcC5uZzItdGFnLWlucHV0Lm5nMi10YWctaW5wdXQtLWxvYWRpbmd7Ym9yZGVyOm5vbmV9LmJvb3RzdHJhcC5uZzItdGFnLWlucHV0Lm5nMi10YWctaW5wdXQtLWRpc2FibGVke29wYWNpdHk6LjU7Y3Vyc29yOm5vdC1hbGxvd2VkfS5ib290c3RyYXAubmcyLXRhZy1pbnB1dCAubmcyLXRhZ3MtY29udGFpbmVye2ZsZXgtd3JhcDp3cmFwO2Rpc3BsYXk6ZmxleH0uYm9vdHN0cmFwMy1pbmZvLm5nMi10YWctaW5wdXR7ZGlzcGxheTpibG9jaztmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOndyYXA7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzo0cHg7Y3Vyc29yOnRleHQ7Ym94LXNoYWRvdzppbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMDc1KTtib3JkZXItcmFkaXVzOjRweH0uYm9vdHN0cmFwMy1pbmZvLm5nMi10YWctaW5wdXQ6Zm9jdXN7b3V0bGluZTowfS5ib290c3RyYXAzLWluZm8ubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1kcm9wcGluZ3tvcGFjaXR5Oi43fS5ib290c3RyYXAzLWluZm8ubmcyLXRhZy1pbnB1dC5uZzItdGFnLWlucHV0LS1pbnZhbGlke2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMXB4ICNkOTUzNGY7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2Q5NTM0Zn0uYm9vdHN0cmFwMy1pbmZvLm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tbG9hZGluZ3tib3JkZXI6bm9uZX0uYm9vdHN0cmFwMy1pbmZvLm5nMi10YWctaW5wdXQubmcyLXRhZy1pbnB1dC0tZGlzYWJsZWR7b3BhY2l0eTouNTtjdXJzb3I6bm90LWFsbG93ZWR9LmJvb3RzdHJhcDMtaW5mby5uZzItdGFnLWlucHV0IGZvcm17bWFyZ2luOi4xZW0gMH0uYm9vdHN0cmFwMy1pbmZvLm5nMi10YWctaW5wdXQgLm5nMi10YWdzLWNvbnRhaW5lcntmbGV4LXdyYXA6d3JhcDtkaXNwbGF5OmZsZXh9LmVycm9yLW1lc3NhZ2V7Zm9udC1zaXplOi44ZW07Y29sb3I6I2Y0NDMzNjttYXJnaW46LjVlbSAwIDB9LmJvb3RzdHJhcCAuZXJyb3ItbWVzc2FnZXtjb2xvcjojZDk1MzRmfS5wcm9ncmVzcy1iYXIsLnByb2dyZXNzLWJhcjpiZWZvcmV7aGVpZ2h0OjJweDt3aWR0aDoxMDAlO21hcmdpbjowfS5wcm9ncmVzcy1iYXJ7YmFja2dyb3VuZC1jb2xvcjojMjE5NmYzO2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MH0ucHJvZ3Jlc3MtYmFyOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOiM4MmM0Zjg7Y29udGVudDpcXFwiXFxcIjstd2Via2l0LWFuaW1hdGlvbjoycyBjdWJpYy1iZXppZXIoLjQsMCwuMiwxKSBpbmZpbml0ZSBydW5uaW5nLXByb2dyZXNzO2FuaW1hdGlvbjoycyBjdWJpYy1iZXppZXIoLjQsMCwuMiwxKSBpbmZpbml0ZSBydW5uaW5nLXByb2dyZXNzfUAtd2Via2l0LWtleWZyYW1lcyBydW5uaW5nLXByb2dyZXNzezAle21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjEwMCV9NTAle21hcmdpbi1sZWZ0OjI1JTttYXJnaW4tcmlnaHQ6MH0xMDAle21hcmdpbi1sZWZ0OjEwMCU7bWFyZ2luLXJpZ2h0OjB9fUBrZXlmcmFtZXMgcnVubmluZy1wcm9ncmVzc3swJXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDoxMDAlfTUwJXttYXJnaW4tbGVmdDoyNSU7bWFyZ2luLXJpZ2h0OjB9MTAwJXttYXJnaW4tbGVmdDoxMDAlO21hcmdpbi1yaWdodDowfX10YWd7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcDtmb250LWZhbWlseTpSb2JvdG8sXFxcIkhlbHZldGljYSBOZXVlXFxcIixzYW5zLXNlcmlmO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MWVtO2xldHRlci1zcGFjaW5nOi4wNXJlbTtjb2xvcjojNDQ0O2JvcmRlci1yYWRpdXM6MTZweDt0cmFuc2l0aW9uOi4zczttYXJnaW46LjFyZW0gLjNyZW0gLjFyZW0gMDtwYWRkaW5nOi4wOHJlbSAuNDVyZW07aGVpZ2h0OjMycHg7bGluZS1oZWlnaHQ6MzRweDtiYWNrZ3JvdW5kOiNlZmVmZWY7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO292ZXJmbG93OmhpZGRlbjtvdXRsaW5lOjA7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246cmVsYXRpdmV9dGFnOm5vdCgucmVhZG9ubHkpOm5vdCgudGFnLS1lZGl0aW5nKTpmb2N1c3tiYWNrZ3JvdW5kOiMyMTk2ZjM7Y29sb3I6I2ZmZjtib3gtc2hhZG93OjAgMnB4IDNweCAxcHggI2Q0ZDFkMX10YWc6bm90KC5yZWFkb25seSk6bm90KC50YWctLWVkaXRpbmcpOmFjdGl2ZXtiYWNrZ3JvdW5kOiMwZDhhZWU7Y29sb3I6I2ZmZjtib3gtc2hhZG93OjAgMnB4IDNweCAxcHggI2Q0ZDFkMX10YWc6bm90KDpmb2N1cyk6bm90KC50YWctLWVkaXRpbmcpOm5vdCg6YWN0aXZlKTpub3QoLnJlYWRvbmx5KTpob3ZlcntiYWNrZ3JvdW5kOiNlMmUyZTI7Y29sb3I6aW5pdGlhbDtib3gtc2hhZG93OjAgMnB4IDNweCAxcHggI2Q0ZDFkMX10YWcucmVhZG9ubHl7Y3Vyc29yOmRlZmF1bHR9dGFnLnJlYWRvbmx5OmZvY3VzLHRhZzpmb2N1c3tvdXRsaW5lOjB9dGFnLnRhZy0tZWRpdGluZ3tiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjY2NjO2N1cnNvcjp0ZXh0fS5taW5pbWFsIHRhZ3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwO2JvcmRlci1yYWRpdXM6MDtiYWNrZ3JvdW5kOiNmOWY5Zjk7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO292ZXJmbG93OmhpZGRlbjtvdXRsaW5lOjA7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246cmVsYXRpdmV9Lm1pbmltYWwgdGFnOm5vdCgucmVhZG9ubHkpOm5vdCgudGFnLS1lZGl0aW5nKTphY3RpdmUsLm1pbmltYWwgdGFnOm5vdCgucmVhZG9ubHkpOm5vdCgudGFnLS1lZGl0aW5nKTpmb2N1c3tiYWNrZ3JvdW5kOiNkMGQwZDA7Y29sb3I6aW5pdGlhbH0ubWluaW1hbCB0YWc6bm90KDpmb2N1cyk6bm90KC50YWctLWVkaXRpbmcpOm5vdCg6YWN0aXZlKTpub3QoLnJlYWRvbmx5KTpob3ZlcntiYWNrZ3JvdW5kOiNlY2VjZWN9Lm1pbmltYWwgdGFnLnJlYWRvbmx5e2N1cnNvcjpkZWZhdWx0fS5taW5pbWFsIHRhZy5yZWFkb25seTpmb2N1cywubWluaW1hbCB0YWc6Zm9jdXN7b3V0bGluZTowfS5taW5pbWFsIHRhZy50YWctLWVkaXRpbmd7Y3Vyc29yOnRleHR9LmRhcmsgdGFne2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOndyYXA7Y29sb3I6I2Y5ZjlmOTtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kOiM0NDQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO292ZXJmbG93OmhpZGRlbjtvdXRsaW5lOjA7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246cmVsYXRpdmV9LmRhcmsgdGFnOm5vdCgucmVhZG9ubHkpOm5vdCgudGFnLS1lZGl0aW5nKTpmb2N1c3tiYWNrZ3JvdW5kOiNlZmVmZWY7Y29sb3I6IzQ0NH0uZGFyayB0YWc6bm90KDpmb2N1cyk6bm90KC50YWctLWVkaXRpbmcpOm5vdCg6YWN0aXZlKTpub3QoLnJlYWRvbmx5KTpob3ZlcntiYWNrZ3JvdW5kOiMyYjJiMmI7Y29sb3I6I2Y5ZjlmOX0uZGFyayB0YWcucmVhZG9ubHl7Y3Vyc29yOmRlZmF1bHR9LmRhcmsgdGFnLnJlYWRvbmx5OmZvY3VzLC5kYXJrIHRhZzpmb2N1c3tvdXRsaW5lOjB9LmRhcmsgdGFnLnRhZy0tZWRpdGluZ3tjdXJzb3I6dGV4dH0uYm9vdHN0cmFwIHRhZ3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwO2NvbG9yOiNmOWY5Zjk7Ym9yZGVyLXJhZGl1czouMjVyZW07YmFja2dyb3VuZDojMDI3NWQ4Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtvdmVyZmxvdzpoaWRkZW47b3V0bGluZTowO2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOnJlbGF0aXZlfS5ib290c3RyYXAgdGFnOm5vdCgucmVhZG9ubHkpOm5vdCgudGFnLS1lZGl0aW5nKTphY3RpdmUsLmJvb3RzdHJhcCB0YWc6bm90KC5yZWFkb25seSk6bm90KC50YWctLWVkaXRpbmcpOmZvY3Vze2JhY2tncm91bmQ6IzAyNWFhNX0uYm9vdHN0cmFwIHRhZzpub3QoOmZvY3VzKTpub3QoLnRhZy0tZWRpdGluZyk6bm90KDphY3RpdmUpOm5vdCgucmVhZG9ubHkpOmhvdmVye2JhY2tncm91bmQ6IzAyNjdiZjtjb2xvcjojZjlmOWY5fS5ib290c3RyYXAgdGFnLnJlYWRvbmx5e2N1cnNvcjpkZWZhdWx0fS5ib290c3RyYXAgdGFnLnJlYWRvbmx5OmZvY3VzLC5ib290c3RyYXAgdGFnOmZvY3Vze291dGxpbmU6MH0uYm9vdHN0cmFwIHRhZy50YWctLWVkaXRpbmd7Y3Vyc29yOnRleHR9LmJvb3RzdHJhcDMtaW5mbyB0YWd7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6OTUlO2NvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czouMjVlbTtiYWNrZ3JvdW5kOiM1YmMwZGU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO292ZXJmbG93OmhpZGRlbjtvdXRsaW5lOjA7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzouMjVlbSAuNmVtO3RleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOm5vd3JhcH0uYm9vdHN0cmFwMy1pbmZvIHRhZzpub3QoLnJlYWRvbmx5KTpub3QoLnRhZy0tZWRpdGluZyk6YWN0aXZlLC5ib290c3RyYXAzLWluZm8gdGFnOm5vdCgucmVhZG9ubHkpOm5vdCgudGFnLS1lZGl0aW5nKTpmb2N1c3tiYWNrZ3JvdW5kOiMyOGExYzV9LmJvb3RzdHJhcDMtaW5mbyB0YWc6bm90KDpmb2N1cyk6bm90KC50YWctLWVkaXRpbmcpOm5vdCg6YWN0aXZlKTpub3QoLnJlYWRvbmx5KTpob3ZlcntiYWNrZ3JvdW5kOiM0NmI4ZGE7Y29sb3I6I2ZmZn0uYm9vdHN0cmFwMy1pbmZvIHRhZy5yZWFkb25seXtjdXJzb3I6ZGVmYXVsdH0uYm9vdHN0cmFwMy1pbmZvIHRhZy5yZWFkb25seTpmb2N1cywuYm9vdHN0cmFwMy1pbmZvIHRhZzpmb2N1c3tvdXRsaW5lOjB9LmJvb3RzdHJhcDMtaW5mbyB0YWcudGFnLS1lZGl0aW5ne2N1cnNvcjp0ZXh0fTpob3N0e2Rpc3BsYXk6YmxvY2t9XCJdXG4gICAgfSksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW1JlbmRlcmVyMixcbiAgICAgICAgRHJhZ1Byb3ZpZGVyXSlcbl0sIFRhZ0lucHV0Q29tcG9uZW50KTtcbmV4cG9ydCB7IFRhZ0lucHV0Q29tcG9uZW50IH07XG4iXX0=