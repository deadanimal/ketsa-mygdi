/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var LoadingBarService = /** @class */ (function () {
    function LoadingBarService(platformId) {
        this.platformId = platformId;
        this.progress$ = (/** @type {?} */ ((new Subject()).pipe(debounceTime(0))));
        this._pendingRequests = 0;
        this._value = 0;
    }
    /**
     * @param {?=} initialValue
     * @return {?}
     */
    LoadingBarService.prototype.start = /**
     * @param {?=} initialValue
     * @return {?}
     */
    function (initialValue) {
        if (initialValue === void 0) { initialValue = 2; }
        ++this._pendingRequests;
        if (this._value === 0 || this._pendingRequests === 1) {
            // Inserts the loading bar element into the dom, and sets it to 2%
            this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);
        }
    };
    /**
     * @return {?}
     */
    LoadingBarService.prototype.stop = /**
     * @return {?}
     */
    function () {
        this.complete();
        while (this._pendingRequests > 0) {
            this.complete();
        }
    };
    /**
     * @return {?}
     */
    LoadingBarService.prototype.complete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._pendingRequests === 0 && this._value === 0) {
            return;
        }
        if (this._pendingRequests > 0) {
            --this._pendingRequests;
        }
        if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {
            if (this._value !== 100) {
                this.set(100);
            }
            // Attempt to aggregate any start/complete calls within 500ms:
            setTimeout(function () { return _this.set(0); }, 500);
        }
    };
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param n any value between 0 and 100
     */
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    LoadingBarService.prototype.set = /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    function (n) {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            this._pendingRequests = 0;
            return;
        }
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        if (this._pendingRequests === 0) {
            return;
        }
        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(function () { return _this.increment(); }, 250);
        }
    };
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     */
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @param {?=} rnd
     * @return {?}
     */
    LoadingBarService.prototype.increment = /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @param {?=} rnd
     * @return {?}
     */
    function (rnd) {
        if (rnd === void 0) { rnd = 0; }
        if (rnd > 0) {
            this.set(this._value + rnd);
        }
        /** @type {?} */
        var stat = this._value;
        if (stat >= 0 && stat < 25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            // finally, increment it .5 %
            rnd = 0.5;
        }
        else {
            // after 99%, don't increment:
            rnd = 0;
        }
        this.set(this._value + rnd);
    };
    /**
     * @return {?}
     */
    LoadingBarService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.progress$.complete();
    };
    /** @nocollapse */
    LoadingBarService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ LoadingBarService.ngInjectableDef = i0.defineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.inject(i0.PLATFORM_ID)); }, token: LoadingBarService, providedIn: "root" });
LoadingBarService.ɵfac = function LoadingBarService_Factory(t) { return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
LoadingBarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarService, factory: function (t) { return LoadingBarService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
    return LoadingBarService;
}());
export { LoadingBarService };
if (false) {
    /** @type {?} */
    LoadingBarService.prototype.progress$;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._pendingRequests;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._value;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._incTimeout;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype.platformId;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,