/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class LoadingBarService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.progress$ = (/** @type {?} */ ((new Subject()).pipe(debounceTime(0))));
        this._pendingRequests = 0;
        this._value = 0;
    }
    /**
     * @param {?=} initialValue
     * @return {?}
     */
    start(initialValue = 2) {
        ++this._pendingRequests;
        if (this._value === 0 || this._pendingRequests === 1) {
            // Inserts the loading bar element into the dom, and sets it to 2%
            this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);
        }
    }
    /**
     * @return {?}
     */
    stop() {
        this.complete();
        while (this._pendingRequests > 0) {
            this.complete();
        }
    }
    /**
     * @return {?}
     */
    complete() {
        if (this._pendingRequests === 0 && this._value === 0) {
            return;
        }
        if (this._pendingRequests > 0) {
            --this._pendingRequests;
        }
        if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {
            if (this._value !== 100) {
                this.set(100);
            }
            // Attempt to aggregate any start/complete calls within 500ms:
            setTimeout(() => this.set(0), 500);
        }
    }
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    set(n) {
        if (!isPlatformBrowser(this.platformId)) {
            this._pendingRequests = 0;
            return;
        }
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        if (this._pendingRequests === 0) {
            return;
        }
        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(() => this.increment(), 250);
        }
    }
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @param {?=} rnd
     * @return {?}
     */
    increment(rnd = 0) {
        if (rnd > 0) {
            this.set(this._value + rnd);
        }
        /** @type {?} */
        const stat = this._value;
        if (stat >= 0 && stat < 25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            // finally, increment it .5 %
            rnd = 0.5;
        }
        else {
            // after 99%, don't increment:
            rnd = 0;
        }
        this.set(this._value + rnd);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.progress$.complete();
    }
}
LoadingBarService.ɵfac = function LoadingBarService_Factory(t) { return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
LoadingBarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarService, factory: LoadingBarService.ɵfac, providedIn: 'root' });
/** @nocollapse */
LoadingBarService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ LoadingBarService.ngInjectableDef = i0.defineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.inject(i0.PLATFORM_ID)); }, token: LoadingBarService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    LoadingBarService.prototype.progress$;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._pendingRequests;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._value;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._incTimeout;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype.platformId;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9Abmd4LWxvYWRpbmctYmFyL2NvcmUvZXNtMjAxNS9sb2FkaW5nLWJhci5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FtSEMsc0lBR0M7Ozs7Ozs7Ozs7OztrQ0FLdU8iLCJmaWxlIjoibG9hZGluZy1iYXIuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhclNlcnZpY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGxhdGZvcm1JZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQpIHtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybUlkID0gcGxhdGZvcm1JZDtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyQgPSAoLyoqIEB0eXBlIHs/fSAqLyAoKG5ldyBTdWJqZWN0KCkpLnBpcGUoZGVib3VuY2VUaW1lKDApKSkpO1xuICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPSAwO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IGluaXRpYWxWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgc3RhcnQoaW5pdGlhbFZhbHVlID0gMikge1xuICAgICAgICArK3RoaXMuX3BlbmRpbmdSZXF1ZXN0cztcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSAwIHx8IHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMSkge1xuICAgICAgICAgICAgLy8gSW5zZXJ0cyB0aGUgbG9hZGluZyBiYXIgZWxlbWVudCBpbnRvIHRoZSBkb20sIGFuZCBzZXRzIGl0IHRvIDIlXG4gICAgICAgICAgICB0aGlzLnNldCh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPT09IDEgJiYgdGhpcy5fdmFsdWUgPiAwID8gdGhpcy5fdmFsdWUgOiBpbml0aWFsVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgICB3aGlsZSAodGhpcy5fcGVuZGluZ1JlcXVlc3RzID4gMCkge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgY29tcGxldGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPT09IDAgJiYgdGhpcy5fdmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1JlcXVlc3RzID4gMCkge1xuICAgICAgICAgICAgLS10aGlzLl9wZW5kaW5nUmVxdWVzdHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMCB8fCAodGhpcy5fcGVuZGluZ1JlcXVlc3RzID09PSAwICYmIHRoaXMuX3ZhbHVlID4gMCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gYWdncmVnYXRlIGFueSBzdGFydC9jb21wbGV0ZSBjYWxscyB3aXRoaW4gNTAwbXM6XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0KDApLCA1MDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbG9hZGluZyBiYXIncyB3aWR0aCB0byBhIGNlcnRhaW4gcGVyY2VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P30gbiBhbnkgdmFsdWUgYmV0d2VlbiAwIGFuZCAxMDBcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHNldChuKSB7XG4gICAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA9PT0gMCAmJiB0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPiAwKSB7XG4gICAgICAgICAgICBuID0gMjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZSA9IG47XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MkLm5leHQobik7XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbmNyZW1lbnQgbG9hZGluZ2JhciB0byBnaXZlIHRoZSBpbGx1c2lvbiB0aGF0IHRoZXJlIGlzIGFsd2F5c1xuICAgICAgICAvLyBwcm9ncmVzcyBidXQgbWFrZSBzdXJlIHRvIGNhbmNlbCB0aGUgcHJldmlvdXMgdGltZW91dHMgc28gd2UgZG9uJ3RcbiAgICAgICAgLy8gaGF2ZSBtdWx0aXBsZSBpbmNzIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2luY1RpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5fdmFsdWUgPiAwICYmIHRoaXMuX3ZhbHVlIDwgMTAwKSB7XG4gICAgICAgICAgICB0aGlzLl9pbmNUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmluY3JlbWVudCgpLCAyNTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY3JlbWVudHMgdGhlIGxvYWRpbmcgYmFyIGJ5IGEgcmFuZG9tIGFtb3VudFxuICAgICAqIGJ1dCBzbG93cyBkb3duIGFzIGl0IHByb2dyZXNzZXNcbiAgICAgKiBAcGFyYW0gez89fSBybmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGluY3JlbWVudChybmQgPSAwKSB7XG4gICAgICAgIGlmIChybmQgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldCh0aGlzLl92YWx1ZSArIHJuZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICBjb25zdCBzdGF0ID0gdGhpcy5fdmFsdWU7XG4gICAgICAgIGlmIChzdGF0ID49IDAgJiYgc3RhdCA8IDI1KSB7XG4gICAgICAgICAgICAvLyBTdGFydCBvdXQgYmV0d2VlbiAzIC0gNiUgaW5jcmVtZW50c1xuICAgICAgICAgICAgcm5kID0gKE1hdGgucmFuZG9tKCkgKiAoNSAtIDMgKyAxKSArIDMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXQgPj0gMjUgJiYgc3RhdCA8IDY1KSB7XG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgYmV0d2VlbiAwIC0gMyVcbiAgICAgICAgICAgIHJuZCA9IChNYXRoLnJhbmRvbSgpICogMyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdCA+PSA2NSAmJiBzdGF0IDwgOTApIHtcbiAgICAgICAgICAgIC8vIGluY3JlbWVudCBiZXR3ZWVuIDAgLSAyJVxuICAgICAgICAgICAgcm5kID0gKE1hdGgucmFuZG9tKCkgKiAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ID49IDkwICYmIHN0YXQgPCA5OSkge1xuICAgICAgICAgICAgLy8gZmluYWxseSwgaW5jcmVtZW50IGl0IC41ICVcbiAgICAgICAgICAgIHJuZCA9IDAuNTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFmdGVyIDk5JSwgZG9uJ3QgaW5jcmVtZW50OlxuICAgICAgICAgICAgcm5kID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldCh0aGlzLl92YWx1ZSArIHJuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuTG9hZGluZ0JhclNlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTG9hZGluZ0JhclNlcnZpY2UuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBPYmplY3QsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW1BMQVRGT1JNX0lELF0gfV0gfVxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqLyBMb2FkaW5nQmFyU2VydmljZS5uZ0luamVjdGFibGVEZWYgPSBpMC5kZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTG9hZGluZ0JhclNlcnZpY2VfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBMb2FkaW5nQmFyU2VydmljZShpMC5pbmplY3QoaTAuUExBVEZPUk1fSUQpKTsgfSwgdG9rZW46IExvYWRpbmdCYXJTZXJ2aWNlLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBMb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUucHJvZ3Jlc3MkO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTG9hZGluZ0JhclNlcnZpY2UucHJvdG90eXBlLl9wZW5kaW5nUmVxdWVzdHM7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBMb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUuX3ZhbHVlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTG9hZGluZ0JhclNlcnZpY2UucHJvdG90eXBlLl9pbmNUaW1lb3V0O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTG9hZGluZ0JhclNlcnZpY2UucHJvdG90eXBlLnBsYXRmb3JtSWQ7XG59XG4iXX0=