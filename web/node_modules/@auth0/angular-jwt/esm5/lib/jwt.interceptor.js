import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { JwtHelperService } from './jwthelper.service';
import { JWT_OPTIONS } from './jwtoptions.token';
import { mergeMap } from 'rxjs/operators';
import { parse } from 'url';
import { from } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var JwtInterceptor = /** @class */ (function () {
    function JwtInterceptor(config, jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.tokenGetter = config.tokenGetter;
        this.headerName = config.headerName || 'Authorization';
        this.authScheme =
            config.authScheme || config.authScheme === ''
                ? config.authScheme
                : 'Bearer ';
        this.whitelistedDomains = config.whitelistedDomains || [];
        this.blacklistedRoutes = config.blacklistedRoutes || [];
        this.throwNoTokenError = config.throwNoTokenError || false;
        this.skipWhenExpired = config.skipWhenExpired;
    }
    JwtInterceptor.prototype.isWhitelistedDomain = function (request) {
        var requestUrl = parse(request.url, false, true);
        return (requestUrl.host === null ||
            this.whitelistedDomains.findIndex(function (domain) {
                return typeof domain === 'string'
                    ? domain === requestUrl.host
                    : domain instanceof RegExp
                        ? domain.test(requestUrl.host)
                        : false;
            }) > -1);
    };
    JwtInterceptor.prototype.isBlacklistedRoute = function (request) {
        var url = request.url;
        return (this.blacklistedRoutes.findIndex(function (route) {
            return typeof route === 'string'
                ? route === url
                : route instanceof RegExp
                    ? route.test(url)
                    : false;
        }) > -1);
    };
    JwtInterceptor.prototype.handleInterception = function (token, request, next) {
        var _a;
        var tokenIsExpired = false;
        if (!token && this.throwNoTokenError) {
            throw new Error('Could not get token from tokenGetter function.');
        }
        if (this.skipWhenExpired) {
            tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;
        }
        if (token && tokenIsExpired && this.skipWhenExpired) {
            request = request.clone();
        }
        else if (token) {
            request = request.clone({
                setHeaders: (_a = {},
                    _a[this.headerName] = "" + this.authScheme + token,
                    _a)
            });
        }
        return next.handle(request);
    };
    JwtInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        if (!this.isWhitelistedDomain(request) ||
            this.isBlacklistedRoute(request)) {
            return next.handle(request);
        }
        var token = this.tokenGetter();
        if (token instanceof Promise) {
            return from(token).pipe(mergeMap(function (asyncToken) {
                return _this.handleInterception(asyncToken, request, next);
            }));
        }
        else {
            return this.handleInterception(token, request, next);
        }
    };
    JwtInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [JWT_OPTIONS,] }] },
        { type: JwtHelperService }
    ]; };
    JwtInterceptor = __decorate([ __param(0, Inject(JWT_OPTIONS)),
        __metadata("design:paramtypes", [Object, JwtHelperService])
    ], JwtInterceptor);
JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) { return new (t || JwtInterceptor)(ɵngcc0.ɵɵinject(JWT_OPTIONS), ɵngcc0.ɵɵinject(JwtHelperService)); };
JwtInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JwtInterceptor, factory: function (t) { return JwtInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwtInterceptor, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [JWT_OPTIONS]
            }] }, { type: JwtHelperService }]; }, null); })();
    return JwtInterceptor;
}());
export { JwtInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9AYXV0aDAvYW5ndWxhci1qd3QvZXNtNS9saWIvand0LmludGVyY2VwdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQTRFaUMsQUFFMUI7Ozs7Ozs7Ozs7OERBRWdCIiwiZmlsZSI6Imp3dC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZGVjb3JhdGUsIF9fbWV0YWRhdGEsIF9fcGFyYW0gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSnd0SGVscGVyU2VydmljZSB9IGZyb20gJy4vand0aGVscGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSldUX09QVElPTlMgfSBmcm9tICcuL2p3dG9wdGlvbnMudG9rZW4nO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcyc7XG52YXIgSnd0SW50ZXJjZXB0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSnd0SW50ZXJjZXB0b3IoY29uZmlnLCBqd3RIZWxwZXIpIHtcbiAgICAgICAgdGhpcy5qd3RIZWxwZXIgPSBqd3RIZWxwZXI7XG4gICAgICAgIHRoaXMudG9rZW5HZXR0ZXIgPSBjb25maWcudG9rZW5HZXR0ZXI7XG4gICAgICAgIHRoaXMuaGVhZGVyTmFtZSA9IGNvbmZpZy5oZWFkZXJOYW1lIHx8ICdBdXRob3JpemF0aW9uJztcbiAgICAgICAgdGhpcy5hdXRoU2NoZW1lID1cbiAgICAgICAgICAgIGNvbmZpZy5hdXRoU2NoZW1lIHx8IGNvbmZpZy5hdXRoU2NoZW1lID09PSAnJ1xuICAgICAgICAgICAgICAgID8gY29uZmlnLmF1dGhTY2hlbWVcbiAgICAgICAgICAgICAgICA6ICdCZWFyZXIgJztcbiAgICAgICAgdGhpcy53aGl0ZWxpc3RlZERvbWFpbnMgPSBjb25maWcud2hpdGVsaXN0ZWREb21haW5zIHx8IFtdO1xuICAgICAgICB0aGlzLmJsYWNrbGlzdGVkUm91dGVzID0gY29uZmlnLmJsYWNrbGlzdGVkUm91dGVzIHx8IFtdO1xuICAgICAgICB0aGlzLnRocm93Tm9Ub2tlbkVycm9yID0gY29uZmlnLnRocm93Tm9Ub2tlbkVycm9yIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLnNraXBXaGVuRXhwaXJlZCA9IGNvbmZpZy5za2lwV2hlbkV4cGlyZWQ7XG4gICAgfVxuICAgIEp3dEludGVyY2VwdG9yLnByb3RvdHlwZS5pc1doaXRlbGlzdGVkRG9tYWluID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBwYXJzZShyZXF1ZXN0LnVybCwgZmFsc2UsIHRydWUpO1xuICAgICAgICByZXR1cm4gKHJlcXVlc3RVcmwuaG9zdCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdGhpcy53aGl0ZWxpc3RlZERvbWFpbnMuZmluZEluZGV4KGZ1bmN0aW9uIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGRvbWFpbiA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyBkb21haW4gPT09IHJlcXVlc3RVcmwuaG9zdFxuICAgICAgICAgICAgICAgICAgICA6IGRvbWFpbiBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBkb21haW4udGVzdChyZXF1ZXN0VXJsLmhvc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgICAgfSkgPiAtMSk7XG4gICAgfTtcbiAgICBKd3RJbnRlcmNlcHRvci5wcm90b3R5cGUuaXNCbGFja2xpc3RlZFJvdXRlID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdmFyIHVybCA9IHJlcXVlc3QudXJsO1xuICAgICAgICByZXR1cm4gKHRoaXMuYmxhY2tsaXN0ZWRSb3V0ZXMuZmluZEluZGV4KGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiByb3V0ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHJvdXRlID09PSB1cmxcbiAgICAgICAgICAgICAgICA6IHJvdXRlIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAgICAgICAgICAgICAgID8gcm91dGUudGVzdCh1cmwpXG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgIH0pID4gLTEpO1xuICAgIH07XG4gICAgSnd0SW50ZXJjZXB0b3IucHJvdG90eXBlLmhhbmRsZUludGVyY2VwdGlvbiA9IGZ1bmN0aW9uICh0b2tlbiwgcmVxdWVzdCwgbmV4dCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciB0b2tlbklzRXhwaXJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRva2VuICYmIHRoaXMudGhyb3dOb1Rva2VuRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdldCB0b2tlbiBmcm9tIHRva2VuR2V0dGVyIGZ1bmN0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNraXBXaGVuRXhwaXJlZCkge1xuICAgICAgICAgICAgdG9rZW5Jc0V4cGlyZWQgPSB0b2tlbiA/IHRoaXMuand0SGVscGVyLmlzVG9rZW5FeHBpcmVkKHRva2VuKSA6IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuSXNFeHBpcmVkICYmIHRoaXMuc2tpcFdoZW5FeHBpcmVkKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgICAgICAgICAgc2V0SGVhZGVyczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW3RoaXMuaGVhZGVyTmFtZV0gPSBcIlwiICsgdGhpcy5hdXRoU2NoZW1lICsgdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIF9hKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgIH07XG4gICAgSnd0SW50ZXJjZXB0b3IucHJvdG90eXBlLmludGVyY2VwdCA9IGZ1bmN0aW9uIChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1doaXRlbGlzdGVkRG9tYWluKHJlcXVlc3QpIHx8XG4gICAgICAgICAgICB0aGlzLmlzQmxhY2tsaXN0ZWRSb3V0ZShyZXF1ZXN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMudG9rZW5HZXR0ZXIoKTtcbiAgICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb20odG9rZW4pLnBpcGUobWVyZ2VNYXAoZnVuY3Rpb24gKGFzeW5jVG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlSW50ZXJjZXB0aW9uKGFzeW5jVG9rZW4sIHJlcXVlc3QsIG5leHQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlSW50ZXJjZXB0aW9uKHRva2VuLCByZXF1ZXN0LCBuZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSnd0SW50ZXJjZXB0b3IuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtKV1RfT1BUSU9OUyxdIH1dIH0sXG4gICAgICAgIHsgdHlwZTogSnd0SGVscGVyU2VydmljZSB9XG4gICAgXTsgfTtcbiAgICBKd3RJbnRlcmNlcHRvciA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIF9fcGFyYW0oMCwgSW5qZWN0KEpXVF9PUFRJT05TKSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0LCBKd3RIZWxwZXJTZXJ2aWNlXSlcbiAgICBdLCBKd3RJbnRlcmNlcHRvcik7XG4gICAgcmV0dXJuIEp3dEludGVyY2VwdG9yO1xufSgpKTtcbmV4cG9ydCB7IEp3dEludGVyY2VwdG9yIH07XG4iXX0=