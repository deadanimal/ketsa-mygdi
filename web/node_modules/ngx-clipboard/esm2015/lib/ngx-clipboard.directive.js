import { __decorate } from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { ClipboardService } from './ngx-clipboard.service';
import * as ɵngcc0 from '@angular/core';
let ClipboardDirective = class ClipboardDirective {
    constructor(clipboardSrv) {
        this.clipboardSrv = clipboardSrv;
        this.cbOnSuccess = new EventEmitter();
        this.cbOnError = new EventEmitter();
    }
    // tslint:disable-next-line:no-empty
    ngOnInit() { }
    ngOnDestroy() {
        this.clipboardSrv.destroy(this.container);
    }
    onClick(event) {
        if (!this.clipboardSrv.isSupported) {
            this.handleResult(false, undefined, event);
        }
        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {
            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);
        }
        else if (this.cbContent) {
            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);
        }
    }
    /**
     * Fires an event based on the copy operation result.
     * @param succeeded
     */
    handleResult(succeeded, copiedContent, event) {
        let response = {
            isSuccess: succeeded,
            event
        };
        if (succeeded) {
            response = Object.assign(response, {
                content: copiedContent,
                successMessage: this.cbSuccessMsg
            });
            this.cbOnSuccess.emit(response);
        }
        else {
            this.cbOnError.emit(response);
        }
        this.clipboardSrv.pushCopyResponse(response);
    }
};
ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };
ClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [["", "ngxClipboard", ""]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });
    } }, inputs: { targetElm: ["ngxClipboard", "targetElm"], container: "container", cbContent: "cbContent", cbSuccessMsg: "cbSuccessMsg" }, outputs: { cbOnSuccess: "cbOnSuccess", cbOnError: "cbOnError" } });
ClipboardDirective.ctorParameters = () => [
    { type: ClipboardService }
];
__decorate([
    Input('ngxClipboard')
], ClipboardDirective.prototype, "targetElm", void 0);
__decorate([
    Input()
], ClipboardDirective.prototype, "container", void 0);
__decorate([
    Input()
], ClipboardDirective.prototype, "cbContent", void 0);
__decorate([
    Input()
], ClipboardDirective.prototype, "cbSuccessMsg", void 0);
__decorate([
    Output()
], ClipboardDirective.prototype, "cbOnSuccess", void 0);
__decorate([
    Output()
], ClipboardDirective.prototype, "cbOnError", void 0);
__decorate([
    HostListener('click', ['$event.target'])
], ClipboardDirective.prototype, "onClick", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxClipboard]'
            }]
    }], function () { return [{ type: ClipboardService }]; }, { cbOnSuccess: [{
            type: Output
        }], cbOnError: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event.target']]
        }], targetElm: [{
            type: Input,
            args: ['ngxClipboard']
        }], container: [{
            type: Input
        }], cbContent: [{
            type: Input
        }], cbSuccessMsg: [{
            type: Input
        }] }); })();
export { ClipboardDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9uZ3gtY2xpcGJvYXJkL2VzbTIwMTUvbGliL25neC1jbGlwYm9hcmQuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dOQTJDRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tEQXdCZ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBSzNCIiwiZmlsZSI6Im5neC1jbGlwYm9hcmQuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENsaXBib2FyZFNlcnZpY2UgfSBmcm9tICcuL25neC1jbGlwYm9hcmQuc2VydmljZSc7XHJcbmxldCBDbGlwYm9hcmREaXJlY3RpdmUgPSBjbGFzcyBDbGlwYm9hcmREaXJlY3RpdmUge1xyXG4gICAgY29uc3RydWN0b3IoY2xpcGJvYXJkU3J2KSB7XHJcbiAgICAgICAgdGhpcy5jbGlwYm9hcmRTcnYgPSBjbGlwYm9hcmRTcnY7XHJcbiAgICAgICAgdGhpcy5jYk9uU3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLmNiT25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIH1cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxyXG4gICAgbmdPbkluaXQoKSB7IH1cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuY2xpcGJvYXJkU3J2LmRlc3Ryb3kodGhpcy5jb250YWluZXIpO1xyXG4gICAgfVxyXG4gICAgb25DbGljayhldmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jbGlwYm9hcmRTcnYuaXNTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXN1bHQoZmFsc2UsIHVuZGVmaW5lZCwgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnRhcmdldEVsbSAmJiB0aGlzLmNsaXBib2FyZFNydi5pc1RhcmdldFZhbGlkKHRoaXMudGFyZ2V0RWxtKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlc3VsdCh0aGlzLmNsaXBib2FyZFNydi5jb3B5RnJvbUlucHV0RWxlbWVudCh0aGlzLnRhcmdldEVsbSksIHRoaXMudGFyZ2V0RWxtLnZhbHVlLCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2JDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzdWx0KHRoaXMuY2xpcGJvYXJkU3J2LmNvcHlGcm9tQ29udGVudCh0aGlzLmNiQ29udGVudCwgdGhpcy5jb250YWluZXIpLCB0aGlzLmNiQ29udGVudCwgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRmlyZXMgYW4gZXZlbnQgYmFzZWQgb24gdGhlIGNvcHkgb3BlcmF0aW9uIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSBzdWNjZWVkZWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlUmVzdWx0KHN1Y2NlZWRlZCwgY29waWVkQ29udGVudCwgZXZlbnQpIHtcclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSB7XHJcbiAgICAgICAgICAgIGlzU3VjY2Vzczogc3VjY2VlZGVkLFxyXG4gICAgICAgICAgICBldmVudFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHN1Y2NlZWRlZCkge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IE9iamVjdC5hc3NpZ24ocmVzcG9uc2UsIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvcGllZENvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzTWVzc2FnZTogdGhpcy5jYlN1Y2Nlc3NNc2dcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2JPblN1Y2Nlc3MuZW1pdChyZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNiT25FcnJvci5lbWl0KHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGlwYm9hcmRTcnYucHVzaENvcHlSZXNwb25zZShyZXNwb25zZSk7XHJcbiAgICB9XHJcbn07XHJcbkNsaXBib2FyZERpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcclxuICAgIHsgdHlwZTogQ2xpcGJvYXJkU2VydmljZSB9XHJcbl07XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ25neENsaXBib2FyZCcpXHJcbl0sIENsaXBib2FyZERpcmVjdGl2ZS5wcm90b3R5cGUsIFwidGFyZ2V0RWxtXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoKVxyXG5dLCBDbGlwYm9hcmREaXJlY3RpdmUucHJvdG90eXBlLCBcImNvbnRhaW5lclwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KClcclxuXSwgQ2xpcGJvYXJkRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJjYkNvbnRlbnRcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgpXHJcbl0sIENsaXBib2FyZERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiY2JTdWNjZXNzTXNnXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KClcclxuXSwgQ2xpcGJvYXJkRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJjYk9uU3VjY2Vzc1wiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIE91dHB1dCgpXHJcbl0sIENsaXBib2FyZERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiY2JPbkVycm9yXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxyXG5dLCBDbGlwYm9hcmREaXJlY3RpdmUucHJvdG90eXBlLCBcIm9uQ2xpY2tcIiwgbnVsbCk7XHJcbkNsaXBib2FyZERpcmVjdGl2ZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgRGlyZWN0aXZlKHtcclxuICAgICAgICBzZWxlY3RvcjogJ1tuZ3hDbGlwYm9hcmRdJ1xyXG4gICAgfSlcclxuXSwgQ2xpcGJvYXJkRGlyZWN0aXZlKTtcclxuZXhwb3J0IHsgQ2xpcGJvYXJkRGlyZWN0aXZlIH07XHIiXX0=