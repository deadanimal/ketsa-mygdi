/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ModalOptions {
}
ModalOptions.ɵfac = function ModalOptions_Factory(t) { return new (t || ModalOptions)(); };
ModalOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: ModalOptions.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], null, null); })();
if (false) {
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
}
/** @type {?} */
export const modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export const CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export const SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export const TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export const DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9uZ3gtYm9vdHN0cmFwL21vZGFsL2VzbTIwMTUvbW9kYWwtb3B0aW9ucy5jbGFzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7OztDQUNDOzs7MEJBR0MiLCJmaWxlIjoibW9kYWwtb3B0aW9ucy5jbGFzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgY2xhc3MgTW9kYWxPcHRpb25zIHtcbn1cbk1vZGFsT3B0aW9ucy5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG5dO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogIEluY2x1ZGVzIGEgbW9kYWwtYmFja2Ryb3AgZWxlbWVudC4gQWx0ZXJuYXRpdmVseSxcbiAgICAgKiAgc3BlY2lmeSBzdGF0aWMgZm9yIGEgYmFja2Ryb3Agd2hpY2ggZG9lc24ndCBjbG9zZSB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5iYWNrZHJvcDtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUua2V5Ym9hcmQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuZm9jdXM7XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIG1vZGFsIHdoZW4gaW5pdGlhbGl6ZWQuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5zaG93O1xuICAgIC8qKlxuICAgICAqIElnbm9yZSB0aGUgYmFja2Ryb3AgY2xpY2tcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmlnbm9yZUJhY2tkcm9wQ2xpY2s7XG4gICAgLyoqXG4gICAgICogQ3NzIGNsYXNzIGZvciBvcGVuZWQgbW9kYWxcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmNsYXNzO1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBhbmltYXRpb25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmFuaW1hdGVkO1xuICAgIC8qKlxuICAgICAqIE1vZGFsIGRhdGFcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmluaXRpYWxTdGF0ZTtcbn1cbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBtb2RhbENvbmZpZ0RlZmF1bHRzID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIHNob3c6IGZhbHNlLFxuICAgIGlnbm9yZUJhY2tkcm9wQ2xpY2s6IGZhbHNlLFxuICAgIGNsYXNzOiAnJyxcbiAgICBhbmltYXRlZDogdHJ1ZSxcbiAgICBpbml0aWFsU3RhdGU6IHt9XG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUUgPSB7XG4gICAgU0NST0xMQkFSX01FQVNVUkVSOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICAgIEJBQ0tEUk9QOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgSU46ICdpbicsXG4gICAgLy8gYnMzXG4gICAgU0hPVzogJ3Nob3cnIC8vIGJzNFxufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBTRUxFQ1RPUiA9IHtcbiAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgICBEQVRBX0RJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLFxuICAgIEZJWEVEX0NPTlRFTlQ6ICcubmF2YmFyLWZpeGVkLXRvcCwgLm5hdmJhci1maXhlZC1ib3R0b20sIC5pcy1maXhlZCdcbn07XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgY29uc3QgVFJBTlNJVElPTl9EVVJBVElPTlMgPSB7XG4gICAgTU9EQUw6IDMwMCxcbiAgICBCQUNLRFJPUDogMTUwXG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IGNvbnN0IERJU01JU1NfUkVBU09OUyA9IHtcbiAgICBCQUNLUkRPUDogJ2JhY2tkcm9wLWNsaWNrJyxcbiAgICBFU0M6ICdlc2MnXG59O1xuIl19