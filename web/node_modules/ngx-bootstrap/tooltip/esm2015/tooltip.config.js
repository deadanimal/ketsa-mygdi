/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for tooltip
 */
import * as ɵngcc0 from '@angular/core';
export class TooltipConfig {
    constructor() {
        /**
         * sets disable adaptive position
         */
        this.adaptivePosition = true;
        /**
         * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
         */
        this.placement = 'top';
        /**
         * array of event names which triggers tooltip opening
         */
        this.triggers = 'hover focus';
        /**
         * delay before showing the tooltip
         */
        this.delay = 0;
    }
}
TooltipConfig.ɵfac = function TooltipConfig_Factory(t) { return new (t || TooltipConfig)(); };
TooltipConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TooltipConfig, factory: TooltipConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * sets disable adaptive position
     * @type {?}
     */
    TooltipConfig.prototype.adaptivePosition;
    /**
     * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
     * @type {?}
     */
    TooltipConfig.prototype.placement;
    /**
     * array of event names which triggers tooltip opening
     * @type {?}
     */
    TooltipConfig.prototype.triggers;
    /**
     * a selector specifying the element the tooltip should be appended to.
     * @type {?}
     */
    TooltipConfig.prototype.container;
    /**
     * delay before showing the tooltip
     * @type {?}
     */
    TooltipConfig.prototype.delay;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9uZ3gtYm9vdHN0cmFwL3Rvb2x0aXAvZXNtMjAxNS90b29sdGlwLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQzs7O2dEQUdDIiwiZmlsZSI6InRvb2x0aXAuY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogRGVmYXVsdCB2YWx1ZXMgcHJvdmlkZXIgZm9yIHRvb2x0aXBcbiAqL1xuZXhwb3J0IGNsYXNzIFRvb2x0aXBDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogc2V0cyBkaXNhYmxlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFkYXB0aXZlUG9zaXRpb24gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdG9vbHRpcCBwbGFjZW1lbnQsIHN1cHBvcnRlZCBwb3NpdGlvbnM6ICd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBsYWNlbWVudCA9ICd0b3AnO1xuICAgICAgICAvKipcbiAgICAgICAgICogYXJyYXkgb2YgZXZlbnQgbmFtZXMgd2hpY2ggdHJpZ2dlcnMgdG9vbHRpcCBvcGVuaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyaWdnZXJzID0gJ2hvdmVyIGZvY3VzJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRlbGF5IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlbGF5ID0gMDtcbiAgICB9XG59XG5Ub29sdGlwQ29uZmlnLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbl07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBzZXRzIGRpc2FibGUgYWRhcHRpdmUgcG9zaXRpb25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5hZGFwdGl2ZVBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIHRvb2x0aXAgcGxhY2VtZW50LCBzdXBwb3J0ZWQgcG9zaXRpb25zOiAndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J1xuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRvb2x0aXBDb25maWcucHJvdG90eXBlLnBsYWNlbWVudDtcbiAgICAvKipcbiAgICAgKiBhcnJheSBvZiBldmVudCBuYW1lcyB3aGljaCB0cmlnZ2VycyB0b29sdGlwIG9wZW5pbmdcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS50cmlnZ2VycztcbiAgICAvKipcbiAgICAgKiBhIHNlbGVjdG9yIHNwZWNpZnlpbmcgdGhlIGVsZW1lbnQgdGhlIHRvb2x0aXAgc2hvdWxkIGJlIGFwcGVuZGVkIHRvLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRvb2x0aXBDb25maWcucHJvdG90eXBlLmNvbnRhaW5lcjtcbiAgICAvKipcbiAgICAgKiBkZWxheSBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRvb2x0aXBDb25maWcucHJvdG90eXBlLmRlbGF5O1xufVxuIl19