{"version":3,"sources":["/Users/pipelinenetwork/ketsa-mygdi/web/node_modules/@angular/cdk/bundles/cdk-tree.umd.js"],"names":[],"mappings":"AAAA;iIAC2E;kHACG;wEACxC;iCACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+XV,AAKC;;;;;;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;;;;;;;;;;SA0BJ,AAQC;;;;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAiOH,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAwFoC,AAYpC;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsEA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAoGA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqCA,AAGA;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;SAsBD;;;;;;;;;;;;;;;;;;;;;;;gDAOC","file":"cdk-tree.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/collections'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/a11y')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/tree', ['exports', '@angular/cdk/collections', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/a11y'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.tree = {}), global.ng.cdk.collections, global.rxjs, global.rxjs.operators, global.ng.core, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.a11y));\n}(this, (function (exports, collections, rxjs, operators, core, bidi, coercion, a11y) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n    var BaseTreeControl = /** @class */ (function () {\n        function BaseTreeControl() {\n            /** A selection model with multi-selection to track expansion status. */\n            this.expansionModel = new collections.SelectionModel(true);\n        }\n        /** Toggles one single data node's expanded/collapsed state. */\n        BaseTreeControl.prototype.toggle = function (dataNode) {\n            this.expansionModel.toggle(dataNode);\n        };\n        /** Expands one single data node. */\n        BaseTreeControl.prototype.expand = function (dataNode) {\n            this.expansionModel.select(dataNode);\n        };\n        /** Collapses one single data node. */\n        BaseTreeControl.prototype.collapse = function (dataNode) {\n            this.expansionModel.deselect(dataNode);\n        };\n        /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n        BaseTreeControl.prototype.isExpanded = function (dataNode) {\n            return this.expansionModel.isSelected(dataNode);\n        };\n        /** Toggles a subtree rooted at `node` recursively. */\n        BaseTreeControl.prototype.toggleDescendants = function (dataNode) {\n            this.expansionModel.isSelected(dataNode)\n                ? this.collapseDescendants(dataNode)\n                : this.expandDescendants(dataNode);\n        };\n        /** Collapse all dataNodes in the tree. */\n        BaseTreeControl.prototype.collapseAll = function () {\n            this.expansionModel.clear();\n        };\n        /** Expands a subtree rooted at given data node recursively. */\n        BaseTreeControl.prototype.expandDescendants = function (dataNode) {\n            var _a;\n            var toBeProcessed = [dataNode];\n            toBeProcessed.push.apply(toBeProcessed, __spread(this.getDescendants(dataNode)));\n            (_a = this.expansionModel).select.apply(_a, __spread(toBeProcessed));\n        };\n        /** Collapses a subtree rooted at given data node recursively. */\n        BaseTreeControl.prototype.collapseDescendants = function (dataNode) {\n            var _a;\n            var toBeProcessed = [dataNode];\n            toBeProcessed.push.apply(toBeProcessed, __spread(this.getDescendants(dataNode)));\n            (_a = this.expansionModel).deselect.apply(_a, __spread(toBeProcessed));\n        };\n        return BaseTreeControl;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n    var FlatTreeControl = /** @class */ (function (_super) {\n        __extends(FlatTreeControl, _super);\n        /** Construct with flat tree data node functions getLevel and isExpandable. */\n        function FlatTreeControl(getLevel, isExpandable) {\n            var _this = _super.call(this) || this;\n            _this.getLevel = getLevel;\n            _this.isExpandable = isExpandable;\n            return _this;\n        }\n        /**\n         * Gets a list of the data node's subtree of descendent data nodes.\n         *\n         * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n         * with correct levels.\n         */\n        FlatTreeControl.prototype.getDescendants = function (dataNode) {\n            var startIndex = this.dataNodes.indexOf(dataNode);\n            var results = [];\n            // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n            // The level of descendants of a tree node must be greater than the level of the given\n            // tree node.\n            // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n            // If we reach a node whose level is greater than the level of the tree node, we hit a\n            // sibling of an ancestor.\n            for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n                results.push(this.dataNodes[i]);\n            }\n            return results;\n        };\n        /**\n         * Expands all data nodes in the tree.\n         *\n         * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n         * data nodes of the tree.\n         */\n        FlatTreeControl.prototype.expandAll = function () {\n            var _a;\n            (_a = this.expansionModel).select.apply(_a, __spread(this.dataNodes));\n        };\n        return FlatTreeControl;\n    }(BaseTreeControl));\n\n    /** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n    var NestedTreeControl = /** @class */ (function (_super) {\n        __extends(NestedTreeControl, _super);\n        /** Construct with nested tree function getChildren. */\n        function NestedTreeControl(getChildren) {\n            var _this = _super.call(this) || this;\n            _this.getChildren = getChildren;\n            return _this;\n        }\n        /**\n         * Expands all dataNodes in the tree.\n         *\n         * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n         * data nodes of the tree.\n         */\n        NestedTreeControl.prototype.expandAll = function () {\n            var _a;\n            var _this = this;\n            this.expansionModel.clear();\n            var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n                return __spread(accumulator, _this.getDescendants(dataNode), [dataNode]);\n            }, []);\n            (_a = this.expansionModel).select.apply(_a, __spread(allNodes));\n        };\n        /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n        NestedTreeControl.prototype.getDescendants = function (dataNode) {\n            var descendants = [];\n            this._getDescendants(descendants, dataNode);\n            // Remove the node itself\n            return descendants.splice(1);\n        };\n        /** A helper function to get descendants recursively. */\n        NestedTreeControl.prototype._getDescendants = function (descendants, dataNode) {\n            var _this = this;\n            descendants.push(dataNode);\n            var childrenNodes = this.getChildren(dataNode);\n            if (Array.isArray(childrenNodes)) {\n                childrenNodes.forEach(function (child) { return _this._getDescendants(descendants, child); });\n            }\n            else if (rxjs.isObservable(childrenNodes)) {\n                // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n                // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n                childrenNodes.pipe(operators.take(1), operators.filter(Boolean))\n                    .subscribe(function (children) {\n                    var e_1, _a;\n                    try {\n                        for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                            var child = children_1_1.value;\n                            _this._getDescendants(descendants, child);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                });\n            }\n        };\n        return NestedTreeControl;\n    }(BaseTreeControl));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token used to provide a `CdkTreeNode` to its outlet.\n     * Used primarily to avoid circular imports.\n     * @docs-private\n     */\n    var CDK_TREE_NODE_OUTLET_NODE = new core.InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n    /**\n     * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n     * inside the outlet.\n     */\n    var CdkTreeNodeOutlet = /** @class */ (function () {\n        function CdkTreeNodeOutlet(viewContainer, _node) {\n            this.viewContainer = viewContainer;\n            this._node = _node;\n        }\n        CdkTreeNodeOutlet.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkTreeNodeOutlet]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodeOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: core.Optional }] }\n        ]; };\n        return CdkTreeNodeOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Context provided to the tree node component. */\n    var CdkTreeNodeOutletContext = /** @class */ (function () {\n        function CdkTreeNodeOutletContext(data) {\n            this.$implicit = data;\n        }\n        return CdkTreeNodeOutletContext;\n    }());\n    /**\n     * Data node definition for the CdkTree.\n     * Captures the node's template and a when predicate that describes when this node should be used.\n     */\n    var CdkTreeNodeDef = /** @class */ (function () {\n        /** @docs-private */\n        function CdkTreeNodeDef(template) {\n            this.template = template;\n        }\n        CdkTreeNodeDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkTreeNodeDef]',\n                        inputs: [\n                            'when: cdkTreeNodeDefWhen'\n                        ],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodeDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkTreeNodeDef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when there is no usable data.\n     * @docs-private\n     */\n    function getTreeNoValidDataSourceError() {\n        return Error(\"A valid data source must be provided.\");\n    }\n    /**\n     * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n     * @docs-private\n     */\n    function getTreeMultipleDefaultNodeDefsError() {\n        return Error(\"There can only be one default row without a when predicate function.\");\n    }\n    /**\n     * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n     * @docs-private\n     */\n    function getTreeMissingMatchingNodeDefError() {\n        return Error(\"Could not find a matching node definition for the provided node data.\");\n    }\n    /**\n     * Returns an error to be thrown when there are tree control.\n     * @docs-private\n     */\n    function getTreeControlMissingError() {\n        return Error(\"Could not find a tree control for the tree.\");\n    }\n    /**\n     * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n     * @docs-private\n     */\n    function getTreeControlFunctionsMissingError() {\n        return Error(\"Could not find functions for nested/flat tree in tree control.\");\n    }\n\n    /**\n     * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n     * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n     */\n    var CdkTree = /** @class */ (function () {\n        function CdkTree(_differs, _changeDetectorRef) {\n            this._differs = _differs;\n            this._changeDetectorRef = _changeDetectorRef;\n            /** Subject that emits when the component has been destroyed. */\n            this._onDestroy = new rxjs.Subject();\n            /** Level of nodes */\n            this._levels = new Map();\n            // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n            //     Remove the MAX_VALUE in viewChange\n            /**\n             * Stream containing the latest information on what rows are being displayed on screen.\n             * Can be used by the data source to as a heuristic of what data should be provided.\n             */\n            this.viewChange = new rxjs.BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        }\n        Object.defineProperty(CdkTree.prototype, \"dataSource\", {\n            /**\n             * Provides a stream containing the latest data array to render. Influenced by the tree's\n             * stream of view window (what dataNodes are currently on screen).\n             * Data source can be an observable of data array, or a data array to render.\n             */\n            get: function () { return this._dataSource; },\n            set: function (dataSource) {\n                if (this._dataSource !== dataSource) {\n                    this._switchDataSource(dataSource);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTree.prototype.ngOnInit = function () {\n            this._dataDiffer = this._differs.find([]).create(this.trackBy);\n            if (!this.treeControl) {\n                throw getTreeControlMissingError();\n            }\n        };\n        CdkTree.prototype.ngOnDestroy = function () {\n            this._nodeOutlet.viewContainer.clear();\n            this.viewChange.complete();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n                this.dataSource.disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n        };\n        CdkTree.prototype.ngAfterContentChecked = function () {\n            var defaultNodeDefs = this._nodeDefs.filter(function (def) { return !def.when; });\n            if (defaultNodeDefs.length > 1) {\n                throw getTreeMultipleDefaultNodeDefsError();\n            }\n            this._defaultNodeDef = defaultNodeDefs[0];\n            if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n                this._observeRenderChanges();\n            }\n        };\n        // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n        //     and nested trees.\n        /**\n         * Switch to the provided data source by resetting the data and unsubscribing from the current\n         * render change subscription if one exists. If the data source is null, interpret this by\n         * clearing the node outlet. Otherwise start listening for new data.\n         */\n        CdkTree.prototype._switchDataSource = function (dataSource) {\n            if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n                this.dataSource.disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n            // Remove the all dataNodes if there is now no data source\n            if (!dataSource) {\n                this._nodeOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n            if (this._nodeDefs) {\n                this._observeRenderChanges();\n            }\n        };\n        /** Set up a subscription for the data provided by the data source. */\n        CdkTree.prototype._observeRenderChanges = function () {\n            var _this = this;\n            var dataStream;\n            if (collections.isDataSource(this._dataSource)) {\n                dataStream = this._dataSource.connect(this);\n            }\n            else if (rxjs.isObservable(this._dataSource)) {\n                dataStream = this._dataSource;\n            }\n            else if (Array.isArray(this._dataSource)) {\n                dataStream = rxjs.of(this._dataSource);\n            }\n            if (dataStream) {\n                this._dataSubscription = dataStream.pipe(operators.takeUntil(this._onDestroy))\n                    .subscribe(function (data) { return _this.renderNodeChanges(data); });\n            }\n            else {\n                throw getTreeNoValidDataSourceError();\n            }\n        };\n        /** Check for changes made in the data and render each change (node added/removed/moved). */\n        CdkTree.prototype.renderNodeChanges = function (data, dataDiffer, viewContainer, parentData) {\n            var _this = this;\n            if (dataDiffer === void 0) { dataDiffer = this._dataDiffer; }\n            if (viewContainer === void 0) { viewContainer = this._nodeOutlet.viewContainer; }\n            var changes = dataDiffer.diff(data);\n            if (!changes) {\n                return;\n            }\n            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n                if (item.previousIndex == null) {\n                    _this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                    _this._levels.delete(item.item);\n                }\n                else {\n                    var view = viewContainer.get(adjustedPreviousIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n            this._changeDetectorRef.detectChanges();\n        };\n        /**\n         * Finds the matching node definition that should be used for this node data. If there is only\n         * one node definition, it is returned. Otherwise, find the node definition that has a when\n         * predicate that returns true with the data. If none return true, return the default node\n         * definition.\n         */\n        CdkTree.prototype._getNodeDef = function (data, i) {\n            if (this._nodeDefs.length === 1) {\n                return this._nodeDefs.first;\n            }\n            var nodeDef = this._nodeDefs.find(function (def) { return def.when && def.when(i, data); }) || this._defaultNodeDef;\n            if (!nodeDef) {\n                throw getTreeMissingMatchingNodeDefError();\n            }\n            return nodeDef;\n        };\n        /**\n         * Create the embedded view for the data node template and place it in the correct index location\n         * within the data node view container.\n         */\n        CdkTree.prototype.insertNode = function (nodeData, index, viewContainer, parentData) {\n            var node = this._getNodeDef(nodeData, index);\n            // Node context that will be provided to created embedded view\n            var context = new CdkTreeNodeOutletContext(nodeData);\n            // If the tree is flat tree, then use the `getLevel` function in flat tree control\n            // Otherwise, use the level of parent node.\n            if (this.treeControl.getLevel) {\n                context.level = this.treeControl.getLevel(nodeData);\n            }\n            else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n                context.level = this._levels.get(parentData) + 1;\n            }\n            else {\n                context.level = 0;\n            }\n            this._levels.set(nodeData, context.level);\n            // Use default tree nodeOutlet, or nested node's nodeOutlet\n            var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n            container.createEmbeddedView(node.template, context, index);\n            // Set the data to just created `CdkTreeNode`.\n            // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n            //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n            if (CdkTreeNode.mostRecentTreeNode) {\n                CdkTreeNode.mostRecentTreeNode.data = nodeData;\n            }\n        };\n        CdkTree.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-tree',\n                        exportAs: 'cdkTree',\n                        template: \"<ng-container cdkTreeNodeOutlet></ng-container>\",\n                        host: {\n                            'class': 'cdk-tree',\n                            'role': 'tree',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                        // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                        // declared elsewhere, they are checked when their declaration points are checked.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkTree.ctorParameters = function () { return [\n            { type: core.IterableDiffers },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        CdkTree.propDecorators = {\n            dataSource: [{ type: core.Input }],\n            treeControl: [{ type: core.Input }],\n            trackBy: [{ type: core.Input }],\n            _nodeOutlet: [{ type: core.ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n            _nodeDefs: [{ type: core.ContentChildren, args: [CdkTreeNodeDef, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return CdkTree;\n    }());\n    /**\n     * Tree node for CdkTree. It contains the data in the tree node.\n     */\n    var CdkTreeNode = /** @class */ (function () {\n        function CdkTreeNode(_elementRef, _tree) {\n            this._elementRef = _elementRef;\n            this._tree = _tree;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Emits when the node's data has changed. */\n            this._dataChanges = new rxjs.Subject();\n            /**\n             * The role of the node should be 'group' if it's an internal node,\n             * and 'treeitem' if it's a leaf node.\n             */\n            this.role = 'treeitem';\n            CdkTreeNode.mostRecentTreeNode = this;\n        }\n        Object.defineProperty(CdkTreeNode.prototype, \"data\", {\n            /** The tree node's data. */\n            get: function () { return this._data; },\n            set: function (value) {\n                if (value !== this._data) {\n                    this._data = value;\n                    this._setRoleFromData();\n                    this._dataChanges.next();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTreeNode.prototype, \"isExpanded\", {\n            get: function () {\n                return this._tree.treeControl.isExpanded(this._data);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTreeNode.prototype, \"level\", {\n            get: function () {\n                return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTreeNode.prototype.ngOnDestroy = function () {\n            // If this is the last tree node being destroyed,\n            // clear out the reference to avoid leaking memory.\n            if (CdkTreeNode.mostRecentTreeNode === this) {\n                CdkTreeNode.mostRecentTreeNode = null;\n            }\n            this._dataChanges.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Focuses the menu item. Implements for FocusableOption. */\n        CdkTreeNode.prototype.focus = function () {\n            this._elementRef.nativeElement.focus();\n        };\n        CdkTreeNode.prototype._setRoleFromData = function () {\n            var _this = this;\n            if (this._tree.treeControl.isExpandable) {\n                this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n            }\n            else {\n                if (!this._tree.treeControl.getChildren) {\n                    throw getTreeControlFunctionsMissingError();\n                }\n                var childrenNodes = this._tree.treeControl.getChildren(this._data);\n                if (Array.isArray(childrenNodes)) {\n                    this._setRoleFromChildren(childrenNodes);\n                }\n                else if (rxjs.isObservable(childrenNodes)) {\n                    childrenNodes.pipe(operators.takeUntil(this._destroyed))\n                        .subscribe(function (children) { return _this._setRoleFromChildren(children); });\n                }\n            }\n        };\n        CdkTreeNode.prototype._setRoleFromChildren = function (children) {\n            this.role = children && children.length ? 'group' : 'treeitem';\n        };\n        /**\n         * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n         * in `CdkTree` and set the data to it.\n         */\n        CdkTreeNode.mostRecentTreeNode = null;\n        CdkTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-tree-node',\n                        exportAs: 'cdkTreeNode',\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                            '[attr.role]': 'role',\n                            'class': 'cdk-tree-node',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: CdkTree }\n        ]; };\n        CdkTreeNode.propDecorators = {\n            role: [{ type: core.Input }]\n        };\n        return CdkTreeNode;\n    }());\n\n    /**\n     * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n     * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n     * be added in the `cdkTreeNodeOutlet` in tree node template.\n     * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n     */\n    var CdkNestedTreeNode = /** @class */ (function (_super) {\n        __extends(CdkNestedTreeNode, _super);\n        function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n            var _this = _super.call(this, _elementRef, _tree) || this;\n            _this._elementRef = _elementRef;\n            _this._tree = _tree;\n            _this._differs = _differs;\n            return _this;\n        }\n        CdkNestedTreeNode.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            var childrenNodes = this._tree.treeControl.getChildren(this.data);\n            if (Array.isArray(childrenNodes)) {\n                this.updateChildrenNodes(childrenNodes);\n            }\n            else if (rxjs.isObservable(childrenNodes)) {\n                childrenNodes.pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (result) { return _this.updateChildrenNodes(result); });\n            }\n            this.nodeOutlet.changes.pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this.updateChildrenNodes(); });\n        };\n        CdkNestedTreeNode.prototype.ngOnDestroy = function () {\n            this._clear();\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        /** Add children dataNodes to the NodeOutlet */\n        CdkNestedTreeNode.prototype.updateChildrenNodes = function (children) {\n            var outlet = this._getNodeOutlet();\n            if (children) {\n                this._children = children;\n            }\n            if (outlet && this._children) {\n                var viewContainer = outlet.viewContainer;\n                this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n            }\n            else {\n                // Reset the data differ if there's no children nodes displayed\n                this._dataDiffer.diff([]);\n            }\n        };\n        /** Clear the children dataNodes. */\n        CdkNestedTreeNode.prototype._clear = function () {\n            var outlet = this._getNodeOutlet();\n            if (outlet) {\n                outlet.viewContainer.clear();\n                this._dataDiffer.diff([]);\n            }\n        };\n        /** Gets the outlet for the current node. */\n        CdkNestedTreeNode.prototype._getNodeOutlet = function () {\n            var _this = this;\n            var outlets = this.nodeOutlet;\n            // Note that since we use `descendants: true` on the query, we have to ensure\n            // that we don't pick up the outlet of a child node by accident.\n            return outlets && outlets.find(function (outlet) { return !outlet._node || outlet._node === _this; });\n        };\n        CdkNestedTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-nested-tree-node',\n                        exportAs: 'cdkNestedTreeNode',\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.role]': 'role',\n                            'class': 'cdk-tree-node cdk-nested-tree-node',\n                        },\n                        providers: [\n                            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                        ]\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkNestedTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: CdkTree },\n            { type: core.IterableDiffers }\n        ]; };\n        CdkNestedTreeNode.propDecorators = {\n            nodeOutlet: [{ type: core.ContentChildren, args: [CdkTreeNodeOutlet, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return CdkNestedTreeNode;\n    }(CdkTreeNode));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Regex used to split a string on its CSS units. */\n    var cssUnitPattern = /([A-Za-z%]+)$/;\n    /**\n     * Indent for the children tree dataNodes.\n     * This directive will add left-padding to the node to show hierarchy.\n     */\n    var CdkTreeNodePadding = /** @class */ (function () {\n        function CdkTreeNodePadding(_treeNode, _tree, \n        /**\n         * @deprecated _renderer parameter no longer being used. To be removed.\n         * @breaking-change 11.0.0\n         */\n        _renderer, _element, _dir) {\n            var _this = this;\n            this._treeNode = _treeNode;\n            this._tree = _tree;\n            this._element = _element;\n            this._dir = _dir;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** CSS units used for the indentation value. */\n            this.indentUnits = 'px';\n            this._indent = 40;\n            this._setPadding();\n            if (_dir) {\n                _dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () { return _this._setPadding(true); });\n            }\n            // In Ivy the indentation binding might be set before the tree node's data has been added,\n            // which means that we'll miss the first render. We have to subscribe to changes in the\n            // data to ensure that everything is up to date.\n            _treeNode._dataChanges.subscribe(function () { return _this._setPadding(); });\n        }\n        Object.defineProperty(CdkTreeNodePadding.prototype, \"level\", {\n            /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n            get: function () { return this._level; },\n            set: function (value) {\n                // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n                // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n                // they set 0 explicitly.\n                this._level = coercion.coerceNumberProperty(value, null);\n                this._setPadding();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTreeNodePadding.prototype, \"indent\", {\n            /**\n             * The indent for each level. Can be a number or a CSS string.\n             * Default number 40px from material design menu sub-menu spec.\n             */\n            get: function () { return this._indent; },\n            set: function (indent) {\n                var value = indent;\n                var units = 'px';\n                if (typeof indent === 'string') {\n                    var parts = indent.split(cssUnitPattern);\n                    value = parts[0];\n                    units = parts[1] || units;\n                }\n                this.indentUnits = units;\n                this._indent = coercion.coerceNumberProperty(value);\n                this._setPadding();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTreeNodePadding.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n        CdkTreeNodePadding.prototype._paddingIndent = function () {\n            var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n                ? this._tree.treeControl.getLevel(this._treeNode.data)\n                : null;\n            var level = this._level == null ? nodeLevel : this._level;\n            return typeof level === 'number' ? \"\" + level * this._indent + this.indentUnits : null;\n        };\n        CdkTreeNodePadding.prototype._setPadding = function (forceChange) {\n            if (forceChange === void 0) { forceChange = false; }\n            var padding = this._paddingIndent();\n            if (padding !== this._currentPadding || forceChange) {\n                var element = this._element.nativeElement;\n                var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n                var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n                element.style[paddingProp] = padding || '';\n                element.style[resetProp] = '';\n                this._currentPadding = padding;\n            }\n        };\n        CdkTreeNodePadding.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkTreeNodePadding]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodePadding.ctorParameters = function () { return [\n            { type: CdkTreeNode },\n            { type: CdkTree },\n            { type: core.Renderer2 },\n            { type: core.ElementRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        CdkTreeNodePadding.propDecorators = {\n            level: [{ type: core.Input, args: ['cdkTreeNodePadding',] }],\n            indent: [{ type: core.Input, args: ['cdkTreeNodePaddingIndent',] }]\n        };\n        return CdkTreeNodePadding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Node toggle to expand/collapse the node.\n     */\n    var CdkTreeNodeToggle = /** @class */ (function () {\n        function CdkTreeNodeToggle(_tree, _treeNode) {\n            this._tree = _tree;\n            this._treeNode = _treeNode;\n            this._recursive = false;\n        }\n        Object.defineProperty(CdkTreeNodeToggle.prototype, \"recursive\", {\n            /** Whether expand/collapse the node recursively. */\n            get: function () { return this._recursive; },\n            set: function (value) { this._recursive = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        CdkTreeNodeToggle.prototype._toggle = function (event) {\n            this.recursive\n                ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n                : this._tree.treeControl.toggle(this._treeNode.data);\n            event.stopPropagation();\n        };\n        CdkTreeNodeToggle.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkTreeNodeToggle]' },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodeToggle.ctorParameters = function () { return [\n            { type: CdkTree },\n            { type: CdkTreeNode }\n        ]; };\n        CdkTreeNodeToggle.propDecorators = {\n            recursive: [{ type: core.Input, args: ['cdkTreeNodeToggleRecursive',] }],\n            _toggle: [{ type: core.HostListener, args: ['click', ['$event'],] }]\n        };\n        return CdkTreeNodeToggle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [\n        CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet,\n    ];\n    var CdkTreeModule = /** @class */ (function () {\n        function CdkTreeModule() {\n        }\n        CdkTreeModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS,\n                        providers: [a11y.FocusMonitor, CdkTreeNodeDef]\n                    },] }\n        ];\n        return CdkTreeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.BaseTreeControl = BaseTreeControl;\n    exports.CDK_TREE_NODE_OUTLET_NODE = CDK_TREE_NODE_OUTLET_NODE;\n    exports.CdkNestedTreeNode = CdkNestedTreeNode;\n    exports.CdkTree = CdkTree;\n    exports.CdkTreeModule = CdkTreeModule;\n    exports.CdkTreeNode = CdkTreeNode;\n    exports.CdkTreeNodeDef = CdkTreeNodeDef;\n    exports.CdkTreeNodeOutlet = CdkTreeNodeOutlet;\n    exports.CdkTreeNodeOutletContext = CdkTreeNodeOutletContext;\n    exports.CdkTreeNodePadding = CdkTreeNodePadding;\n    exports.CdkTreeNodeToggle = CdkTreeNodeToggle;\n    exports.FlatTreeControl = FlatTreeControl;\n    exports.NestedTreeControl = NestedTreeControl;\n    exports.getTreeControlFunctionsMissingError = getTreeControlFunctionsMissingError;\n    exports.getTreeControlMissingError = getTreeControlMissingError;\n    exports.getTreeMissingMatchingNodeDefError = getTreeMissingMatchingNodeDefError;\n    exports.getTreeMultipleDefaultNodeDefsError = getTreeMultipleDefaultNodeDefsError;\n    exports.getTreeNoValidDataSourceError = getTreeNoValidDataSourceError;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}