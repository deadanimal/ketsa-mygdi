/**
 * @fileoverview added by tsickle
 * Generated from: src/material/icon/testing/fake-icon-registry.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, NgModule } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { of as observableOf } from 'rxjs';
// tslint:enable:no-any
/**
 * A null icon registry that must be imported to allow disabling of custom
 * icons.
 */
import * as ɵngcc0 from '@angular/core';
export class FakeMatIconRegistry {
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIcon() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconLiteral() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconLiteralInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSet() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSetLiteral() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSetInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    addSvgIconSetLiteralInNamespace() {
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    registerFontClassAlias() {
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} alias
     * @return {?}
     */
    classNameForFontAlias(alias) {
        return alias;
    }
    /**
     * @return {?}
     */
    getDefaultFontSetClass() {
        return 'material-icons';
    }
    /**
     * @return {?}
     */
    getSvgIconFromUrl() {
        return observableOf(this._generateEmptySvg());
    }
    /**
     * @return {?}
     */
    getNamedSvgIcon() {
        return observableOf(this._generateEmptySvg());
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    setDefaultFontSetClass() {
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    _generateEmptySvg() {
        /** @type {?} */
        const emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        emptySvg.classList.add('fake-testing-svg');
        // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.
        emptySvg.setAttribute('fit', '');
        emptySvg.setAttribute('height', '100%');
        emptySvg.setAttribute('width', '100%');
        emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        emptySvg.setAttribute('focusable', 'false');
        return emptySvg;
    }
}
FakeMatIconRegistry.ɵfac = function FakeMatIconRegistry_Factory(t) { return new (t || FakeMatIconRegistry)(); };
FakeMatIconRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FakeMatIconRegistry, factory: FakeMatIconRegistry.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FakeMatIconRegistry, [{
        type: Injectable
    }], null, null); })();
/**
 * Import this module in tests to install the null icon registry.
 */
export class MatIconTestingModule {
}
MatIconTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconTestingModule });
MatIconTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconTestingModule_Factory(t) { return new (t || MatIconTestingModule)(); }, providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconTestingModule, [{
        type: NgModule,
        args: [{
                providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9AYW5ndWxhci9tYXRlcmlhbC9lc20yMDE1L2ljb24vdGVzdGluZy9mYWtlLWljb24tcmVnaXN0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4SEM7OzswQkFHQzs7Ozs7OztDQUtEOzs7Ozs7MEJBS0MiLCJmaWxlIjoiZmFrZS1pY29uLXJlZ2lzdHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEdlbmVyYXRlZCBmcm9tOiBzcmMvbWF0ZXJpYWwvaWNvbi90ZXN0aW5nL2Zha2UtaWNvbi1yZWdpc3RyeS50c1xuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xuLy8gdHNsaW50OmVuYWJsZTpuby1hbnlcbi8qKlxuICogQSBudWxsIGljb24gcmVnaXN0cnkgdGhhdCBtdXN0IGJlIGltcG9ydGVkIHRvIGFsbG93IGRpc2FibGluZyBvZiBjdXN0b21cbiAqIGljb25zLlxuICovXG5leHBvcnQgY2xhc3MgRmFrZU1hdEljb25SZWdpc3RyeSB7XG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFRISVNcbiAgICAgKiBAdGhpcyB7VEhJU31cbiAgICAgKiBAcmV0dXJuIHtUSElTfVxuICAgICAqL1xuICAgIGFkZFN2Z0ljb24oKSB7XG4gICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVEhJU1xuICAgICAqIEB0aGlzIHtUSElTfVxuICAgICAqIEByZXR1cm4ge1RISVN9XG4gICAgICovXG4gICAgYWRkU3ZnSWNvbkxpdGVyYWwoKSB7XG4gICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVEhJU1xuICAgICAqIEB0aGlzIHtUSElTfVxuICAgICAqIEByZXR1cm4ge1RISVN9XG4gICAgICovXG4gICAgYWRkU3ZnSWNvbkluTmFtZXNwYWNlKCkge1xuICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFRISVNcbiAgICAgKiBAdGhpcyB7VEhJU31cbiAgICAgKiBAcmV0dXJuIHtUSElTfVxuICAgICAqL1xuICAgIGFkZFN2Z0ljb25MaXRlcmFsSW5OYW1lc3BhY2UoKSB7XG4gICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVEhJU1xuICAgICAqIEB0aGlzIHtUSElTfVxuICAgICAqIEByZXR1cm4ge1RISVN9XG4gICAgICovXG4gICAgYWRkU3ZnSWNvblNldCgpIHtcbiAgICAgICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovICh0aGlzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUSElTXG4gICAgICogQHRoaXMge1RISVN9XG4gICAgICogQHJldHVybiB7VEhJU31cbiAgICAgKi9cbiAgICBhZGRTdmdJY29uU2V0TGl0ZXJhbCgpIHtcbiAgICAgICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovICh0aGlzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUSElTXG4gICAgICogQHRoaXMge1RISVN9XG4gICAgICogQHJldHVybiB7VEhJU31cbiAgICAgKi9cbiAgICBhZGRTdmdJY29uU2V0SW5OYW1lc3BhY2UoKSB7XG4gICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVEhJU1xuICAgICAqIEB0aGlzIHtUSElTfVxuICAgICAqIEByZXR1cm4ge1RISVN9XG4gICAgICovXG4gICAgYWRkU3ZnSWNvblNldExpdGVyYWxJbk5hbWVzcGFjZSgpIHtcbiAgICAgICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovICh0aGlzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUSElTXG4gICAgICogQHRoaXMge1RISVN9XG4gICAgICogQHJldHVybiB7VEhJU31cbiAgICAgKi9cbiAgICByZWdpc3RlckZvbnRDbGFzc0FsaWFzKCkge1xuICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhbGlhc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgY2xhc3NOYW1lRm9yRm9udEFsaWFzKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBhbGlhcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0Rm9udFNldENsYXNzKCkge1xuICAgICAgICByZXR1cm4gJ21hdGVyaWFsLWljb25zJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBnZXRTdmdJY29uRnJvbVVybCgpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVPZih0aGlzLl9nZW5lcmF0ZUVtcHR5U3ZnKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGdldE5hbWVkU3ZnSWNvbigpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVPZih0aGlzLl9nZW5lcmF0ZUVtcHR5U3ZnKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVEhJU1xuICAgICAqIEB0aGlzIHtUSElTfVxuICAgICAqIEByZXR1cm4ge1RISVN9XG4gICAgICovXG4gICAgc2V0RGVmYXVsdEZvbnRTZXRDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovICh0aGlzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7IH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgX2dlbmVyYXRlRW1wdHlTdmcoKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgY29uc3QgZW1wdHlTdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICBlbXB0eVN2Zy5jbGFzc0xpc3QuYWRkKCdmYWtlLXRlc3Rpbmctc3ZnJyk7XG4gICAgICAgIC8vIEVtdWxhdGUgcmVhbCBpY29uIGNoYXJhY3RlcmlzdGljcyBmcm9tIGBNYXRJY29uUmVnaXN0cnlgIHNvIHNpemUgcmVtYWlucyBjb25zaXN0ZW50IGluIHRlc3RzLlxuICAgICAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ2ZpdCcsICcnKTtcbiAgICAgICAgZW1wdHlTdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMTAwJScpO1xuICAgICAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzEwMCUnKTtcbiAgICAgICAgZW1wdHlTdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3hNaWRZTWlkIG1lZXQnKTtcbiAgICAgICAgZW1wdHlTdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTtcbiAgICAgICAgcmV0dXJuIGVtcHR5U3ZnO1xuICAgIH1cbn1cbkZha2VNYXRJY29uUmVnaXN0cnkuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbi8qKlxuICogSW1wb3J0IHRoaXMgbW9kdWxlIGluIHRlc3RzIHRvIGluc3RhbGwgdGhlIG51bGwgaWNvbiByZWdpc3RyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hdEljb25UZXN0aW5nTW9kdWxlIHtcbn1cbk1hdEljb25UZXN0aW5nTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE1hdEljb25SZWdpc3RyeSwgdXNlQ2xhc3M6IEZha2VNYXRJY29uUmVnaXN0cnkgfV1cbiAgICAgICAgICAgIH0sXSB9XG5dO1xuIl19