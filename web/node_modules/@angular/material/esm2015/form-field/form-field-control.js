/**
 * @fileoverview added by tsickle
 * Generated from: src/material/form-field/form-field-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive } from '@angular/core';
/**
 * An interface which allows a control to work inside of a `MatFormField`.
 * @abstract
 * @template T
 */
import * as ɵngcc0 from '@angular/core';
export class MatFormFieldControl {
}
MatFormFieldControl.ɵfac = function MatFormFieldControl_Factory(t) { return new (t || MatFormFieldControl)(); };
MatFormFieldControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFormFieldControl });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldControl, [{
        type: Directive
    }], null, null); })();
if (false) {
    /**
     * The value of the control.
     * @type {?}
     */
    MatFormFieldControl.prototype.value;
    /**
     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`
     * needs to run change detection.
     * @type {?}
     */
    MatFormFieldControl.prototype.stateChanges;
    /**
     * The element ID for this control.
     * @type {?}
     */
    MatFormFieldControl.prototype.id;
    /**
     * The placeholder for this control.
     * @type {?}
     */
    MatFormFieldControl.prototype.placeholder;
    /**
     * Gets the NgControl for this control.
     * @type {?}
     */
    MatFormFieldControl.prototype.ngControl;
    /**
     * Whether the control is focused.
     * @type {?}
     */
    MatFormFieldControl.prototype.focused;
    /**
     * Whether the control is empty.
     * @type {?}
     */
    MatFormFieldControl.prototype.empty;
    /**
     * Whether the `MatFormField` label should try to float.
     * @type {?}
     */
    MatFormFieldControl.prototype.shouldLabelFloat;
    /**
     * Whether the control is required.
     * @type {?}
     */
    MatFormFieldControl.prototype.required;
    /**
     * Whether the control is disabled.
     * @type {?}
     */
    MatFormFieldControl.prototype.disabled;
    /**
     * Whether the control is in an error state.
     * @type {?}
     */
    MatFormFieldControl.prototype.errorState;
    /**
     * An optional name for the control type that can be used to distinguish `mat-form-field` elements
     * based on their control type. The form field will add a class,
     * `mat-form-field-type-{{controlType}}` to its root element.
     * @type {?}
     */
    MatFormFieldControl.prototype.controlType;
    /**
     * Whether the input is currently in an autofilled state. If property is not present on the
     * control it is assumed to be false.
     * @type {?}
     */
    MatFormFieldControl.prototype.autofilled;
    /**
     * Sets the list of element IDs that currently describe this control.
     * @abstract
     * @param {?} ids
     * @return {?}
     */
    MatFormFieldControl.prototype.setDescribedByIds = function (ids) { };
    /**
     * Handles a click on the control's container.
     * @abstract
     * @param {?} event
     * @return {?}
     */
    MatFormFieldControl.prototype.onContainerClick = function (event) { };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9AYW5ndWxhci9tYXRlcmlhbC9lc20yMDE1L2Zvcm0tZmllbGQvZm9ybS1maWVsZC1jb250cm9sLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Q0FDQzs7OzBCQUdDIiwiZmlsZSI6ImZvcm0tZmllbGQtY29udHJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBHZW5lcmF0ZWQgZnJvbTogc3JjL21hdGVyaWFsL2Zvcm0tZmllbGQvZm9ybS1maWVsZC1jb250cm9sLnRzXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIEFuIGludGVyZmFjZSB3aGljaCBhbGxvd3MgYSBjb250cm9sIHRvIHdvcmsgaW5zaWRlIG9mIGEgYE1hdEZvcm1GaWVsZGAuXG4gKiBAYWJzdHJhY3RcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRGb3JtRmllbGRDb250cm9sIHtcbn1cbk1hdEZvcm1GaWVsZENvbnRyb2wuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IERpcmVjdGl2ZSB9XG5dO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBjb250cm9sLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1hdEZvcm1GaWVsZENvbnRyb2wucHJvdG90eXBlLnZhbHVlO1xuICAgIC8qKlxuICAgICAqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW5ldmVyIHRoZSBzdGF0ZSBvZiB0aGUgY29udHJvbCBjaGFuZ2VzIHN1Y2ggdGhhdCB0aGUgcGFyZW50IGBNYXRGb3JtRmllbGRgXG4gICAgICogbmVlZHMgdG8gcnVuIGNoYW5nZSBkZXRlY3Rpb24uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUuc3RhdGVDaGFuZ2VzO1xuICAgIC8qKlxuICAgICAqIFRoZSBlbGVtZW50IElEIGZvciB0aGlzIGNvbnRyb2wuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUuaWQ7XG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlaG9sZGVyIGZvciB0aGlzIGNvbnRyb2wuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUucGxhY2Vob2xkZXI7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgTmdDb250cm9sIGZvciB0aGlzIGNvbnRyb2wuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUubmdDb250cm9sO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNvbnRyb2wgaXMgZm9jdXNlZC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNYXRGb3JtRmllbGRDb250cm9sLnByb3RvdHlwZS5mb2N1c2VkO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNvbnRyb2wgaXMgZW1wdHkuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUuZW1wdHk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgYE1hdEZvcm1GaWVsZGAgbGFiZWwgc2hvdWxkIHRyeSB0byBmbG9hdC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNYXRGb3JtRmllbGRDb250cm9sLnByb3RvdHlwZS5zaG91bGRMYWJlbEZsb2F0O1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNvbnRyb2wgaXMgcmVxdWlyZWQuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUucmVxdWlyZWQ7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY29udHJvbCBpcyBkaXNhYmxlZC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNYXRGb3JtRmllbGRDb250cm9sLnByb3RvdHlwZS5kaXNhYmxlZDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjb250cm9sIGlzIGluIGFuIGVycm9yIHN0YXRlLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1hdEZvcm1GaWVsZENvbnRyb2wucHJvdG90eXBlLmVycm9yU3RhdGU7XG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIGNvbnRyb2wgdHlwZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGRpc3Rpbmd1aXNoIGBtYXQtZm9ybS1maWVsZGAgZWxlbWVudHNcbiAgICAgKiBiYXNlZCBvbiB0aGVpciBjb250cm9sIHR5cGUuIFRoZSBmb3JtIGZpZWxkIHdpbGwgYWRkIGEgY2xhc3MsXG4gICAgICogYG1hdC1mb3JtLWZpZWxkLXR5cGUte3tjb250cm9sVHlwZX19YCB0byBpdHMgcm9vdCBlbGVtZW50LlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1hdEZvcm1GaWVsZENvbnRyb2wucHJvdG90eXBlLmNvbnRyb2xUeXBlO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGlucHV0IGlzIGN1cnJlbnRseSBpbiBhbiBhdXRvZmlsbGVkIHN0YXRlLiBJZiBwcm9wZXJ0eSBpcyBub3QgcHJlc2VudCBvbiB0aGVcbiAgICAgKiBjb250cm9sIGl0IGlzIGFzc3VtZWQgdG8gYmUgZmFsc2UuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUuYXV0b2ZpbGxlZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IG9mIGVsZW1lbnQgSURzIHRoYXQgY3VycmVudGx5IGRlc2NyaWJlIHRoaXMgY29udHJvbC5cbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0gez99IGlkc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTWF0Rm9ybUZpZWxkQ29udHJvbC5wcm90b3R5cGUuc2V0RGVzY3JpYmVkQnlJZHMgPSBmdW5jdGlvbiAoaWRzKSB7IH07XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBhIGNsaWNrIG9uIHRoZSBjb250cm9sJ3MgY29udGFpbmVyLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7P30gZXZlbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE1hdEZvcm1GaWVsZENvbnRyb2wucHJvdG90eXBlLm9uQ29udGFpbmVyQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHsgfTtcbn1cbiJdfQ==