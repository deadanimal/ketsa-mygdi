{"version":3,"sources":["/Users/pipelinenetwork/ketsa-mygdi/web/node_modules/@angular/material/bundles/material-tree.umd.js"],"names":[],"mappings":"AAAA;mKAC2E;gJACQ;gGAC7C;wCACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA2NV,AAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;SAUD,AASC;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0CA,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;SAWD,AAMC;;;;;;;;;;;;;;;;;;;;oBAIA;;;;;;;;;;;;;;;;;;;SAmBD,AASC;;;;;;;;;;;;;;;;;;;;;;;;;kCAKG;;;;;;;;;;;;;;;;;;SAkBJ,AAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;SAoBD,AAMC;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;SAsBD;;;;;;;;;;;;;;;;;;;;;;;gDAOC","file":"material-tree.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/tree'), require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/tree', ['exports', '@angular/cdk/tree', '@angular/core', '@angular/material/core', '@angular/cdk/coercion', '@angular/cdk/collections', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.tree = {}), global.ng.cdk.tree, global.ng.core, global.ng.material.core, global.ng.cdk.coercion, global.ng.cdk.collections, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, tree, core, core$1, coercion, collections, rxjs, operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _MatTreeNodeMixinBase = core$1.mixinTabIndex(core$1.mixinDisabled(tree.CdkTreeNode));\n    /**\n     * Wrapper for the CdkTree node with Material design styles.\n     */\n    var MatTreeNode = /** @class */ (function (_super) {\n        __extends(MatTreeNode, _super);\n        function MatTreeNode(_elementRef, _tree, tabIndex) {\n            var _this = _super.call(this, _elementRef, _tree) || this;\n            _this._elementRef = _elementRef;\n            _this._tree = _tree;\n            _this.role = 'treeitem';\n            _this.tabIndex = Number(tabIndex) || 0;\n            return _this;\n        }\n        MatTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-tree-node',\n                        exportAs: 'matTreeNode',\n                        inputs: ['disabled', 'tabIndex'],\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                            '[attr.role]': 'role',\n                            'class': 'mat-tree-node'\n                        },\n                        providers: [{ provide: tree.CdkTreeNode, useExisting: MatTreeNode }]\n                    },] }\n        ];\n        /** @nocollapse */\n        MatTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: tree.CdkTree },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] }\n        ]; };\n        MatTreeNode.propDecorators = {\n            role: [{ type: core.Input }]\n        };\n        return MatTreeNode;\n    }(_MatTreeNodeMixinBase));\n    /**\n     * Wrapper for the CdkTree node definition with Material design styles.\n     */\n    var MatTreeNodeDef = /** @class */ (function (_super) {\n        __extends(MatTreeNodeDef, _super);\n        function MatTreeNodeDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTreeNodeDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodeDef]',\n                        inputs: [\n                            'when: matTreeNodeDefWhen'\n                        ],\n                        providers: [{ provide: tree.CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n                    },] }\n        ];\n        MatTreeNodeDef.propDecorators = {\n            data: [{ type: core.Input, args: ['matTreeNode',] }]\n        };\n        return MatTreeNodeDef;\n    }(tree.CdkTreeNodeDef));\n    /**\n     * Wrapper for the CdkTree nested node with Material design styles.\n     */\n    var MatNestedTreeNode = /** @class */ (function (_super) {\n        __extends(MatNestedTreeNode, _super);\n        function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n            var _this = _super.call(this, _elementRef, _tree, _differs) || this;\n            _this._elementRef = _elementRef;\n            _this._tree = _tree;\n            _this._differs = _differs;\n            _this._disabled = false;\n            _this.tabIndex = Number(tabIndex) || 0;\n            return _this;\n        }\n        Object.defineProperty(MatNestedTreeNode.prototype, \"disabled\", {\n            /** Whether the node is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatNestedTreeNode.prototype, \"tabIndex\", {\n            /** Tabindex for the node. */\n            get: function () { return this.disabled ? -1 : this._tabIndex; },\n            set: function (value) {\n                // If the specified tabIndex value is null or undefined, fall back to the default value.\n                this._tabIndex = value != null ? value : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // This is a workaround for https://github.com/angular/angular/issues/23091\n        // In aot mode, the lifecycle hooks from parent class are not called.\n        // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n        MatNestedTreeNode.prototype.ngAfterContentInit = function () {\n            _super.prototype.ngAfterContentInit.call(this);\n        };\n        MatNestedTreeNode.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        MatNestedTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-nested-tree-node',\n                        exportAs: 'matNestedTreeNode',\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.role]': 'role',\n                            'class': 'mat-nested-tree-node',\n                        },\n                        providers: [\n                            { provide: tree.CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                            { provide: tree.CdkTreeNode, useExisting: MatNestedTreeNode },\n                            { provide: tree.CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                        ]\n                    },] }\n        ];\n        /** @nocollapse */\n        MatNestedTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: tree.CdkTree },\n            { type: core.IterableDiffers },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] }\n        ]; };\n        MatNestedTreeNode.propDecorators = {\n            node: [{ type: core.Input, args: ['matNestedTreeNode',] }],\n            disabled: [{ type: core.Input }],\n            tabIndex: [{ type: core.Input }]\n        };\n        return MatNestedTreeNode;\n    }(tree.CdkNestedTreeNode));\n\n    /**\n     * Wrapper for the CdkTree padding with Material design styles.\n     */\n    var MatTreeNodePadding = /** @class */ (function (_super) {\n        __extends(MatTreeNodePadding, _super);\n        function MatTreeNodePadding() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTreeNodePadding.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodePadding]',\n                        providers: [{ provide: tree.CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n                    },] }\n        ];\n        MatTreeNodePadding.propDecorators = {\n            level: [{ type: core.Input, args: ['matTreeNodePadding',] }],\n            indent: [{ type: core.Input, args: ['matTreeNodePaddingIndent',] }]\n        };\n        return MatTreeNodePadding;\n    }(tree.CdkTreeNodePadding));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n     * inside the outlet.\n     */\n    var MatTreeNodeOutlet = /** @class */ (function () {\n        function MatTreeNodeOutlet(viewContainer, _node) {\n            this.viewContainer = viewContainer;\n            this._node = _node;\n        }\n        MatTreeNodeOutlet.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodeOutlet]',\n                        providers: [{\n                                provide: tree.CdkTreeNodeOutlet,\n                                useExisting: MatTreeNodeOutlet\n                            }]\n                    },] }\n        ];\n        /** @nocollapse */\n        MatTreeNodeOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [tree.CDK_TREE_NODE_OUTLET_NODE,] }, { type: core.Optional }] }\n        ]; };\n        return MatTreeNodeOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wrapper for the CdkTable with Material design styles.\n     */\n    var MatTree = /** @class */ (function (_super) {\n        __extends(MatTree, _super);\n        function MatTree() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTree.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-tree',\n                        exportAs: 'matTree',\n                        template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n                        host: {\n                            'class': 'mat-tree',\n                            'role': 'tree',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        providers: [{ provide: tree.CdkTree, useExisting: MatTree }],\n                        styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n                    }] }\n        ];\n        MatTree.propDecorators = {\n            _nodeOutlet: [{ type: core.ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n        };\n        return MatTree;\n    }(tree.CdkTree));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wrapper for the CdkTree's toggle with Material design styles.\n     */\n    var MatTreeNodeToggle = /** @class */ (function (_super) {\n        __extends(MatTreeNodeToggle, _super);\n        function MatTreeNodeToggle() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.recursive = false;\n            return _this;\n        }\n        MatTreeNodeToggle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodeToggle]',\n                        providers: [{ provide: tree.CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n                    },] }\n        ];\n        MatTreeNodeToggle.propDecorators = {\n            recursive: [{ type: core.Input, args: ['matTreeNodeToggleRecursive',] }]\n        };\n        return MatTreeNodeToggle;\n    }(tree.CdkTreeNodeToggle));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MAT_TREE_DIRECTIVES = [\n        MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet\n    ];\n    var MatTreeModule = /** @class */ (function () {\n        function MatTreeModule() {\n        }\n        MatTreeModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [tree.CdkTreeModule, core$1.MatCommonModule],\n                        exports: [core$1.MatCommonModule, MAT_TREE_DIRECTIVES],\n                        declarations: MAT_TREE_DIRECTIVES,\n                    },] }\n        ];\n        return MatTreeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Tree flattener to convert a normal type of node to node with children & level information.\n     * Transform nested nodes of type `T` to flattened nodes of type `F`.\n     *\n     * For example, the input data of type `T` is nested, and contains its children data:\n     *   SomeNode: {\n     *     key: 'Fruits',\n     *     children: [\n     *       NodeOne: {\n     *         key: 'Apple',\n     *       },\n     *       NodeTwo: {\n     *        key: 'Pear',\n     *      }\n     *    ]\n     *  }\n     *  After flattener flatten the tree, the structure will become\n     *  SomeNode: {\n     *    key: 'Fruits',\n     *    expandable: true,\n     *    level: 1\n     *  },\n     *  NodeOne: {\n     *    key: 'Apple',\n     *    expandable: false,\n     *    level: 2\n     *  },\n     *  NodeTwo: {\n     *   key: 'Pear',\n     *   expandable: false,\n     *   level: 2\n     * }\n     * and the output flattened type is `F` with additional information.\n     */\n    var MatTreeFlattener = /** @class */ (function () {\n        function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n            this.transformFunction = transformFunction;\n            this.getLevel = getLevel;\n            this.isExpandable = isExpandable;\n            this.getChildren = getChildren;\n        }\n        MatTreeFlattener.prototype._flattenNode = function (node, level, resultNodes, parentMap) {\n            var _this = this;\n            var flatNode = this.transformFunction(node, level);\n            resultNodes.push(flatNode);\n            if (this.isExpandable(flatNode)) {\n                var childrenNodes = this.getChildren(node);\n                if (childrenNodes) {\n                    if (Array.isArray(childrenNodes)) {\n                        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                    }\n                    else {\n                        childrenNodes.pipe(operators.take(1)).subscribe(function (children) {\n                            _this._flattenChildren(children, level, resultNodes, parentMap);\n                        });\n                    }\n                }\n            }\n            return resultNodes;\n        };\n        MatTreeFlattener.prototype._flattenChildren = function (children, level, resultNodes, parentMap) {\n            var _this = this;\n            children.forEach(function (child, index) {\n                var childParentMap = parentMap.slice();\n                childParentMap.push(index != children.length - 1);\n                _this._flattenNode(child, level + 1, resultNodes, childParentMap);\n            });\n        };\n        /**\n         * Flatten a list of node type T to flattened version of node F.\n         * Please note that type T may be nested, and the length of `structuredData` may be different\n         * from that of returned list `F[]`.\n         */\n        MatTreeFlattener.prototype.flattenNodes = function (structuredData) {\n            var _this = this;\n            var resultNodes = [];\n            structuredData.forEach(function (node) { return _this._flattenNode(node, 0, resultNodes, []); });\n            return resultNodes;\n        };\n        /**\n         * Expand flattened node with current expansion status.\n         * The returned list may have different length.\n         */\n        MatTreeFlattener.prototype.expandFlattenedNodes = function (nodes, treeControl) {\n            var _this = this;\n            var results = [];\n            var currentExpand = [];\n            currentExpand[0] = true;\n            nodes.forEach(function (node) {\n                var expand = true;\n                for (var i = 0; i <= _this.getLevel(node); i++) {\n                    expand = expand && currentExpand[i];\n                }\n                if (expand) {\n                    results.push(node);\n                }\n                if (_this.isExpandable(node)) {\n                    currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);\n                }\n            });\n            return results;\n        };\n        return MatTreeFlattener;\n    }());\n    /**\n     * Data source for flat tree.\n     * The data source need to handle expansion/collapsion of the tree node and change the data feed\n     * to `MatTree`.\n     * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n     * to type `F` for `MatTree` to consume.\n     */\n    var MatTreeFlatDataSource = /** @class */ (function (_super) {\n        __extends(MatTreeFlatDataSource, _super);\n        function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {\n            if (initialData === void 0) { initialData = []; }\n            var _this = _super.call(this) || this;\n            _this._treeControl = _treeControl;\n            _this._treeFlattener = _treeFlattener;\n            _this._flattenedData = new rxjs.BehaviorSubject([]);\n            _this._expandedData = new rxjs.BehaviorSubject([]);\n            _this._data = new rxjs.BehaviorSubject(initialData);\n            return _this;\n        }\n        Object.defineProperty(MatTreeFlatDataSource.prototype, \"data\", {\n            get: function () { return this._data.value; },\n            set: function (value) {\n                this._data.next(value);\n                this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n                this._treeControl.dataNodes = this._flattenedData.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatTreeFlatDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            var changes = [\n                collectionViewer.viewChange,\n                this._treeControl.expansionModel.changed,\n                this._flattenedData\n            ];\n            return rxjs.merge.apply(void 0, __spread(changes)).pipe(operators.map(function () {\n                _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this._treeControl));\n                return _this._expandedData.value;\n            }));\n        };\n        MatTreeFlatDataSource.prototype.disconnect = function () {\n            // no op\n        };\n        return MatTreeFlatDataSource;\n    }(collections.DataSource));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Data source for nested tree.\n     *\n     * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n     * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n     */\n    var MatTreeNestedDataSource = /** @class */ (function (_super) {\n        __extends(MatTreeNestedDataSource, _super);\n        function MatTreeNestedDataSource() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._data = new rxjs.BehaviorSubject([]);\n            return _this;\n        }\n        Object.defineProperty(MatTreeNestedDataSource.prototype, \"data\", {\n            /**\n             * Data for the nested tree\n             */\n            get: function () { return this._data.value; },\n            set: function (value) { this._data.next(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatTreeNestedDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            return rxjs.merge.apply(void 0, __spread([collectionViewer.viewChange, this._data])).pipe(operators.map(function () {\n                return _this.data;\n            }));\n        };\n        MatTreeNestedDataSource.prototype.disconnect = function () {\n            // no op\n        };\n        return MatTreeNestedDataSource;\n    }(collections.DataSource));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatNestedTreeNode = MatNestedTreeNode;\n    exports.MatTree = MatTree;\n    exports.MatTreeFlatDataSource = MatTreeFlatDataSource;\n    exports.MatTreeFlattener = MatTreeFlattener;\n    exports.MatTreeModule = MatTreeModule;\n    exports.MatTreeNestedDataSource = MatTreeNestedDataSource;\n    exports.MatTreeNode = MatTreeNode;\n    exports.MatTreeNodeDef = MatTreeNodeDef;\n    exports.MatTreeNodeOutlet = MatTreeNodeOutlet;\n    exports.MatTreeNodePadding = MatTreeNodePadding;\n    exports.MatTreeNodeToggle = MatTreeNodeToggle;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}