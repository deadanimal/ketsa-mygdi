/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, NgModule } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { of as observableOf } from 'rxjs';
// tslint:enable:no-any
/**
 * A null icon registry that must be imported to allow disabling of custom
 * icons.
 */
import * as ɵngcc0 from '@angular/core';
var FakeMatIconRegistry = /** @class */ (function () {
    function FakeMatIconRegistry() {
    }
    FakeMatIconRegistry.prototype.addSvgIcon = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconLiteral = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconLiteralInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSet = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetLiteral = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.addSvgIconSetLiteralInNamespace = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.registerFontClassAlias = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.classNameForFontAlias = function (alias) {
        return alias;
    };
    FakeMatIconRegistry.prototype.getDefaultFontSetClass = function () {
        return 'material-icons';
    };
    FakeMatIconRegistry.prototype.getSvgIconFromUrl = function () {
        return observableOf(this._generateEmptySvg());
    };
    FakeMatIconRegistry.prototype.getNamedSvgIcon = function () {
        return observableOf(this._generateEmptySvg());
    };
    FakeMatIconRegistry.prototype.setDefaultFontSetClass = function () {
        return this;
    };
    FakeMatIconRegistry.prototype.ngOnDestroy = function () { };
    FakeMatIconRegistry.prototype._generateEmptySvg = function () {
        var emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        emptySvg.classList.add('fake-testing-svg');
        // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.
        emptySvg.setAttribute('fit', '');
        emptySvg.setAttribute('height', '100%');
        emptySvg.setAttribute('width', '100%');
        emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        emptySvg.setAttribute('focusable', 'false');
        return emptySvg;
    };
FakeMatIconRegistry.ɵfac = function FakeMatIconRegistry_Factory(t) { return new (t || FakeMatIconRegistry)(); };
FakeMatIconRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FakeMatIconRegistry, factory: function (t) { return FakeMatIconRegistry.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FakeMatIconRegistry, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return FakeMatIconRegistry;
}());
export { FakeMatIconRegistry };
/** Import this module in tests to install the null icon registry. */
var MatIconTestingModule = /** @class */ (function () {
    function MatIconTestingModule() {
    }
MatIconTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconTestingModule });
MatIconTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconTestingModule_Factory(t) { return new (t || MatIconTestingModule)(); }, providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconTestingModule, [{
        type: NgModule,
        args: [{
                providers: [{ provide: MatIconRegistry, useClass: FakeMatIconRegistry }]
            }]
    }], function () { return []; }, null); })();
    return MatIconTestingModule;
}());
export { MatIconTestingModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9waXBlbGluZW5ldHdvcmsva2V0c2EtbXlnZGkvd2ViL25vZGVfbW9kdWxlcy9AYW5ndWxhci9tYXRlcmlhbC9lc201L2ljb24vdGVzdGluZy9mYWtlLWljb24tcmVnaXN0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUF3RE07Ozs7O2dEQUdBOzs7Ozs7O0tBT0Q7Ozs7Ozs7O2dEQUtDIiwiZmlsZSI6ImZha2UtaWNvbi1yZWdpc3RyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdEljb25SZWdpc3RyeSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuaW1wb3J0IHsgb2YgYXMgb2JzZXJ2YWJsZU9mIH0gZnJvbSAncnhqcyc7XG4vLyB0c2xpbnQ6ZW5hYmxlOm5vLWFueVxuLyoqXG4gKiBBIG51bGwgaWNvbiByZWdpc3RyeSB0aGF0IG11c3QgYmUgaW1wb3J0ZWQgdG8gYWxsb3cgZGlzYWJsaW5nIG9mIGN1c3RvbVxuICogaWNvbnMuXG4gKi9cbnZhciBGYWtlTWF0SWNvblJlZ2lzdHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZha2VNYXRJY29uUmVnaXN0cnkoKSB7XG4gICAgfVxuICAgIEZha2VNYXRJY29uUmVnaXN0cnkucHJvdG90eXBlLmFkZFN2Z0ljb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRmFrZU1hdEljb25SZWdpc3RyeS5wcm90b3R5cGUuYWRkU3ZnSWNvbkxpdGVyYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRmFrZU1hdEljb25SZWdpc3RyeS5wcm90b3R5cGUuYWRkU3ZnSWNvbkluTmFtZXNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEZha2VNYXRJY29uUmVnaXN0cnkucHJvdG90eXBlLmFkZFN2Z0ljb25MaXRlcmFsSW5OYW1lc3BhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRmFrZU1hdEljb25SZWdpc3RyeS5wcm90b3R5cGUuYWRkU3ZnSWNvblNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBGYWtlTWF0SWNvblJlZ2lzdHJ5LnByb3RvdHlwZS5hZGRTdmdJY29uU2V0TGl0ZXJhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBGYWtlTWF0SWNvblJlZ2lzdHJ5LnByb3RvdHlwZS5hZGRTdmdJY29uU2V0SW5OYW1lc3BhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRmFrZU1hdEljb25SZWdpc3RyeS5wcm90b3R5cGUuYWRkU3ZnSWNvblNldExpdGVyYWxJbk5hbWVzcGFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBGYWtlTWF0SWNvblJlZ2lzdHJ5LnByb3RvdHlwZS5yZWdpc3RlckZvbnRDbGFzc0FsaWFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEZha2VNYXRJY29uUmVnaXN0cnkucHJvdG90eXBlLmNsYXNzTmFtZUZvckZvbnRBbGlhcyA9IGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICByZXR1cm4gYWxpYXM7XG4gICAgfTtcbiAgICBGYWtlTWF0SWNvblJlZ2lzdHJ5LnByb3RvdHlwZS5nZXREZWZhdWx0Rm9udFNldENsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ21hdGVyaWFsLWljb25zJztcbiAgICB9O1xuICAgIEZha2VNYXRJY29uUmVnaXN0cnkucHJvdG90eXBlLmdldFN2Z0ljb25Gcm9tVXJsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZU9mKHRoaXMuX2dlbmVyYXRlRW1wdHlTdmcoKSk7XG4gICAgfTtcbiAgICBGYWtlTWF0SWNvblJlZ2lzdHJ5LnByb3RvdHlwZS5nZXROYW1lZFN2Z0ljb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlT2YodGhpcy5fZ2VuZXJhdGVFbXB0eVN2ZygpKTtcbiAgICB9O1xuICAgIEZha2VNYXRJY29uUmVnaXN0cnkucHJvdG90eXBlLnNldERlZmF1bHRGb250U2V0Q2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRmFrZU1hdEljb25SZWdpc3RyeS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgRmFrZU1hdEljb25SZWdpc3RyeS5wcm90b3R5cGUuX2dlbmVyYXRlRW1wdHlTdmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eVN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgIGVtcHR5U3ZnLmNsYXNzTGlzdC5hZGQoJ2Zha2UtdGVzdGluZy1zdmcnKTtcbiAgICAgICAgLy8gRW11bGF0ZSByZWFsIGljb24gY2hhcmFjdGVyaXN0aWNzIGZyb20gYE1hdEljb25SZWdpc3RyeWAgc28gc2l6ZSByZW1haW5zIGNvbnNpc3RlbnQgaW4gdGVzdHMuXG4gICAgICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgnZml0JywgJycpO1xuICAgICAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcxMDAlJyk7XG4gICAgICAgIGVtcHR5U3ZnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMTAwJScpO1xuICAgICAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpO1xuICAgICAgICBlbXB0eVN2Zy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuICAgICAgICByZXR1cm4gZW1wdHlTdmc7XG4gICAgfTtcbiAgICBGYWtlTWF0SWNvblJlZ2lzdHJ5LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gRmFrZU1hdEljb25SZWdpc3RyeTtcbn0oKSk7XG5leHBvcnQgeyBGYWtlTWF0SWNvblJlZ2lzdHJ5IH07XG4vKiogSW1wb3J0IHRoaXMgbW9kdWxlIGluIHRlc3RzIHRvIGluc3RhbGwgdGhlIG51bGwgaWNvbiByZWdpc3RyeS4gKi9cbnZhciBNYXRJY29uVGVzdGluZ01vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXRJY29uVGVzdGluZ01vZHVsZSgpIHtcbiAgICB9XG4gICAgTWF0SWNvblRlc3RpbmdNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBNYXRJY29uUmVnaXN0cnksIHVzZUNsYXNzOiBGYWtlTWF0SWNvblJlZ2lzdHJ5IH1dXG4gICAgICAgICAgICAgICAgfSxdIH1cbiAgICBdO1xuICAgIHJldHVybiBNYXRJY29uVGVzdGluZ01vZHVsZTtcbn0oKSk7XG5leHBvcnQgeyBNYXRJY29uVGVzdGluZ01vZHVsZSB9O1xuIl19