import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { AnimationOptions, ErrorEvent, EventData, LngLatBoundsLike, Map, MapboxEvent, MapboxOptions, MapBoxZoomEvent, MapContextEvent, MapMouseEvent, MapSourceDataEvent, MapStyleDataEvent, MapTouchEvent, MapWheelEvent, PointLike } from 'mapbox-gl';
import { MapService, MovingOptions } from './map.service';
import { MapEvent } from './map.types';
export declare class MapComponent implements OnChanges, OnDestroy, AfterViewInit, Omit<MapboxOptions, 'bearing' | 'container' | 'pitch' | 'zoom'>, MapEvent {
    private MapService;
    accessToken?: MapboxOptions['accessToken'];
    collectResourceTiming?: MapboxOptions['collectResourceTiming'];
    crossSourceCollisions?: MapboxOptions['crossSourceCollisions'];
    customMapboxApiUrl?: string;
    fadeDuration?: MapboxOptions['fadeDuration'];
    hash?: MapboxOptions['hash'];
    refreshExpiredTiles?: MapboxOptions['refreshExpiredTiles'];
    failIfMajorPerformanceCaveat?: MapboxOptions['failIfMajorPerformanceCaveat'];
    bearingSnap?: MapboxOptions['bearingSnap'];
    interactive?: MapboxOptions['interactive'];
    pitchWithRotate?: MapboxOptions['pitchWithRotate'];
    clickTolerance?: MapboxOptions['clickTolerance'];
    attributionControl?: MapboxOptions['attributionControl'];
    logoPosition?: MapboxOptions['logoPosition'];
    maxTileCacheSize?: MapboxOptions['maxTileCacheSize'];
    localIdeographFontFamily?: MapboxOptions['localIdeographFontFamily'];
    preserveDrawingBuffer?: MapboxOptions['preserveDrawingBuffer'];
    trackResize?: MapboxOptions['trackResize'];
    transformRequest?: MapboxOptions['transformRequest'];
    bounds?: MapboxOptions['bounds'];
    antialias?: MapboxOptions['antialias'];
    locale: MapboxOptions['locale'];
    minZoom?: MapboxOptions['minZoom'];
    maxZoom?: MapboxOptions['maxZoom'];
    minPitch?: MapboxOptions['minPitch'];
    maxPitch?: MapboxOptions['maxPitch'];
    scrollZoom?: MapboxOptions['scrollZoom'];
    dragRotate?: MapboxOptions['dragRotate'];
    touchPitch?: MapboxOptions['touchPitch'];
    touchZoomRotate?: MapboxOptions['touchZoomRotate'];
    doubleClickZoom?: MapboxOptions['doubleClickZoom'];
    keyboard?: MapboxOptions['keyboard'];
    dragPan?: MapboxOptions['dragPan'];
    boxZoom?: MapboxOptions['boxZoom'];
    style: MapboxOptions['style'];
    center?: MapboxOptions['center'];
    maxBounds?: MapboxOptions['maxBounds'];
    zoom?: [number];
    bearing?: [number];
    pitch?: [number];
    fitBoundsOptions?: MapboxOptions['fitBoundsOptions'];
    renderWorldCopies?: MapboxOptions['renderWorldCopies'];
    movingMethod: 'jumpTo' | 'easeTo' | 'flyTo';
    movingOptions?: MovingOptions;
    fitBounds?: LngLatBoundsLike;
    fitScreenCoordinates?: [PointLike, PointLike];
    centerWithPanTo?: boolean;
    panToOptions?: AnimationOptions;
    cursorStyle?: string;
    mapResize: EventEmitter<MapboxEvent<undefined> & EventData>;
    mapRemove: EventEmitter<MapboxEvent<undefined> & EventData>;
    mapMouseDown: EventEmitter<MapMouseEvent & EventData>;
    mapMouseUp: EventEmitter<MapMouseEvent & EventData>;
    mapMouseMove: EventEmitter<MapMouseEvent & EventData>;
    mapClick: EventEmitter<MapMouseEvent & EventData>;
    mapDblClick: EventEmitter<MapMouseEvent & EventData>;
    mapMouseOver: EventEmitter<MapMouseEvent & EventData>;
    mapMouseOut: EventEmitter<MapMouseEvent & EventData>;
    mapContextMenu: EventEmitter<MapMouseEvent & EventData>;
    mapTouchStart: EventEmitter<MapTouchEvent & EventData>;
    mapTouchEnd: EventEmitter<MapTouchEvent & EventData>;
    mapTouchMove: EventEmitter<MapTouchEvent & EventData>;
    mapTouchCancel: EventEmitter<MapTouchEvent & EventData>;
    mapWheel: EventEmitter<MapWheelEvent & EventData>;
    moveStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    move: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    moveEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    mapDragStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    mapDrag: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    mapDragEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    zoomStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    zoomEvt: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    zoomEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;
    rotateStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    rotate: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    rotateEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    pitchStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    pitchEvt: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    pitchEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    boxZoomStart: EventEmitter<MapBoxZoomEvent & EventData>;
    boxZoomEnd: EventEmitter<MapBoxZoomEvent & EventData>;
    boxZoomCancel: EventEmitter<MapBoxZoomEvent & EventData>;
    webGlContextLost: EventEmitter<MapContextEvent & EventData>;
    webGlContextRestored: EventEmitter<MapContextEvent & EventData>;
    mapLoad: EventEmitter<Map>;
    idle: EventEmitter<MapboxEvent<undefined> & EventData>;
    render: EventEmitter<MapboxEvent<undefined> & EventData>;
    mapError: EventEmitter<ErrorEvent & EventData>;
    data: EventEmitter<(MapSourceDataEvent & EventData) | (MapStyleDataEvent & EventData)>;
    styleData: EventEmitter<MapStyleDataEvent & EventData>;
    sourceData: EventEmitter<MapSourceDataEvent & EventData>;
    dataLoading: EventEmitter<(MapSourceDataEvent & EventData) | (MapStyleDataEvent & EventData)>;
    styleDataLoading: EventEmitter<MapStyleDataEvent & EventData>;
    sourceDataLoading: EventEmitter<MapSourceDataEvent & EventData>;
    styleImageMissing: EventEmitter<{
        id: string;
    } & EventData>;
    /**
     * @deprecated Use mapResize instead
     */
    resize: EventEmitter<MapboxEvent<undefined> & EventData>;
    /**
     * @deprecated Use mapRemove instead
     */
    remove: EventEmitter<MapboxEvent<undefined> & EventData>;
    /**
     * @deprecated Use mapMouseDown instead
     */
    mouseDown: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapMouseUp instead
     */
    mouseUp: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapMouseMove instead
     */
    mouseMove: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapClick instead
     */
    click: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapDblClick instead
     */
    dblClick: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapMouseOver instead
     */
    mouseOver: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapMouseOut instead
     */
    mouseOut: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapContextMenu instead
     */
    contextMenu: EventEmitter<MapMouseEvent & EventData>;
    /**
     * @deprecated Use mapTouchStart instead
     */
    touchStart: EventEmitter<MapTouchEvent & EventData>;
    /**
     * @deprecated Use mapTouchEnd instead
     */
    touchEnd: EventEmitter<MapTouchEvent & EventData>;
    /**
     * @deprecated Use mapTouchMove instead
     */
    touchMove: EventEmitter<MapTouchEvent & EventData>;
    /**
     * @deprecated Use mapTouchCancel instead
     */
    touchCancel: EventEmitter<MapTouchEvent & EventData>;
    /**
     * @deprecated Use mapWheel instead
     */
    wheel: EventEmitter<MapWheelEvent & EventData>;
    /**
     * @deprecated Use mapDragStart instead
     */
    dragStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    /**
     * @deprecated Use mapDrag instead
     */
    drag: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    /**
     * @deprecated Use mapDragEnd instead
     */
    dragEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;
    /**
     * @deprecated Use mapLoad instead
     */
    load: EventEmitter<Map>;
    /**
     * @deprecated Use mapError instead
     */
    error: EventEmitter<ErrorEvent & EventData>;
    get mapInstance(): Map;
    mapContainer: ElementRef;
    constructor(MapService: MapService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    private warnDeprecatedOutputs;
}
