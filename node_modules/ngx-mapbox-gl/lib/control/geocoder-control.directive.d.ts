import { AfterContentInit, EventEmitter, InjectionToken, NgZone, OnChanges, SimpleChanges } from '@angular/core';
import MapboxGeocoder, { Result, LngLatLiteral } from '@mapbox/mapbox-gl-geocoder';
import { MapService } from '../map/map.service';
import { GeocoderEvent } from '../map/map.types';
import { ControlComponent } from './control.component';
import { Map, Marker } from 'mapbox-gl';
export declare const MAPBOX_GEOCODER_API_KEY: InjectionToken<unknown>;
export { Result, Results } from '@mapbox/mapbox-gl-geocoder';
export declare class GeocoderControlDirective implements AfterContentInit, OnChanges, GeocoderEvent {
    private MapService;
    private zone;
    private ControlComponent;
    private readonly MAPBOX_GEOCODER_API_KEY;
    countries?: string;
    placeholder?: string;
    zoom?: number;
    bbox?: [number, number, number, number];
    types?: string;
    flyTo?: boolean;
    minLength?: number;
    limit?: number;
    language?: string;
    accessToken?: string;
    filter?: (feature: Result) => boolean;
    localGeocoder?: (query: string) => Result[];
    mapboxgl?: Map;
    marker: boolean | Marker;
    proximity?: LngLatLiteral;
    searchInput: string;
    clear: EventEmitter<void>;
    loading: EventEmitter<{
        query: string;
    }>;
    geocoderResults: EventEmitter<MapboxGeocoder.Results>;
    geocoderResult: EventEmitter<{
        result: Result;
    }>;
    geocoderError: EventEmitter<any>;
    /**
     * @deprecated Use geocoderResults instead
     */
    results: EventEmitter<MapboxGeocoder.Results>;
    /**
     * @deprecated Use geocoderResult instead
     */
    result: EventEmitter<{
        result: Result;
    }>;
    /**
     * @deprecated Use geocoderError instead
     */
    error: EventEmitter<any>;
    geocoder: MapboxGeocoder;
    private lastResultId?;
    constructor(MapService: MapService, zone: NgZone, ControlComponent: ControlComponent<MapboxGeocoder>, MAPBOX_GEOCODER_API_KEY: string);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private addControl;
    private hookEvents;
    private warnDeprecatedOutputs;
}
