import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { AnyLayer, EventData, Layer } from 'mapbox-gl';
import { MapService } from '../map/map.service';
import { LayerEvents } from '../map/map.types';
export declare class LayerComponent implements OnInit, OnDestroy, OnChanges, Layer, LayerEvents {
    private MapService;
    id: AnyLayer['id'];
    source?: Layer['source'];
    type: AnyLayer['type'];
    metadata?: Layer['metadata'];
    sourceLayer?: Layer['source-layer'];
    filter?: Layer['filter'];
    layout?: Layer['layout'];
    paint?: Layer['paint'];
    before?: string;
    minzoom?: Layer['minzoom'];
    maxzoom?: Layer['maxzoom'];
    layerClick: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerDblClick: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseDown: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseUp: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseEnter: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseLeave: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseMove: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseOver: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerMouseOut: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerContextMenu: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerTouchStart: EventEmitter<import("mapbox-gl").MapTouchEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerTouchEnd: EventEmitter<import("mapbox-gl").MapTouchEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    layerTouchCancel: EventEmitter<import("mapbox-gl").MapTouchEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerClick instead
     */
    click: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerDblClick instead
     */
    dblClick: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseDown instead
     */
    mouseDown: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseUp instead
     */
    mouseUp: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseEnter instead
     */
    mouseEnter: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseLeave instead
     */
    mouseLeave: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseMove instead
     */
    mouseMove: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseOver instead
     */
    mouseOver: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerMouseOut instead
     */
    mouseOut: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerContextMenu instead
     */
    contextMenu: EventEmitter<import("mapbox-gl").MapMouseEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerTouchStart instead
     */
    touchStart: EventEmitter<import("mapbox-gl").MapTouchEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerTouchEnd instead
     */
    touchEnd: EventEmitter<import("mapbox-gl").MapTouchEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    /**
     * @deprecated Use layerTouchCancel instead
     */
    touchCancel: EventEmitter<import("mapbox-gl").MapTouchEvent & {
        features?: import("mapbox-gl").MapboxGeoJSONFeature[] | undefined;
    } & EventData>;
    private layerAdded;
    private sub;
    constructor(MapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private init;
    private warnDeprecatedOutputs;
}
