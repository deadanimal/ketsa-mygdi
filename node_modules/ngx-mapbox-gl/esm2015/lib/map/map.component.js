import { __awaiter } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { deprecationWarning } from '../utils';
import { MapService } from './map.service';
export class MapComponent {
    constructor(MapService) {
        this.MapService = MapService;
        /* Added by ngx-mapbox-gl */
        this.movingMethod = 'flyTo';
        this.mapResize = new EventEmitter();
        this.mapRemove = new EventEmitter();
        this.mapMouseDown = new EventEmitter();
        this.mapMouseUp = new EventEmitter();
        this.mapMouseMove = new EventEmitter();
        this.mapClick = new EventEmitter();
        this.mapDblClick = new EventEmitter();
        this.mapMouseOver = new EventEmitter();
        this.mapMouseOut = new EventEmitter();
        this.mapContextMenu = new EventEmitter();
        this.mapTouchStart = new EventEmitter();
        this.mapTouchEnd = new EventEmitter();
        this.mapTouchMove = new EventEmitter();
        this.mapTouchCancel = new EventEmitter();
        this.mapWheel = new EventEmitter();
        this.moveStart = new EventEmitter();
        this.move = new EventEmitter();
        this.moveEnd = new EventEmitter();
        this.mapDragStart = new EventEmitter();
        this.mapDrag = new EventEmitter();
        this.mapDragEnd = new EventEmitter();
        this.zoomStart = new EventEmitter();
        this.zoomEvt = new EventEmitter();
        this.zoomEnd = new EventEmitter();
        this.rotateStart = new EventEmitter();
        this.rotate = new EventEmitter();
        this.rotateEnd = new EventEmitter();
        this.pitchStart = new EventEmitter();
        this.pitchEvt = new EventEmitter();
        this.pitchEnd = new EventEmitter();
        this.boxZoomStart = new EventEmitter();
        this.boxZoomEnd = new EventEmitter();
        this.boxZoomCancel = new EventEmitter();
        this.webGlContextLost = new EventEmitter();
        this.webGlContextRestored = new EventEmitter();
        this.mapLoad = new EventEmitter();
        this.idle = new EventEmitter();
        this.render = new EventEmitter();
        this.mapError = new EventEmitter();
        this.data = new EventEmitter();
        this.styleData = new EventEmitter();
        this.sourceData = new EventEmitter();
        this.dataLoading = new EventEmitter();
        this.styleDataLoading = new EventEmitter();
        this.sourceDataLoading = new EventEmitter();
        this.styleImageMissing = new EventEmitter();
        /**
         * @deprecated Use mapResize instead
         */
        this.resize = new EventEmitter();
        /**
         * @deprecated Use mapRemove instead
         */
        this.remove = new EventEmitter();
        /**
         * @deprecated Use mapMouseDown instead
         */
        this.mouseDown = new EventEmitter();
        /**
         * @deprecated Use mapMouseUp instead
         */
        this.mouseUp = new EventEmitter();
        /**
         * @deprecated Use mapMouseMove instead
         */
        this.mouseMove = new EventEmitter();
        /**
         * @deprecated Use mapClick instead
         */
        this.click = new EventEmitter();
        /**
         * @deprecated Use mapDblClick instead
         */
        this.dblClick = new EventEmitter();
        /**
         * @deprecated Use mapMouseOver instead
         */
        this.mouseOver = new EventEmitter();
        /**
         * @deprecated Use mapMouseOut instead
         */
        this.mouseOut = new EventEmitter();
        /**
         * @deprecated Use mapContextMenu instead
         */
        this.contextMenu = new EventEmitter();
        /**
         * @deprecated Use mapTouchStart instead
         */
        this.touchStart = new EventEmitter();
        /**
         * @deprecated Use mapTouchEnd instead
         */
        this.touchEnd = new EventEmitter();
        /**
         * @deprecated Use mapTouchMove instead
         */
        this.touchMove = new EventEmitter();
        /**
         * @deprecated Use mapTouchCancel instead
         */
        this.touchCancel = new EventEmitter();
        /**
         * @deprecated Use mapWheel instead
         */
        this.wheel = new EventEmitter();
        /**
         * @deprecated Use mapDragStart instead
         */
        this.dragStart = new EventEmitter();
        /**
         * @deprecated Use mapDrag instead
         */
        this.drag = new EventEmitter();
        /**
         * @deprecated Use mapDragEnd instead
         */
        this.dragEnd = new EventEmitter();
        /**
         * @deprecated Use mapLoad instead
         */
        this.load = new EventEmitter();
        /**
         * @deprecated Use mapError instead
         */
        this.error = new EventEmitter();
    }
    get mapInstance() {
        return this.MapService.mapInstance;
    }
    ngAfterViewInit() {
        this.warnDeprecatedOutputs();
        this.MapService.setup({
            accessToken: this.accessToken,
            customMapboxApiUrl: this.customMapboxApiUrl,
            mapOptions: {
                collectResourceTiming: this.collectResourceTiming,
                container: this.mapContainer.nativeElement,
                crossSourceCollisions: this.crossSourceCollisions,
                fadeDuration: this.fadeDuration,
                minZoom: this.minZoom,
                maxZoom: this.maxZoom,
                minPitch: this.minPitch,
                maxPitch: this.maxPitch,
                style: this.style,
                hash: this.hash,
                interactive: this.interactive,
                bearingSnap: this.bearingSnap,
                pitchWithRotate: this.pitchWithRotate,
                clickTolerance: this.clickTolerance,
                attributionControl: this.attributionControl,
                logoPosition: this.logoPosition,
                failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,
                preserveDrawingBuffer: this.preserveDrawingBuffer,
                refreshExpiredTiles: this.refreshExpiredTiles,
                maxBounds: this.maxBounds,
                scrollZoom: this.scrollZoom,
                boxZoom: this.boxZoom,
                dragRotate: this.dragRotate,
                dragPan: this.dragPan,
                keyboard: this.keyboard,
                doubleClickZoom: this.doubleClickZoom,
                touchPitch: this.touchPitch,
                touchZoomRotate: this.touchZoomRotate,
                trackResize: this.trackResize,
                center: this.center,
                zoom: this.zoom,
                bearing: this.bearing,
                pitch: this.pitch,
                renderWorldCopies: this.renderWorldCopies,
                maxTileCacheSize: this.maxTileCacheSize,
                localIdeographFontFamily: this.localIdeographFontFamily,
                transformRequest: this.transformRequest,
                bounds: this.bounds ? this.bounds : this.fitBounds,
                fitBoundsOptions: this.fitBoundsOptions,
                antialias: this.antialias,
                locale: this.locale,
            },
            mapEvents: this,
        });
        if (this.cursorStyle) {
            this.MapService.changeCanvasCursor(this.cursorStyle);
        }
    }
    ngOnDestroy() {
        this.MapService.destroyMap();
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.MapService.mapCreated$.toPromise();
            if (changes.cursorStyle && !changes.cursorStyle.isFirstChange()) {
                this.MapService.changeCanvasCursor(changes.cursorStyle.currentValue);
            }
            if (changes.minZoom && !changes.minZoom.isFirstChange()) {
                this.MapService.updateMinZoom(changes.minZoom.currentValue);
            }
            if (changes.maxZoom && !changes.maxZoom.isFirstChange()) {
                this.MapService.updateMaxZoom(changes.maxZoom.currentValue);
            }
            if (changes.minPitch && !changes.minPitch.isFirstChange()) {
                this.MapService.updateMinPitch(changes.minPitch.currentValue);
            }
            if (changes.maxPitch && !changes.maxPitch.isFirstChange()) {
                this.MapService.updateMaxPitch(changes.maxPitch.currentValue);
            }
            if (changes.renderWorldCopies &&
                !changes.renderWorldCopies.isFirstChange()) {
                this.MapService.updateRenderWorldCopies(changes.renderWorldCopies.currentValue);
            }
            if (changes.scrollZoom && !changes.scrollZoom.isFirstChange()) {
                this.MapService.updateScrollZoom(changes.scrollZoom.currentValue);
            }
            if (changes.dragRotate && !changes.dragRotate.isFirstChange()) {
                this.MapService.updateDragRotate(changes.dragRotate.currentValue);
            }
            if (changes.touchPitch && !changes.touchPitch.isFirstChange()) {
                this.MapService.updateTouchPitch(changes.touchPitch.currentValue);
            }
            if (changes.touchZoomRotate && !changes.touchZoomRotate.isFirstChange()) {
                this.MapService.updateTouchZoomRotate(changes.touchZoomRotate.currentValue);
            }
            if (changes.doubleClickZoom && !changes.doubleClickZoom.isFirstChange()) {
                this.MapService.updateDoubleClickZoom(changes.doubleClickZoom.currentValue);
            }
            if (changes.keyboard && !changes.keyboard.isFirstChange()) {
                this.MapService.updateKeyboard(changes.keyboard.currentValue);
            }
            if (changes.dragPan && !changes.dragPan.isFirstChange()) {
                this.MapService.updateDragPan(changes.dragPan.currentValue);
            }
            if (changes.boxZoom && !changes.boxZoom.isFirstChange()) {
                this.MapService.updateBoxZoom(changes.boxZoom.currentValue);
            }
            if (changes.style && !changes.style.isFirstChange()) {
                this.MapService.updateStyle(changes.style.currentValue);
            }
            if (changes.maxBounds && !changes.maxBounds.isFirstChange()) {
                this.MapService.updateMaxBounds(changes.maxBounds.currentValue);
            }
            if (changes.fitBounds &&
                changes.fitBounds.currentValue &&
                !changes.fitBounds.isFirstChange()) {
                this.MapService.fitBounds(changes.fitBounds.currentValue, this.fitBoundsOptions);
            }
            if (changes.fitScreenCoordinates &&
                changes.fitScreenCoordinates.currentValue) {
                if ((this.center || this.zoom || this.pitch || this.fitBounds) &&
                    changes.fitScreenCoordinates.isFirstChange()) {
                    console.warn('[ngx-mapbox-gl] center / zoom / pitch / fitBounds inputs are being overridden by fitScreenCoordinates input');
                }
                this.MapService.fitScreenCoordinates(changes.fitScreenCoordinates.currentValue, this.bearing ? this.bearing[0] : 0, this.movingOptions);
            }
            if (this.centerWithPanTo &&
                changes.center &&
                !changes.center.isFirstChange() &&
                !changes.zoom &&
                !changes.bearing &&
                !changes.pitch) {
                this.MapService.panTo(this.center, this.panToOptions);
            }
            else if ((changes.center && !changes.center.isFirstChange()) ||
                (changes.zoom && !changes.zoom.isFirstChange()) ||
                (changes.bearing &&
                    !changes.bearing.isFirstChange() &&
                    !changes.fitScreenCoordinates) ||
                (changes.pitch && !changes.pitch.isFirstChange())) {
                this.MapService.move(this.movingMethod, this.movingOptions, changes.zoom && this.zoom ? this.zoom[0] : undefined, changes.center ? this.center : undefined, changes.bearing && this.bearing ? this.bearing[0] : undefined, changes.pitch && this.pitch ? this.pitch[0] : undefined);
            }
        });
    }
    warnDeprecatedOutputs() {
        const dw = deprecationWarning.bind(undefined, MapComponent.name);
        if (this.resize.observers.length) {
            dw('resize', 'mapResize');
        }
        if (this.remove.observers.length) {
            dw('remove', 'mapRemove');
        }
        if (this.mouseDown.observers.length) {
            dw('mouseDown', 'mapMouseDown');
        }
        if (this.mouseUp.observers.length) {
            dw('mouseUp', 'mapMouseUp');
        }
        if (this.mouseMove.observers.length) {
            dw('mouseMove', 'mapMouseMove');
        }
        if (this.click.observers.length) {
            dw('click', 'mapClick');
        }
        if (this.dblClick.observers.length) {
            dw('dblClick', 'mapDblClick');
        }
        if (this.mouseOver.observers.length) {
            dw('mouseOver', 'mapMouseOver');
        }
        if (this.mouseOut.observers.length) {
            dw('mouseOut', 'mapMouseOut');
        }
        if (this.contextMenu.observers.length) {
            dw('contextMenu', 'mapContextMenu');
        }
        if (this.touchStart.observers.length) {
            dw('touchStart', 'mapTouchStart');
        }
        if (this.touchEnd.observers.length) {
            dw('touchEnd', 'mapTouchEnd');
        }
        if (this.touchMove.observers.length) {
            dw('touchMove', 'mapTouchMove');
        }
        if (this.touchCancel.observers.length) {
            dw('touchCancel', 'mapTouchCancel');
        }
        if (this.wheel.observers.length) {
            dw('wheel', 'mapWheel');
        }
        if (this.dragStart.observers.length) {
            dw('dragStart', 'mapDragStart');
        }
        if (this.drag.observers.length) {
            dw('drag', 'mapDrag');
        }
        if (this.dragEnd.observers.length) {
            dw('dragEnd', 'mapDragEnd');
        }
        if (this.load.observers.length) {
            dw('load', 'mapLoad');
        }
        if (this.error.observers.length) {
            dw('error', 'mapError');
        }
    }
}
MapComponent.decorators = [
    { type: Component, args: [{
                selector: 'mgl-map',
                template: '<div #container></div>',
                providers: [MapService],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      :host {
        display: block;
      }
      div {
        height: 100%;
        width: 100%;
      }
    `]
            },] }
];
MapComponent.ctorParameters = () => [
    { type: MapService }
];
MapComponent.propDecorators = {
    accessToken: [{ type: Input }],
    collectResourceTiming: [{ type: Input }],
    crossSourceCollisions: [{ type: Input }],
    customMapboxApiUrl: [{ type: Input }],
    fadeDuration: [{ type: Input }],
    hash: [{ type: Input }],
    refreshExpiredTiles: [{ type: Input }],
    failIfMajorPerformanceCaveat: [{ type: Input }],
    bearingSnap: [{ type: Input }],
    interactive: [{ type: Input }],
    pitchWithRotate: [{ type: Input }],
    clickTolerance: [{ type: Input }],
    attributionControl: [{ type: Input }],
    logoPosition: [{ type: Input }],
    maxTileCacheSize: [{ type: Input }],
    localIdeographFontFamily: [{ type: Input }],
    preserveDrawingBuffer: [{ type: Input }],
    trackResize: [{ type: Input }],
    transformRequest: [{ type: Input }],
    bounds: [{ type: Input }],
    antialias: [{ type: Input }],
    locale: [{ type: Input }],
    minZoom: [{ type: Input }],
    maxZoom: [{ type: Input }],
    minPitch: [{ type: Input }],
    maxPitch: [{ type: Input }],
    scrollZoom: [{ type: Input }],
    dragRotate: [{ type: Input }],
    touchPitch: [{ type: Input }],
    touchZoomRotate: [{ type: Input }],
    doubleClickZoom: [{ type: Input }],
    keyboard: [{ type: Input }],
    dragPan: [{ type: Input }],
    boxZoom: [{ type: Input }],
    style: [{ type: Input }],
    center: [{ type: Input }],
    maxBounds: [{ type: Input }],
    zoom: [{ type: Input }],
    bearing: [{ type: Input }],
    pitch: [{ type: Input }],
    fitBoundsOptions: [{ type: Input }],
    renderWorldCopies: [{ type: Input }],
    movingMethod: [{ type: Input }],
    movingOptions: [{ type: Input }],
    fitBounds: [{ type: Input }],
    fitScreenCoordinates: [{ type: Input }],
    centerWithPanTo: [{ type: Input }],
    panToOptions: [{ type: Input }],
    cursorStyle: [{ type: Input }],
    mapResize: [{ type: Output }],
    mapRemove: [{ type: Output }],
    mapMouseDown: [{ type: Output }],
    mapMouseUp: [{ type: Output }],
    mapMouseMove: [{ type: Output }],
    mapClick: [{ type: Output }],
    mapDblClick: [{ type: Output }],
    mapMouseOver: [{ type: Output }],
    mapMouseOut: [{ type: Output }],
    mapContextMenu: [{ type: Output }],
    mapTouchStart: [{ type: Output }],
    mapTouchEnd: [{ type: Output }],
    mapTouchMove: [{ type: Output }],
    mapTouchCancel: [{ type: Output }],
    mapWheel: [{ type: Output }],
    moveStart: [{ type: Output }],
    move: [{ type: Output }],
    moveEnd: [{ type: Output }],
    mapDragStart: [{ type: Output }],
    mapDrag: [{ type: Output }],
    mapDragEnd: [{ type: Output }],
    zoomStart: [{ type: Output }],
    zoomEvt: [{ type: Output }],
    zoomEnd: [{ type: Output }],
    rotateStart: [{ type: Output }],
    rotate: [{ type: Output }],
    rotateEnd: [{ type: Output }],
    pitchStart: [{ type: Output }],
    pitchEvt: [{ type: Output }],
    pitchEnd: [{ type: Output }],
    boxZoomStart: [{ type: Output }],
    boxZoomEnd: [{ type: Output }],
    boxZoomCancel: [{ type: Output }],
    webGlContextLost: [{ type: Output }],
    webGlContextRestored: [{ type: Output }],
    mapLoad: [{ type: Output }],
    idle: [{ type: Output }],
    render: [{ type: Output }],
    mapError: [{ type: Output }],
    data: [{ type: Output }],
    styleData: [{ type: Output }],
    sourceData: [{ type: Output }],
    dataLoading: [{ type: Output }],
    styleDataLoading: [{ type: Output }],
    sourceDataLoading: [{ type: Output }],
    styleImageMissing: [{ type: Output }],
    resize: [{ type: Output }],
    remove: [{ type: Output }],
    mouseDown: [{ type: Output }],
    mouseUp: [{ type: Output }],
    mouseMove: [{ type: Output }],
    click: [{ type: Output }],
    dblClick: [{ type: Output }],
    mouseOver: [{ type: Output }],
    mouseOut: [{ type: Output }],
    contextMenu: [{ type: Output }],
    touchStart: [{ type: Output }],
    touchEnd: [{ type: Output }],
    touchMove: [{ type: Output }],
    touchCancel: [{ type: Output }],
    wheel: [{ type: Output }],
    dragStart: [{ type: Output }],
    drag: [{ type: Output }],
    dragEnd: [{ type: Output }],
    load: [{ type: Output }],
    error: [{ type: Output }],
    mapContainer: [{ type: ViewChild, args: ['container', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,