import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { MapService } from '../map/map.service';
import { deprecationWarning } from '../utils';
export class MarkerComponent {
    constructor(MapService) {
        this.MapService = MapService;
        this.markerDragStart = new EventEmitter();
        this.markerDragEnd = new EventEmitter();
        this.markerDrag = new EventEmitter();
        /**
         * @deprecated Use markerDragStart instead
         */
        this.dragStart = new EventEmitter();
        /**
         * @deprecated Use markerDragEnd instead
         */
        this.dragEnd = new EventEmitter();
        /**
         * @deprecated Use markerDrag instead
         */
        this.drag = new EventEmitter();
    }
    ngOnInit() {
        this.warnDeprecatedOutputs();
        if (this.feature && this.lngLat) {
            throw new Error('feature and lngLat input are mutually exclusive');
        }
    }
    ngOnChanges(changes) {
        if (changes.lngLat && !changes.lngLat.isFirstChange()) {
            this.markerInstance.setLngLat(this.lngLat);
        }
        if (changes.feature && !changes.feature.isFirstChange()) {
            this.markerInstance.setLngLat(this.feature.geometry.coordinates);
        }
        if (changes.draggable && !changes.draggable.isFirstChange()) {
            this.markerInstance.setDraggable(!!this.draggable);
        }
        if (changes.popupShown && !changes.popupShown.isFirstChange()) {
            changes.popupShown.currentValue
                ? this.markerInstance.getPopup().addTo(this.MapService.mapInstance)
                : this.markerInstance.getPopup().remove();
        }
        if (changes.pitchAlignment && !changes.pitchAlignment.isFirstChange()) {
            this.markerInstance.setPitchAlignment(changes.pitchAlignment.currentValue);
        }
        if (changes.rotationAlignment &&
            !changes.rotationAlignment.isFirstChange()) {
            this.markerInstance.setRotationAlignment(changes.rotationAlignment.currentValue);
        }
    }
    ngAfterViewInit() {
        this.MapService.mapCreated$.subscribe(() => {
            this.markerInstance = this.MapService.addMarker({
                markersOptions: {
                    offset: this.offset,
                    anchor: this.anchor,
                    pitchAlignment: this.pitchAlignment,
                    rotationAlignment: this.rotationAlignment,
                    draggable: !!this.draggable,
                    element: this.content.nativeElement,
                    feature: this.feature,
                    lngLat: this.lngLat,
                    clickTolerance: this.clickTolerance,
                },
                markersEvents: {
                    markerDragStart: this.markerDragStart,
                    markerDrag: this.markerDrag,
                    markerDragEnd: this.markerDragEnd,
                    dragStart: this.dragStart,
                    drag: this.drag,
                    dragEnd: this.dragEnd,
                },
            });
        });
    }
    ngOnDestroy() {
        this.MapService.removeMarker(this.markerInstance);
        this.markerInstance = undefined;
    }
    togglePopup() {
        this.markerInstance.togglePopup();
    }
    updateCoordinates(coordinates) {
        this.markerInstance.setLngLat(coordinates);
    }
    warnDeprecatedOutputs() {
        const dw = deprecationWarning.bind(undefined, MarkerComponent.name);
        if (this.dragStart.observers.length) {
            dw('dragStart', 'markerDragStart');
        }
        if (this.dragEnd.observers.length) {
            dw('dragEnd', 'markerDragEnd');
        }
        if (this.drag.observers.length) {
            dw('drag', 'markerDrag');
        }
    }
}
MarkerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mgl-marker',
                template: '<div [class]="className" #content><ng-content></ng-content></div>',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
MarkerComponent.ctorParameters = () => [
    { type: MapService }
];
MarkerComponent.propDecorators = {
    offset: [{ type: Input }],
    anchor: [{ type: Input }],
    clickTolerance: [{ type: Input }],
    feature: [{ type: Input }],
    lngLat: [{ type: Input }],
    draggable: [{ type: Input }],
    popupShown: [{ type: Input }],
    className: [{ type: Input }],
    pitchAlignment: [{ type: Input }],
    rotationAlignment: [{ type: Input }],
    markerDragStart: [{ type: Output }],
    markerDragEnd: [{ type: Output }],
    markerDrag: [{ type: Output }],
    dragStart: [{ type: Output }],
    dragEnd: [{ type: Output }],
    drag: [{ type: Output }],
    content: [{ type: ViewChild, args: ['content', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,