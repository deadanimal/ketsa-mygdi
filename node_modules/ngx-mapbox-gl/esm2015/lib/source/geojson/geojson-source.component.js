import { __awaiter } from "tslib";
import { ChangeDetectionStrategy, Component, Input, NgZone, } from '@angular/core';
import { fromEvent, Subject, Subscription } from 'rxjs';
import { debounceTime, filter } from 'rxjs/operators';
import { MapService } from '../../map/map.service';
export class GeoJSONSourceComponent {
    constructor(MapService, zone) {
        this.MapService = MapService;
        this.zone = zone;
        this.updateFeatureData = new Subject();
        this.sub = new Subscription();
        this.sourceAdded = false;
        this.featureIdCounter = 0;
    }
    ngOnInit() {
        if (!this.data) {
            this.data = {
                type: 'FeatureCollection',
                features: [],
            };
        }
        const sub1 = this.MapService.mapLoaded$.subscribe(() => {
            this.init();
            const sub = fromEvent(this.MapService.mapInstance, 'styledata')
                .pipe(filter(() => !this.MapService.mapInstance.getSource(this.id)))
                .subscribe(() => {
                this.init();
            });
            this.sub.add(sub);
        });
        this.sub.add(sub1);
    }
    ngOnChanges(changes) {
        if (!this.sourceAdded) {
            return;
        }
        if ((changes.maxzoom && !changes.maxzoom.isFirstChange()) ||
            (changes.attribution && !changes.attribution.isFirstChange()) ||
            (changes.buffer && !changes.buffer.isFirstChange()) ||
            (changes.tolerance && !changes.tolerance.isFirstChange()) ||
            (changes.cluster && !changes.cluster.isFirstChange()) ||
            (changes.clusterRadius && !changes.clusterRadius.isFirstChange()) ||
            (changes.clusterMaxZoom && !changes.clusterMaxZoom.isFirstChange()) ||
            (changes.clusterMinPoints && !changes.clusterMinPoints.isFirstChange()) ||
            (changes.clusterProperties &&
                !changes.clusterProperties.isFirstChange()) ||
            (changes.lineMetrics && !changes.lineMetrics.isFirstChange()) ||
            (changes.generateId && !changes.generateId.isFirstChange()) ||
            (changes.promoteId && !changes.promoteId.isFirstChange()) ||
            (changes.filter && !changes.filter.isFirstChange())) {
            this.ngOnDestroy();
            this.ngOnInit();
        }
        if (changes.data && !changes.data.isFirstChange()) {
            const source = this.MapService.getSource(this.id);
            source.setData(this.data);
        }
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
        if (this.sourceAdded) {
            this.MapService.removeSource(this.id);
            this.sourceAdded = false;
        }
    }
    /**
     * For clustered sources, fetches the zoom at which the given cluster expands.
     * @param clusterId The value of the cluster's cluster_id property.
     */
    getClusterExpansionZoom(clusterId) {
        return __awaiter(this, void 0, void 0, function* () {
            const source = this.MapService.getSource(this.id);
            return this.zone.run(() => __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    source.getClusterExpansionZoom(clusterId, (error, zoom) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(zoom);
                        }
                    });
                });
            }));
        });
    }
    /**
     * For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).
     * @param clusterId The value of the cluster's cluster_id property.
     */
    getClusterChildren(clusterId) {
        return __awaiter(this, void 0, void 0, function* () {
            const source = this.MapService.getSource(this.id);
            return this.zone.run(() => __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    source.getClusterChildren(clusterId, (error, features) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(features);
                        }
                    });
                });
            }));
        });
    }
    /**
     * For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).
     * @param clusterId The value of the cluster's cluster_id property.
     * @param limit The maximum number of features to return.
     * @param offset The number of features to skip (e.g. for pagination).
     */
    getClusterLeaves(clusterId, limit, offset) {
        return __awaiter(this, void 0, void 0, function* () {
            const source = this.MapService.getSource(this.id);
            return this.zone.run(() => __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    source.getClusterLeaves(clusterId, limit, offset, (error, features) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(features);
                        }
                    });
                });
            }));
        });
    }
    _addFeature(feature) {
        const collection = (this.data);
        collection.features.push(feature);
        this.updateFeatureData.next();
    }
    _removeFeature(feature) {
        const collection = (this.data);
        const index = collection.features.indexOf(feature);
        if (index > -1) {
            collection.features.splice(index, 1);
        }
        this.updateFeatureData.next();
    }
    _getNewFeatureId() {
        return ++this.featureIdCounter;
    }
    init() {
        const source = {
            type: 'geojson',
            data: this.data,
            maxzoom: this.maxzoom,
            attribution: this.attribution,
            buffer: this.buffer,
            tolerance: this.tolerance,
            cluster: this.cluster,
            clusterRadius: this.clusterRadius,
            clusterMaxZoom: this.clusterMaxZoom,
            clusterMinPoints: this.clusterMinPoints,
            clusterProperties: this.clusterProperties,
            lineMetrics: this.lineMetrics,
            generateId: this.generateId,
            promoteId: this.promoteId,
            filter: this.filter,
        };
        this.MapService.addSource(this.id, source);
        const sub = this.updateFeatureData.pipe(debounceTime(0)).subscribe(() => {
            const source = this.MapService.getSource(this.id);
            source.setData(this.data);
        });
        this.sub.add(sub);
        this.sourceAdded = true;
    }
}
GeoJSONSourceComponent.decorators = [
    { type: Component, args: [{
                selector: 'mgl-geojson-source',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
GeoJSONSourceComponent.ctorParameters = () => [
    { type: MapService },
    { type: NgZone }
];
GeoJSONSourceComponent.propDecorators = {
    id: [{ type: Input }],
    data: [{ type: Input }],
    maxzoom: [{ type: Input }],
    attribution: [{ type: Input }],
    buffer: [{ type: Input }],
    tolerance: [{ type: Input }],
    cluster: [{ type: Input }],
    clusterRadius: [{ type: Input }],
    clusterMaxZoom: [{ type: Input }],
    clusterMinPoints: [{ type: Input }],
    clusterProperties: [{ type: Input }],
    lineMetrics: [{ type: Input }],
    generateId: [{ type: Input }],
    promoteId: [{ type: Input }],
    filter: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,