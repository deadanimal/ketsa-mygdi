import { Component, EventEmitter, Input, Output, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { filter, mapTo, startWith, switchMap } from 'rxjs/operators';
import { MapService } from '../map/map.service';
import { deprecationWarning } from '../utils';
export class LayerComponent {
    constructor(MapService) {
        this.MapService = MapService;
        this.layerClick = new EventEmitter();
        this.layerDblClick = new EventEmitter();
        this.layerMouseDown = new EventEmitter();
        this.layerMouseUp = new EventEmitter();
        this.layerMouseEnter = new EventEmitter();
        this.layerMouseLeave = new EventEmitter();
        this.layerMouseMove = new EventEmitter();
        this.layerMouseOver = new EventEmitter();
        this.layerMouseOut = new EventEmitter();
        this.layerContextMenu = new EventEmitter();
        this.layerTouchStart = new EventEmitter();
        this.layerTouchEnd = new EventEmitter();
        this.layerTouchCancel = new EventEmitter();
        /**
         * @deprecated Use layerClick instead
         */
        this.click = new EventEmitter();
        /**
         * @deprecated Use layerDblClick instead
         */
        this.dblClick = new EventEmitter();
        /**
         * @deprecated Use layerMouseDown instead
         */
        this.mouseDown = new EventEmitter();
        /**
         * @deprecated Use layerMouseUp instead
         */
        this.mouseUp = new EventEmitter();
        /**
         * @deprecated Use layerMouseEnter instead
         */
        this.mouseEnter = new EventEmitter();
        /**
         * @deprecated Use layerMouseLeave instead
         */
        this.mouseLeave = new EventEmitter();
        /**
         * @deprecated Use layerMouseMove instead
         */
        this.mouseMove = new EventEmitter();
        /**
         * @deprecated Use layerMouseOver instead
         */
        this.mouseOver = new EventEmitter();
        /**
         * @deprecated Use layerMouseOut instead
         */
        this.mouseOut = new EventEmitter();
        /**
         * @deprecated Use layerContextMenu instead
         */
        this.contextMenu = new EventEmitter();
        /**
         * @deprecated Use layerTouchStart instead
         */
        this.touchStart = new EventEmitter();
        /**
         * @deprecated Use layerTouchEnd instead
         */
        this.touchEnd = new EventEmitter();
        /**
         * @deprecated Use layerTouchCancel instead
         */
        this.touchCancel = new EventEmitter();
        this.layerAdded = false;
    }
    ngOnInit() {
        this.warnDeprecatedOutputs();
        this.sub = this.MapService.mapLoaded$
            .pipe(switchMap(() => fromEvent(this.MapService.mapInstance, 'styledata').pipe(mapTo(false), filter(() => !this.MapService.mapInstance.getLayer(this.id)), startWith(true))))
            .subscribe((bindEvents) => this.init(bindEvents));
    }
    ngOnChanges(changes) {
        if (!this.layerAdded) {
            return;
        }
        if (changes.paint && !changes.paint.isFirstChange()) {
            this.MapService.setAllLayerPaintProperty(this.id, changes.paint.currentValue);
        }
        if (changes.layout && !changes.layout.isFirstChange()) {
            this.MapService.setAllLayerLayoutProperty(this.id, changes.layout.currentValue);
        }
        if (changes.filter && !changes.filter.isFirstChange()) {
            this.MapService.setLayerFilter(this.id, changes.filter.currentValue);
        }
        if (changes.before && !changes.before.isFirstChange()) {
            this.MapService.setLayerBefore(this.id, changes.before.currentValue);
        }
        if ((changes.minzoom && !changes.minzoom.isFirstChange()) ||
            (changes.maxzoom && !changes.maxzoom.isFirstChange())) {
            this.MapService.setLayerZoomRange(this.id, this.minzoom, this.maxzoom);
        }
    }
    ngOnDestroy() {
        if (this.layerAdded) {
            this.MapService.removeLayer(this.id);
        }
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }
    init(bindEvents) {
        const layer = {
            layerOptions: {
                id: this.id,
                type: this.type,
                source: this.source,
                metadata: this.metadata,
                'source-layer': this.sourceLayer,
                minzoom: this.minzoom,
                maxzoom: this.maxzoom,
                filter: this.filter,
                layout: this.layout,
                paint: this.paint,
            },
            layerEvents: {
                layerClick: this.layerClick,
                layerDblClick: this.layerDblClick,
                layerMouseDown: this.layerMouseDown,
                layerMouseUp: this.layerMouseUp,
                layerMouseEnter: this.layerMouseEnter,
                layerMouseLeave: this.layerMouseLeave,
                layerMouseMove: this.layerMouseMove,
                layerMouseOver: this.layerMouseOver,
                layerMouseOut: this.layerMouseOut,
                layerContextMenu: this.layerContextMenu,
                layerTouchStart: this.layerTouchStart,
                layerTouchEnd: this.layerTouchEnd,
                layerTouchCancel: this.layerTouchCancel,
                click: this.click,
                dblClick: this.dblClick,
                mouseDown: this.mouseDown,
                mouseUp: this.mouseUp,
                mouseEnter: this.mouseEnter,
                mouseLeave: this.mouseLeave,
                mouseMove: this.mouseMove,
                mouseOver: this.mouseOver,
                mouseOut: this.mouseOut,
                contextMenu: this.contextMenu,
                touchStart: this.touchStart,
                touchEnd: this.touchEnd,
                touchCancel: this.touchCancel,
            },
        };
        this.MapService.addLayer(layer, bindEvents, this.before);
        this.layerAdded = true;
    }
    warnDeprecatedOutputs() {
        const dw = deprecationWarning.bind(undefined, LayerComponent.name);
        if (this.click.observers.length) {
            dw('click', 'layerClick');
        }
        if (this.dblClick.observers.length) {
            dw('dblClick', 'layerDblClick');
        }
        if (this.mouseDown.observers.length) {
            dw('mouseDown', 'layerMouseDown');
        }
        if (this.mouseUp.observers.length) {
            dw('mouseUp', 'layerMouseUp');
        }
        if (this.mouseEnter.observers.length) {
            dw('mouseEnter', 'layerMouseEnter');
        }
        if (this.mouseLeave.observers.length) {
            dw('mouseLeave', 'layerMouseLeave');
        }
        if (this.mouseMove.observers.length) {
            dw('mouseMove', 'layerMouseMove');
        }
        if (this.mouseOver.observers.length) {
            dw('mouseOver', 'layerMouseOver');
        }
        if (this.mouseOut.observers.length) {
            dw('mouseOut', 'layerMouseOut');
        }
        if (this.contextMenu.observers.length) {
            dw('contextMenu', 'layerContextMenu');
        }
        if (this.touchStart.observers.length) {
            dw('touchStart', 'layerTouchStart');
        }
        if (this.touchEnd.observers.length) {
            dw('touchEnd', 'layerTouchEnd');
        }
        if (this.touchCancel.observers.length) {
            dw('touchCancel', 'layerTouchCancel');
        }
    }
}
LayerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mgl-layer',
                template: ''
            },] }
];
LayerComponent.ctorParameters = () => [
    { type: MapService }
];
LayerComponent.propDecorators = {
    id: [{ type: Input }],
    source: [{ type: Input }],
    type: [{ type: Input }],
    metadata: [{ type: Input }],
    sourceLayer: [{ type: Input }],
    filter: [{ type: Input }],
    layout: [{ type: Input }],
    paint: [{ type: Input }],
    before: [{ type: Input }],
    minzoom: [{ type: Input }],
    maxzoom: [{ type: Input }],
    layerClick: [{ type: Output }],
    layerDblClick: [{ type: Output }],
    layerMouseDown: [{ type: Output }],
    layerMouseUp: [{ type: Output }],
    layerMouseEnter: [{ type: Output }],
    layerMouseLeave: [{ type: Output }],
    layerMouseMove: [{ type: Output }],
    layerMouseOver: [{ type: Output }],
    layerMouseOut: [{ type: Output }],
    layerContextMenu: [{ type: Output }],
    layerTouchStart: [{ type: Output }],
    layerTouchEnd: [{ type: Output }],
    layerTouchCancel: [{ type: Output }],
    click: [{ type: Output }],
    dblClick: [{ type: Output }],
    mouseDown: [{ type: Output }],
    mouseUp: [{ type: Output }],
    mouseEnter: [{ type: Output }],
    mouseLeave: [{ type: Output }],
    mouseMove: [{ type: Output }],
    mouseOver: [{ type: Output }],
    mouseOut: [{ type: Output }],
    contextMenu: [{ type: Output }],
    touchStart: [{ type: Output }],
    touchEnd: [{ type: Output }],
    touchCancel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hcGJveC1nbC9zcmMvbGliL2xheWVyL2xheWVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBSUwsTUFBTSxHQUVQLE1BQU0sZUFBZSxDQUFDO0FBUXZCLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sb0JBQW9CLENBQUM7QUFFNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBTTlDLE1BQU0sT0FBTyxjQUFjO0lBZ0d6QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBL0VoQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQWtDLENBQUM7UUFDaEUsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBa0MsQ0FBQztRQUNuRSxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFrQyxDQUFDO1FBQ3BFLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQWtDLENBQUM7UUFDbEUsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFFekMsQ0FBQztRQUNNLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBRXpDLENBQUM7UUFDTSxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFrQyxDQUFDO1FBQ3BFLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQWtDLENBQUM7UUFDcEUsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBa0MsQ0FBQztRQUNuRSxxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFFMUMsQ0FBQztRQUNNLG9CQUFlLEdBQUcsSUFB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TTs2QkFDTixNQUFNOzJCQUNOLE1BQU07OEJBQ04sTUFBTTs4QkFHTixNQUFNOzZCQUdOLE1BQU07NkJBQ04sTUFBTTs0QkFDTixNQUFNOytCQUNOLE1BQU07OEJBR04sTUFBTTs0QkFHTixNQUFNOytCQUNOLE1BQU07b0JBTU4sTUFBTTt1QkFJTixNQUFNO3dCQUlOLE1BQU07c0JBSU4sTUFBTTt5QkFJTixNQUFNO3lCQUlOLE1BQU07d0JBSU4sTUFBTTt3QkFJTixNQUFNO3VCQUlOLE1BQU07MEJBSU4sTUFBTTt5QkFJTixNQUFNO3VCQUlOLE1BQU07MEJBSU4sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBBbnlMYXllcixcclxuICBFdmVudERhdGEsXHJcbiAgTGF5ZXIsXHJcbiAgTWFwTGF5ZXJNb3VzZUV2ZW50LFxyXG4gIE1hcExheWVyVG91Y2hFdmVudCxcclxufSBmcm9tICdtYXBib3gtZ2wnO1xyXG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcFRvLCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTWFwU2VydmljZSwgU2V0dXBMYXllciB9IGZyb20gJy4uL21hcC9tYXAuc2VydmljZSc7XHJcbmltcG9ydCB7IExheWVyRXZlbnRzIH0gZnJvbSAnLi4vbWFwL21hcC50eXBlcyc7XHJcbmltcG9ydCB7IGRlcHJlY2F0aW9uV2FybmluZyB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbWdsLWxheWVyJyxcclxuICB0ZW1wbGF0ZTogJycsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMYXllckNvbXBvbmVudFxyXG4gIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgTGF5ZXIsIExheWVyRXZlbnRzIHtcclxuICAvKiBJbml0IGlucHV0cyAqL1xyXG4gIEBJbnB1dCgpIGlkOiBBbnlMYXllclsnaWQnXTtcclxuICBASW5wdXQoKSBzb3VyY2U/OiBMYXllclsnc291cmNlJ107XHJcbiAgQElucHV0KCkgdHlwZTogQW55TGF5ZXJbJ3R5cGUnXTtcclxuICBASW5wdXQoKSBtZXRhZGF0YT86IExheWVyWydtZXRhZGF0YSddO1xyXG4gIEBJbnB1dCgpIHNvdXJjZUxheWVyPzogTGF5ZXJbJ3NvdXJjZS1sYXllciddO1xyXG5cclxuICAvKiBEeW5hbWljIGlucHV0cyAqL1xyXG4gIEBJbnB1dCgpIGZpbHRlcj86IExheWVyWydmaWx0ZXInXTtcclxuICBASW5wdXQoKSBsYXlvdXQ/OiBMYXllclsnbGF5b3V0J107XHJcbiAgQElucHV0KCkgcGFpbnQ/OiBMYXllclsncGFpbnQnXTtcclxuICBASW5wdXQoKSBiZWZvcmU/OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbWluem9vbT86IExheWVyWydtaW56b29tJ107XHJcbiAgQElucHV0KCkgbWF4em9vbT86IExheWVyWydtYXh6b29tJ107XHJcblxyXG4gIEBPdXRwdXQoKSBsYXllckNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyRGJsQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICBAT3V0cHV0KCkgbGF5ZXJNb3VzZURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICBAT3V0cHV0KCkgbGF5ZXJNb3VzZVVwID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyTW91c2VFbnRlciA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGFcclxuICA+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyTW91c2VMZWF2ZSA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGFcclxuICA+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyTW91c2VNb3ZlID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyTW91c2VPdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyTW91c2VPdXQgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICBAT3V0cHV0KCkgbGF5ZXJDb250ZXh0TWVudSA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGFcclxuICA+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyVG91Y2hTdGFydCA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBNYXBMYXllclRvdWNoRXZlbnQgJiBFdmVudERhdGFcclxuICA+KCk7XHJcbiAgQE91dHB1dCgpIGxheWVyVG91Y2hFbmQgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyVG91Y2hFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICBAT3V0cHV0KCkgbGF5ZXJUb3VjaENhbmNlbCA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBNYXBMYXllclRvdWNoRXZlbnQgJiBFdmVudERhdGFcclxuICA+KCk7XHJcbiAgLyoqXHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGxheWVyQ2xpY2sgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TWFwTGF5ZXJNb3VzZUV2ZW50ICYgRXZlbnREYXRhPigpO1xyXG4gIC8qKlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBsYXllckRibENsaWNrIGluc3RlYWRcclxuICAgKi9cclxuICBAT3V0cHV0KCkgZGJsQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICAvKipcclxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbGF5ZXJNb3VzZURvd24gaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBtb3VzZURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICAvKipcclxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbGF5ZXJNb3VzZVVwIGluc3RlYWRcclxuICAgKi9cclxuICBAT3V0cHV0KCkgbW91c2VVcCA9IG5ldyBFdmVudEVtaXR0ZXI8TWFwTGF5ZXJNb3VzZUV2ZW50ICYgRXZlbnREYXRhPigpO1xyXG4gIC8qKlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBsYXllck1vdXNlRW50ZXIgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBtb3VzZUVudGVyID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgLyoqXHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGxheWVyTW91c2VMZWF2ZSBpbnN0ZWFkXHJcbiAgICovXHJcbiAgQE91dHB1dCgpIG1vdXNlTGVhdmUgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICAvKipcclxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbGF5ZXJNb3VzZU1vdmUgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBtb3VzZU1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICAvKipcclxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbGF5ZXJNb3VzZU92ZXIgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBtb3VzZU92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyTW91c2VFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuICAvKipcclxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbGF5ZXJNb3VzZU91dCBpbnN0ZWFkXHJcbiAgICovXHJcbiAgQE91dHB1dCgpIG1vdXNlT3V0ID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllck1vdXNlRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgLyoqXHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGxheWVyQ29udGV4dE1lbnUgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBjb250ZXh0TWVudSA9IG5ldyBFdmVudEVtaXR0ZXI8TWFwTGF5ZXJNb3VzZUV2ZW50ICYgRXZlbnREYXRhPigpO1xyXG4gIC8qKlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBsYXllclRvdWNoU3RhcnQgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSB0b3VjaFN0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBMYXllclRvdWNoRXZlbnQgJiBFdmVudERhdGE+KCk7XHJcbiAgLyoqXHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGxheWVyVG91Y2hFbmQgaW5zdGVhZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSB0b3VjaEVuZCA9IG5ldyBFdmVudEVtaXR0ZXI8TWFwTGF5ZXJUb3VjaEV2ZW50ICYgRXZlbnREYXRhPigpO1xyXG4gIC8qKlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBsYXllclRvdWNoQ2FuY2VsIGluc3RlYWRcclxuICAgKi9cclxuICBAT3V0cHV0KCkgdG91Y2hDYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPE1hcExheWVyVG91Y2hFdmVudCAmIEV2ZW50RGF0YT4oKTtcclxuXHJcbiAgcHJpdmF0ZSBsYXllckFkZGVkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBzdWI6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBNYXBTZXJ2aWNlOiBNYXBTZXJ2aWNlKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMud2FybkRlcHJlY2F0ZWRPdXRwdXRzKCk7XHJcbiAgICB0aGlzLnN1YiA9IHRoaXMuTWFwU2VydmljZS5tYXBMb2FkZWQkXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxyXG4gICAgICAgICAgZnJvbUV2ZW50KDxhbnk+dGhpcy5NYXBTZXJ2aWNlLm1hcEluc3RhbmNlLCAnc3R5bGVkYXRhJykucGlwZShcclxuICAgICAgICAgICAgbWFwVG8oZmFsc2UpLFxyXG4gICAgICAgICAgICBmaWx0ZXIoKCkgPT4gIXRoaXMuTWFwU2VydmljZS5tYXBJbnN0YW5jZS5nZXRMYXllcih0aGlzLmlkKSksXHJcbiAgICAgICAgICAgIHN0YXJ0V2l0aCh0cnVlKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgICAuc3Vic2NyaWJlKChiaW5kRXZlbnRzOiBib29sZWFuKSA9PiB0aGlzLmluaXQoYmluZEV2ZW50cykpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKCF0aGlzLmxheWVyQWRkZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYW5nZXMucGFpbnQgJiYgIWNoYW5nZXMucGFpbnQuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgIHRoaXMuTWFwU2VydmljZS5zZXRBbGxMYXllclBhaW50UHJvcGVydHkoXHJcbiAgICAgICAgdGhpcy5pZCxcclxuICAgICAgICBjaGFuZ2VzLnBhaW50LmN1cnJlbnRWYWx1ZSFcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIGlmIChjaGFuZ2VzLmxheW91dCAmJiAhY2hhbmdlcy5sYXlvdXQuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgIHRoaXMuTWFwU2VydmljZS5zZXRBbGxMYXllckxheW91dFByb3BlcnR5KFxyXG4gICAgICAgIHRoaXMuaWQsXHJcbiAgICAgICAgY2hhbmdlcy5sYXlvdXQuY3VycmVudFZhbHVlIVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYW5nZXMuZmlsdGVyICYmICFjaGFuZ2VzLmZpbHRlci5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgdGhpcy5NYXBTZXJ2aWNlLnNldExheWVyRmlsdGVyKHRoaXMuaWQsIGNoYW5nZXMuZmlsdGVyLmN1cnJlbnRWYWx1ZSEpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNoYW5nZXMuYmVmb3JlICYmICFjaGFuZ2VzLmJlZm9yZS5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgdGhpcy5NYXBTZXJ2aWNlLnNldExheWVyQmVmb3JlKHRoaXMuaWQsIGNoYW5nZXMuYmVmb3JlLmN1cnJlbnRWYWx1ZSEpO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICAoY2hhbmdlcy5taW56b29tICYmICFjaGFuZ2VzLm1pbnpvb20uaXNGaXJzdENoYW5nZSgpKSB8fFxyXG4gICAgICAoY2hhbmdlcy5tYXh6b29tICYmICFjaGFuZ2VzLm1heHpvb20uaXNGaXJzdENoYW5nZSgpKVxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuTWFwU2VydmljZS5zZXRMYXllclpvb21SYW5nZSh0aGlzLmlkLCB0aGlzLm1pbnpvb20sIHRoaXMubWF4em9vbSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmxheWVyQWRkZWQpIHtcclxuICAgICAgdGhpcy5NYXBTZXJ2aWNlLnJlbW92ZUxheWVyKHRoaXMuaWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc3ViKSB7XHJcbiAgICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXQoYmluZEV2ZW50czogYm9vbGVhbikge1xyXG4gICAgY29uc3QgbGF5ZXI6IFNldHVwTGF5ZXIgPSB7XHJcbiAgICAgIGxheWVyT3B0aW9uczoge1xyXG4gICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgIHR5cGU6IDxhbnk+dGhpcy50eXBlLFxyXG4gICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2UsXHJcbiAgICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGEsXHJcbiAgICAgICAgJ3NvdXJjZS1sYXllcic6IHRoaXMuc291cmNlTGF5ZXIsXHJcbiAgICAgICAgbWluem9vbTogdGhpcy5taW56b29tLFxyXG4gICAgICAgIG1heHpvb206IHRoaXMubWF4em9vbSxcclxuICAgICAgICBmaWx0ZXI6IHRoaXMuZmlsdGVyLFxyXG4gICAgICAgIGxheW91dDogdGhpcy5sYXlvdXQsXHJcbiAgICAgICAgcGFpbnQ6IHRoaXMucGFpbnQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGxheWVyRXZlbnRzOiB7XHJcbiAgICAgICAgbGF5ZXJDbGljazogdGhpcy5sYXllckNsaWNrLFxyXG4gICAgICAgIGxheWVyRGJsQ2xpY2s6IHRoaXMubGF5ZXJEYmxDbGljayxcclxuICAgICAgICBsYXllck1vdXNlRG93bjogdGhpcy5sYXllck1vdXNlRG93bixcclxuICAgICAgICBsYXllck1vdXNlVXA6IHRoaXMubGF5ZXJNb3VzZVVwLFxyXG4gICAgICAgIGxheWVyTW91c2VFbnRlcjogdGhpcy5sYXllck1vdXNlRW50ZXIsXHJcbiAgICAgICAgbGF5ZXJNb3VzZUxlYXZlOiB0aGlzLmxheWVyTW91c2VMZWF2ZSxcclxuICAgICAgICBsYXllck1vdXNlTW92ZTogdGhpcy5sYXllck1vdXNlTW92ZSxcclxuICAgICAgICBsYXllck1vdXNlT3ZlcjogdGhpcy5sYXllck1vdXNlT3ZlcixcclxuICAgICAgICBsYXllck1vdXNlT3V0OiB0aGlzLmxheWVyTW91c2VPdXQsXHJcbiAgICAgICAgbGF5ZXJDb250ZXh0TWVudTogdGhpcy5sYXllckNvbnRleHRNZW51LFxyXG4gICAgICAgIGxheWVyVG91Y2hTdGFydDogdGhpcy5sYXllclRvdWNoU3RhcnQsXHJcbiAgICAgICAgbGF5ZXJUb3VjaEVuZDogdGhpcy5sYXllclRvdWNoRW5kLFxyXG4gICAgICAgIGxheWVyVG91Y2hDYW5jZWw6IHRoaXMubGF5ZXJUb3VjaENhbmNlbCxcclxuICAgICAgICBjbGljazogdGhpcy5jbGljayxcclxuICAgICAgICBkYmxDbGljazogdGhpcy5kYmxDbGljayxcclxuICAgICAgICBtb3VzZURvd246IHRoaXMubW91c2VEb3duLFxyXG4gICAgICAgIG1vdXNlVXA6IHRoaXMubW91c2VVcCxcclxuICAgICAgICBtb3VzZUVudGVyOiB0aGlzLm1vdXNlRW50ZXIsXHJcbiAgICAgICAgbW91c2VMZWF2ZTogdGhpcy5tb3VzZUxlYXZlLFxyXG4gICAgICAgIG1vdXNlTW92ZTogdGhpcy5tb3VzZU1vdmUsXHJcbiAgICAgICAgbW91c2VPdmVyOiB0aGlzLm1vdXNlT3ZlcixcclxuICAgICAgICBtb3VzZU91dDogdGhpcy5tb3VzZU91dCxcclxuICAgICAgICBjb250ZXh0TWVudTogdGhpcy5jb250ZXh0TWVudSxcclxuICAgICAgICB0b3VjaFN0YXJ0OiB0aGlzLnRvdWNoU3RhcnQsXHJcbiAgICAgICAgdG91Y2hFbmQ6IHRoaXMudG91Y2hFbmQsXHJcbiAgICAgICAgdG91Y2hDYW5jZWw6IHRoaXMudG91Y2hDYW5jZWwsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgdGhpcy5NYXBTZXJ2aWNlLmFkZExheWVyKGxheWVyLCBiaW5kRXZlbnRzLCB0aGlzLmJlZm9yZSk7XHJcbiAgICB0aGlzLmxheWVyQWRkZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB3YXJuRGVwcmVjYXRlZE91dHB1dHMoKSB7XHJcbiAgICBjb25zdCBkdyA9IGRlcHJlY2F0aW9uV2FybmluZy5iaW5kKHVuZGVmaW5lZCwgTGF5ZXJDb21wb25lbnQubmFtZSk7XHJcbiAgICBpZiAodGhpcy5jbGljay5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGR3KCdjbGljaycsICdsYXllckNsaWNrJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5kYmxDbGljay5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGR3KCdkYmxDbGljaycsICdsYXllckRibENsaWNrJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZURvd24ub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICBkdygnbW91c2VEb3duJywgJ2xheWVyTW91c2VEb3duJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZVVwLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgZHcoJ21vdXNlVXAnLCAnbGF5ZXJNb3VzZVVwJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZUVudGVyLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgZHcoJ21vdXNlRW50ZXInLCAnbGF5ZXJNb3VzZUVudGVyJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZUxlYXZlLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgZHcoJ21vdXNlTGVhdmUnLCAnbGF5ZXJNb3VzZUxlYXZlJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZU1vdmUub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICBkdygnbW91c2VNb3ZlJywgJ2xheWVyTW91c2VNb3ZlJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZU92ZXIub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICBkdygnbW91c2VPdmVyJywgJ2xheWVyTW91c2VPdmVyJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZU91dC5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGR3KCdtb3VzZU91dCcsICdsYXllck1vdXNlT3V0Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5jb250ZXh0TWVudS5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGR3KCdjb250ZXh0TWVudScsICdsYXllckNvbnRleHRNZW51Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50b3VjaFN0YXJ0Lm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgZHcoJ3RvdWNoU3RhcnQnLCAnbGF5ZXJUb3VjaFN0YXJ0Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50b3VjaEVuZC5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGR3KCd0b3VjaEVuZCcsICdsYXllclRvdWNoRW5kJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50b3VjaENhbmNlbC5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIGR3KCd0b3VjaENhbmNlbCcsICdsYXllclRvdWNoQ2FuY2VsJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==