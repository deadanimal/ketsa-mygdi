import { Directive, EventEmitter, Host, Inject, InjectionToken, Input, NgZone, Optional, Output, } from '@angular/core';
import MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';
import { MapService } from '../map/map.service';
import { deprecationWarning } from '../utils';
import { ControlComponent } from './control.component';
import { Map } from 'mapbox-gl';
export const MAPBOX_GEOCODER_API_KEY = new InjectionToken('MapboxApiKey');
export class GeocoderControlDirective {
    constructor(MapService, zone, ControlComponent, MAPBOX_GEOCODER_API_KEY) {
        this.MapService = MapService;
        this.zone = zone;
        this.ControlComponent = ControlComponent;
        this.MAPBOX_GEOCODER_API_KEY = MAPBOX_GEOCODER_API_KEY;
        this.marker = false;
        this.clear = new EventEmitter();
        this.loading = new EventEmitter();
        this.geocoderResults = new EventEmitter();
        this.geocoderResult = new EventEmitter();
        this.geocoderError = new EventEmitter();
        /**
         * @deprecated Use geocoderResults instead
         */
        this.results = new EventEmitter();
        /**
         * @deprecated Use geocoderResult instead
         */
        this.result = new EventEmitter();
        /**
         * @deprecated Use geocoderError instead
         */
        this.error = new EventEmitter();
    }
    ngAfterContentInit() {
        this.MapService.mapCreated$.subscribe(() => {
            if (this.ControlComponent.control) {
                throw new Error('Another control is already set for this control');
            }
            const options = {
                proximity: this.proximity,
                countries: this.countries,
                placeholder: this.placeholder,
                zoom: this.zoom,
                bbox: this.bbox,
                types: this.types,
                flyTo: this.flyTo,
                minLength: this.minLength,
                limit: this.limit,
                language: this.language,
                filter: this.filter,
                localGeocoder: this.localGeocoder,
                accessToken: this.accessToken || this.MAPBOX_GEOCODER_API_KEY,
                mapboxgl: this.mapboxgl,
                marker: this.marker,
            };
            Object.keys(options).forEach((key) => {
                const tkey = key;
                if (options[tkey] === undefined) {
                    delete options[tkey];
                }
            });
            this.geocoder = new MapboxGeocoder(options);
            this.hookEvents(this);
            this.addControl();
        });
        if (this.searchInput) {
            this.MapService.mapLoaded$.subscribe(() => {
                this.geocoder.query(this.searchInput);
            });
        }
    }
    ngOnChanges(changes) {
        if (!this.geocoder) {
            return;
        }
        if (changes.proximity && !changes.proximity.isFirstChange()) {
            this.geocoder.setProximity(changes.proximity.currentValue);
        }
        if (changes.searchInput) {
            this.geocoder.query(this.searchInput);
        }
    }
    addControl() {
        this.ControlComponent.control = this.geocoder;
        this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);
    }
    hookEvents(events) {
        this.warnDeprecatedOutputs(events);
        if (events.results.observers.length ||
            events.geocoderResults.observers.length) {
            this.geocoder.on('results', (evt) => this.zone.run(() => {
                events.geocoderResults.emit(evt);
                events.results.emit(evt);
            }));
        }
        if (events.geocoderResult.observers.length ||
            events.result.observers.length) {
            this.geocoder.on('result', (evt) => {
                // Workaroud issue https://github.com/mapbox/mapbox-gl-geocoder/issues/99
                if (this.lastResultId !== evt.result.id) {
                    this.lastResultId = evt.result.id;
                    this.zone.run(() => {
                        events.geocoderResult.emit(evt);
                        events.result.emit(evt);
                    });
                }
            });
        }
        if (events.error.observers.length ||
            events.geocoderError.observers.length) {
            this.geocoder.on('error', (evt) => this.zone.run(() => {
                events.geocoderError.emit(evt);
                events.error.emit(evt);
            }));
        }
        if (events.loading.observers.length) {
            this.geocoder.on('loading', (evt) => this.zone.run(() => events.loading.emit(evt)));
        }
        if (events.clear.observers.length) {
            this.geocoder.on('clear', () => this.zone.run(() => events.clear.emit()));
        }
    }
    warnDeprecatedOutputs(events) {
        const dw = deprecationWarning.bind(undefined, GeocoderControlDirective.name);
        if (events.results.observers.length) {
            dw('results', 'geocoderResults');
        }
        if (events.result.observers.length) {
            dw('result', 'geocoderResult');
        }
        if (events.error.observers.length) {
            dw('error', 'geocoderError');
        }
    }
}
GeocoderControlDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mglGeocoder]',
            },] }
];
GeocoderControlDirective.ctorParameters = () => [
    { type: MapService },
    { type: NgZone },
    { type: ControlComponent, decorators: [{ type: Host }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAPBOX_GEOCODER_API_KEY,] }] }
];
GeocoderControlDirective.propDecorators = {
    countries: [{ type: Input }],
    placeholder: [{ type: Input }],
    zoom: [{ type: Input }],
    bbox: [{ type: Input }],
    types: [{ type: Input }],
    flyTo: [{ type: Input }],
    minLength: [{ type: Input }],
    limit: [{ type: Input }],
    language: [{ type: Input }],
    accessToken: [{ type: Input }],
    filter: [{ type: Input }],
    localGeocoder: [{ type: Input }],
    mapboxgl: [{ type: Input }],
    marker: [{ type: Input }],
    proximity: [{ type: Input }],
    searchInput: [{ type: Input }],
    clear: [{ type: Output }],
    loading: [{ type: Output }],
    geocoderResults: [{ type: Output }],
    geocoderResult: [{ type: Output }],
    geocoderError: [{ type: Output }],
    results: [{ type: Output }],
    result: [{ type: Output }],
    error: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,